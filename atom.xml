<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gloria&#39;s Notebook</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-17T22:17:22.143Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Gloria Su</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Texture Mapping Using Images in WebGL</title>
    <link href="http://example.com/2022/11/11/Rendering-textured-and-transparent-models-in-WebGL/"/>
    <id>http://example.com/2022/11/11/Rendering-textured-and-transparent-models-in-WebGL/</id>
    <published>2022-11-12T01:26:31.000Z</published>
    <updated>2022-11-17T22:17:22.143Z</updated>
    
    <content type="html"><![CDATA[<p>References:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL#updating_the_shaders">Using textures in WebGL</a></li><li><a href="http://learnwebgl.brown37.net/10_surface_properties/texture_mapping_images.html">Texture Mapping Using Images</a></li><li><a href="https://zhuanlan.zhihu.com/p/150958567">WebGL textures</a></li><li><a href="http://www.dwenzhao.cn/profession/netbuild/html5webgl.html">WebGL programming</a></li></ul><h2 id="Load-Textures"><a href="#Load-Textures" class="headerlink" title="Load Textures"></a>Load Textures</h2><h3 id="Download-image"><a href="#Download-image" class="headerlink" title="Download image"></a>Download image</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initTextures</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> texture = gl.<span class="title function_">createTexture</span>();</span><br><span class="line">    gl.<span class="title function_">pixelStorei</span>(gl.<span class="property">UNPACK_FLIP_Y_WEBGL</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    image.<span class="property">crossOrigin</span> = <span class="string">&quot;anonymous&quot;</span>;</span><br><span class="line">    image.<span class="property">src</span> = url;</span><br><span class="line">    image.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="title function_">loadTexture</span>(image, texture); &#125;</span><br><span class="line">    <span class="keyword">return</span> texture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="❓Possible-problem"><a href="#❓Possible-problem" class="headerlink" title="❓Possible problem"></a>❓Possible problem</h4><p><strong>ERROR: The image element contains cross-origin data.</strong><br>WebGL just bans all images that are not from the same domain(CORS).<br>The easiest solution is to set the crossOrigin attribute to “anonymous” which means ask for permission but don’t send extra info. And then when the browser tries to get the image from the server, if it’s not the same domain, the browser will ask for CORS permission. What’s more, We can make a judgement here that checks if the image we’re trying to load is on the same origin and if so sets the crossOrigin attribute.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">new</span> <span class="title function_">URL</span>(url, <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>)).<span class="property">origin</span> !== <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">origin</span>)</span><br><span class="line">    image.<span class="property">crossOrigin</span> = <span class="string">&quot;anonymous&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="gl-pixelStorei"><a href="#gl-pixelStorei" class="headerlink" title="gl.pixelStorei"></a>gl.pixelStorei</h3><p><strong>gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true)</strong>: Flip the orientation of the image on the Y axis. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei">[MDN]</a><br>The texture coordinates are independent of the size of the image itself, the upper right corner is always (1.0, 1.0) regardless of the image size. Browsers copy pixels from the loaded image in top-to-bottom order just like the left one, but the t-axis of the texture coordinate system in WebGL is opposite to the y-axis of the image coordinate system like the right one, so we need to flip the image first to map the image to the graphics correctly.</p><p><img src="https://s2.loli.net/2022/11/18/SoJL3aBqK7hiycj.png" alt="12.png"></p><h4 id="❓Possible-problem-1"><a href="#❓Possible-problem-1" class="headerlink" title="❓Possible problem"></a>❓Possible problem</h4><p><strong>ERROR: Still rendering in wrong order.</strong><br>I tried to invert the y-axis of the image directly using the image preprocessing functions in WebGL, named pixelStorei. But this is still different from the target output, so I did one more step, Let x be equal to 1 minus x in the vertex shader.<br><img src="https://s2.loli.net/2022/11/18/P1HnAEOamzNGk6r.png" alt="13.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gl.<span class="title function_">pixelStorei</span>(gl.<span class="property">UNPACK_FLIP_Y_WEBGL</span>, <span class="number">1</span>)</span><br><span class="line">vTexture = aTexture * <span class="title function_">vec2</span>(-<span class="number">1.0</span>, <span class="number">1.0</span>) + <span class="title function_">vec2</span>(<span class="number">1.0</span>, <span class="number">0.0</span>); </span><br><span class="line"><span class="variable constant_">OR</span> vTexture = <span class="title function_">vec2</span>(<span class="number">1.0</span> - aTexture.<span class="property">x</span>, aTexture.<span class="property">y</span>); </span><br></pre></td></tr></table></figure><p>Of course, we can also make changes directly in the vertex shader without flipping the color map.<br><img src="https://s2.loli.net/2022/11/18/1NYM8sCuScRV42i.png" alt="14.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vTexture = <span class="title function_">vec2</span>(aTexture.<span class="property">x</span>, <span class="number">1.0</span> - aTexture.<span class="property">y</span>); </span><br><span class="line">vTexture = vTexture * <span class="title function_">vec2</span>(-<span class="number">1.0</span>, <span class="number">1.0</span>) + <span class="title function_">vec2</span>(<span class="number">1.0</span>, <span class="number">0.0</span>);</span><br></pre></td></tr></table></figure><h3 id="gl-activeTexture"><a href="#gl-activeTexture" class="headerlink" title="gl.activeTexture"></a>gl.activeTexture</h3><p><strong>gl.activeTexture(gl.TEXTURE0)</strong>: Make the “texture unit” 0 be the active texture unit. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/activeTexture">[MDN]</a><br>WebGL uses multiple textures at the same time through texture units. Each texture unit has a number to manage a texture object, and the built-in variables gl.TEXTURE0 to gl.TEXTURE7 each represent a texture unit. Before a texture unit can be used, gl.activeTexture(gl.TEXTURE0) needs to be called to activate it. Only the active object can be modified or used.</p><h3 id="gl-bindTexture"><a href="#gl-bindTexture" class="headerlink" title="gl.bindTexture"></a>gl.bindTexture</h3><p><strong>gl.bindTexture(gl.TEXTURE_2D, texture)</strong>: Make the “texture object” be the active texture object. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindTexture">[MDN]</a><br>In WebGL we can’t manipulate texture objects directly, we have to bind texture objects to texture units and then manipulate texture objects by manipulating texture units. This also declares that the texture object will hold a texture of type gl.TEXTURE_2D. The type of the texture, gl.TEXTURE_2D, can’t be changed after this initialization. <a href="http://learnwebgl.brown37.net/10_surface_properties/texture_mapping_images.html">[learnwebgl]</a></p><h3 id="gl-texParameteri"><a href="#gl-texParameteri" class="headerlink" title="gl.texParameteri"></a>gl.texParameteri</h3><p>Configure the parameters of the texture object: how to get the texture color according to the texture coordinates, which way to repeat the texture filling. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter">[MDN]</a> When a pixel corresponds to many texture pixels, regardless of NEARES or LINEAR, jaggedness will be a problem. The solution is to use small size textures so that each pixel does not correspond to many pixels. However, for objects close to the observer, small size textures can cause texture stretching, which looks like a blocky effect or blurring effect.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_WRAP_S</span>, gl.<span class="property">CLAMP_TO_EDGE</span>);</span><br><span class="line">gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_WRAP_T</span>, gl.<span class="property">CLAMP_TO_EDGE</span>);</span><br><span class="line">gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_MAG_FILTER</span>, gl.<span class="property">LINEAR</span>);</span><br><span class="line">gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_MIN_FILTER</span>, gl.<span class="property">LINEAR_MIPMAP_NEAREST</span>);</span><br></pre></td></tr></table></figure><h4 id="❓Possible-problem-2"><a href="#❓Possible-problem-2" class="headerlink" title="❓Possible problem"></a>❓Possible problem</h4><p><strong>ERROR: The texture is a non-power-of-two texture.</strong><br>In WebGL, non-power-of-two textures are allowed, but there are limitations: Mipmap cannot be used if texture is non-power-of-two. The only repeat mode allowed is gl.CLAMP_TO_EDGE.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">isPowerOf2</span>(image.<span class="property">width</span>) &amp;&amp; <span class="title function_">isPowerOf2</span>(image.<span class="property">height</span>)) &#123; </span><br><span class="line">    <span class="comment">// Yes, it&#x27;s a power of 2. Generate mips. </span></span><br><span class="line">    gl.<span class="title function_">generateMipmap</span>(gl.<span class="property">TEXTURE_2D</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="comment">// No, it&#x27;s not a power of 2. Turn off mips and set </span></span><br><span class="line">    gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_WRAP_S</span>, gl.<span class="property">CLAMP_TO_EDGE</span>); </span><br><span class="line">    gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_WRAP_T</span>, gl.<span class="property">CLAMP_TO_EDGE</span>); </span><br><span class="line">    gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_MIN_FILTER</span>, gl.<span class="property">LINEAR</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gl-texImage2D"><a href="#gl-texImage2D" class="headerlink" title="gl.texImage2D"></a>gl.texImage2D</h3><p><strong>gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image)</strong>: Store in the image in the GPU’s texture object. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D">[MDN]</a><br>Assigns a texture image to a texture object, and this function also allows to tell the WebGL system about some properties of the image.</p><h3 id="gl-uniform1"><a href="#gl-uniform1" class="headerlink" title="gl.uniform1*"></a>gl.uniform1*</h3><p><strong>gl.uniform1i(uniformVar, texUnit)</strong>: Specify the texture unit number and pass it to the corresponding texture uniform variable.</p><h4 id="❓Possible-problem-3"><a href="#❓Possible-problem-3" class="headerlink" title="❓Possible problem"></a>❓Possible problem</h4><p><strong>ERROR: Uniform type does not match uniform method.</strong><br>gl.uniform1f(u_alpha, alpha): A floating point Number for floating point values.<br>gl.uniform1i: An integer Number for integer values.<br>Prone to typo. In my case, the value of alpha is a single floating point number, so the corresponding uniform variable is set using gl.uniform1f. </p><h2 id="Texture-Mapping"><a href="#Texture-Mapping" class="headerlink" title="Texture Mapping"></a>Texture Mapping</h2><p><img src="https://s2.loli.net/2022/11/18/T9XjlZYQqz12UN6.png" alt="15.png"></p><h2 id="Update-Shaders"><a href="#Update-Shaders" class="headerlink" title="Update Shaders"></a>Update Shaders</h2><p>In the vertex shader, creating a varying variable that will interpolate the texture coordinates across the surface of a triangle. In the fragment shader, use the texture coordinates to lookup a color from the texture image. <a href="http://learnwebgl.brown37.net/10_surface_properties/texture_mapping_images.html">[learnwebgl]</a></p><h3 id="Vertex-Shader"><a href="#Vertex-Shader" class="headerlink" title="Vertex Shader"></a>Vertex Shader</h3><p>Define vertex shader in essl using es6 template strings. Two things will be done here: pass the texture unit to the slice shader; transfer texture coordinates from vertex shader to vertex shader.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> vShaderCode = `</span><br><span class="line">    attribute vec4 aVertexPosition;</span><br><span class="line">    attribute vec2 aTextureCoord;</span><br><span class="line"></span><br><span class="line">    uniform mat4 uModelViewMatrix;</span><br><span class="line">    uniform mat4 uProjectionMatrix;</span><br><span class="line"></span><br><span class="line">    varying highp vec2 vTextureCoord;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;</span><br><span class="line">      vTextureCoord = aTextureCoord;</span><br><span class="line">    &#125;</span><br><span class="line">`;</span><br></pre></td></tr></table></figure><h3 id="Fragment-Shader"><a href="#Fragment-Shader" class="headerlink" title="Fragment Shader"></a>Fragment Shader</h3><p>Define fragment shader in essl using es6 template strings. The GLSL ES built-in function texture2D() is used to get the pixel color from the texture map image by fetching the texel on the texture based on the value of the texture coordinates.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> fsSource = `</span><br><span class="line">    varying highp vec2 vTextureCoord;</span><br><span class="line"></span><br><span class="line">    uniform sampler2D uSampler;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">      gl_FragColor = texture2D(uSampler, vTextureCoord);</span><br><span class="line">    &#125;</span><br><span class="line">`;</span><br></pre></td></tr></table></figure><h2 id="Depth-Test"><a href="#Depth-Test" class="headerlink" title="Depth Test"></a>Depth Test</h2><p>By default, WebGL handles vertices in the order they are in the buffer in order to speed up drawing operations. If a vertex that is close is drawn first and a vertex that is far away is drawn later, the object that is far away that is drawn later obscures the object that is close instead. Depth monitoring takes the color of the pixel with the smaller z-value as the final drawn color, unless transparent objects need to be drawn, and depth detection is usually turned on.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gl.<span class="title function_">enable</span>(gl.<span class="property">DEPTH_TEST</span>); </span><br><span class="line">gl.<span class="title function_">disable</span>(gl.<span class="property">DEPTH_TEST</span>);</span><br></pre></td></tr></table></figure><h2 id="Alpha-Blending"><a href="#Alpha-Blending" class="headerlink" title="Alpha Blending"></a>Alpha Blending</h2><p>WebGL does not provide alpha blending by default, to turn on alpha blending, WebGL needs to use the source and target colors, and the blended color is calculated by the blending method set in gl.blendFunc. If the 3D scene is drawn with both opaque and translucent objects, the graphics should be drawn as following:</p><ul><li>Enable the hidden surface elimination: gl.enable(gl.DEPTH_TEST);</li><li>Draw all opaque objects;</li><li>Lock the write operation of the depth buffer used for hidden surface elimination so that it is read-only: gl.depthMask(false);</li><li>Draw all translucent objects, noting that they are to be sorted by depth and then drawn from back to front;</li><li>Release the depth buffer to make it readable and writable: gl.depthMask(true).<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (alpha == <span class="number">1</span>) &#123;</span><br><span class="line">    gl.<span class="title function_">disable</span>(gl.<span class="property">BLEND</span>);</span><br><span class="line">    gl.<span class="title function_">depthMask</span>(<span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    gl.<span class="title function_">enable</span>(gl.<span class="property">BLEND</span>); <span class="comment">// enable alpha blending</span></span><br><span class="line">    gl.<span class="title function_">blendFunc</span>(gl.<span class="property">SRC_ALPHA</span>, gl.<span class="property">ONE_MINUS_SRC_ALPHA</span>); <span class="comment">// premultiplied</span></span><br><span class="line">    gl.<span class="title function_">depthMask</span>(<span class="literal">false</span>); <span class="comment">// disable depth mask</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p>📮 If find any errors, please feel free to discuss and correct them: <a href="mailto:&#98;&#x73;&#117;&#53;&#x40;&#110;&#99;&#x73;&#117;&#x2e;&#x65;&#x64;&#117;">&#98;&#x73;&#117;&#53;&#x40;&#110;&#99;&#x73;&#117;&#x2e;&#x65;&#x64;&#117;</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL#updating_th</summary>
      
    
    
    
    <category term="Coding" scheme="http://example.com/categories/Coding/"/>
    
    
    <category term="WebGL" scheme="http://example.com/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>Reading Reactions - Principles of Computer Graphics</title>
    <link href="http://example.com/2022/10/17/Reading-Reactions-Principles-of-Computer-Graphics/"/>
    <id>http://example.com/2022/10/17/Reading-Reactions-Principles-of-Computer-Graphics/</id>
    <published>2022-10-18T01:07:38.000Z</published>
    <updated>2022-11-27T03:54:03.240Z</updated>
    
    <content type="html"><![CDATA[<p>This document is to record my reading reactions after reading the book Fundamentals of Computer Graphics on the course <em><strong>CSC 570: Principles of Computer Graphics</strong></em> I took in my first semester. I benefited a lot from this course and also programmed some interesting projects. If you find any errors, please feel free to discuss and correct them: <a href="mailto:&#x62;&#x73;&#117;&#53;&#64;&#110;&#99;&#x73;&#x75;&#46;&#x65;&#x64;&#x75;">&#x62;&#x73;&#117;&#53;&#64;&#110;&#99;&#x73;&#x75;&#46;&#x65;&#x64;&#x75;</a>. 😊 As an introductory Computer Graphics scholar, I would recommend the following resources.</p><ul><li><em><strong>Fundamentals of Computer Graphics</strong></em> Marshner &amp; Shirley. (2016)</li><li><em><strong>Interactive 3D Graphics</strong></em> Udacity <a href="https://www.youtube.com/playlist?list=PLAwxTw4SYaPlaHwnoGxJE7NFhEWRCIyet">youtube</a></li></ul><h2 id="09-x2F-01-x2F-2022-History"><a href="#09-x2F-01-x2F-2022-History" class="headerlink" title="09&#x2F;01&#x2F;2022 - History"></a>09&#x2F;01&#x2F;2022 - History</h2><p><em><strong>Four decades of computer graphics</strong></em><br>As a beginner in this discipline, reading this paper presented me with the challenge of understanding the terminology, so I also spent some extra time searching for it to find a better understanding. Prior to reading it, I simply assumed that computer graphics is primarily driven by the development of rendering techniques and mathematical algorithms. After reading it, I realized that computing power is also an important factor in the widespread and gradual application of computer graphics in many fields. What impresses me most is that computer graphics is still going strong after 40 years of development and various obstacles like cost and memory, and I wonder what the future focus of computer graphics practitioners would be.</p><h2 id="09-x2F-01-x2F-2022-Ray-Casting"><a href="#09-x2F-01-x2F-2022-Ray-Casting" class="headerlink" title="09&#x2F;01&#x2F;2022 - Ray Casting"></a>09&#x2F;01&#x2F;2022 - Ray Casting</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 4 Ray tracing</strong></em><br>Chapter 4 introduces the geometric method to calculate ray intersection with sth, it reminds me of a scene when playing a game: the screen shows a 3D cube, when I click on the screen with the mouse, how does the computer determine which side of the cube I am clicking on? I try to substitute the method in the Chapter 4, maybe we can convert the mouse to a ray and then convert the cube to the same spatial coordinate system with it and do the intersection detection. However, the projection on the screen is a 2D coordinate system, how to convert mouse clicked point back to 3D space? Ray tracing seems to be an ideal way to determine it.</p><h2 id="09-x2F-01-x2F-2022-Viewing"><a href="#09-x2F-01-x2F-2022-Viewing" class="headerlink" title="09&#x2F;01&#x2F;2022 - Viewing"></a>09&#x2F;01&#x2F;2022 - Viewing</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 7 Viewing</strong></em><br>In Chapter 7, I learned how to use matrix transformations to represent the positions of points in different coordinate systems during the rasterization process to complete the 3D to 2D conversion. This process gives me a more concrete understanding of the imaging principles of pinhole cameras, and I also have my own understanding, 1. modeling transformations : I interpret this step as adjusting the objects in the game scene to where they should be. 2. camera transformations: determine the position of objects relative to game perspective. 3. projection transformations: project objects from 3D to 2D according to whether it is a parallel or perspective projection. 4. viewport transformations: Map the 2D plane within screen resolution range.</p><h2 id="09-x2F-10-x2F-2022-Local-Illumination"><a href="#09-x2F-10-x2F-2022-Local-Illumination" class="headerlink" title="09&#x2F;10&#x2F;2022 - Local Illumination"></a>09&#x2F;10&#x2F;2022 - Local Illumination</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 10 Surface shading</strong></em><br>In this chapter, I learned about the application of three shading methods. After reading I think the essential difference between these three shading methods is the frequency of sampling, the higher the frequency the more it can reflect the real situation. Theoretically, the frequency of Flat Shading can be higher than Phong Shading as long as the sampled surface is smaller than the pixel.</p><h2 id="09-x2F-17-x2F-2022-Ray-Tracing"><a href="#09-x2F-17-x2F-2022-Ray-Tracing" class="headerlink" title="09&#x2F;17&#x2F;2022 - Ray Tracing"></a>09&#x2F;17&#x2F;2022 - Ray Tracing</h2><p><em><strong>An improved illumination model for shaded display</strong></em><br>I read this paper in which Turner Whitted proposes a recursive ray-tracing algorithm, and I think the most important change that makes Ray Casting better in this algorithm is to draw and analyze more rays. Unlike rasterization I learned before, this algorithm simulates the real behavior of real rays as it bounces around objects, but as we know, in the real world rays come not only from light sources, but also indirect lighting in most cases. In addition, when I saw that the generation times for drawing the scenes in the paper are so long, it made me very curious about what improvements or optimizations were made to achieve the current rendering speed.</p><h2 id="09-x2F-20-x2F-2022-WebGL"><a href="#09-x2F-20-x2F-2022-WebGL" class="headerlink" title="09&#x2F;20&#x2F;2022 - WebGL"></a>09&#x2F;20&#x2F;2022 - WebGL</h2><p><em><strong>An introduction to WebGL - Chapter 1 in WebGL: up and running</strong></em><br>I read the Chapter 1 this week. In addition to the explanation of some basic concepts, it also introduces the 8 steps of rendering WebGL into a page. For me, there are two points that are not very easy to understand, one is the use of ArrayBuffer, and the other is Shader written in advanced C-like language, but I found that if I use Three.js’ Shader API, I can write it as JS instead. WebGL is an implementation subset of OpenGL. I believe that when using WebGL to render 3D graphics, the overall code size should be much less, and the semantics will be clearer.</p><h2 id="09-x2F-20-x2F-2022-Modeling"><a href="#09-x2F-20-x2F-2022-Modeling" class="headerlink" title="09&#x2F;20&#x2F;2022 - Modeling"></a>09&#x2F;20&#x2F;2022 - Modeling</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 12.1 Data Structures for Graphics</strong></em><br>I read Chapter 12.1-12.1.2, which is about the underlying part when implementing the graphics code. As we all know, the geometric transformation, detection, animation and rendering shading of 3D Graphics are all based on triangle meshes, so the basic principles and optimization strategies of triangle meshes are very important. The reason for having various data structures for triangle meshes is that we need more than just the basics of vertex position and point-face relationship when dealing with triangle meshes, we also need to obtain properties such as point-edge adjacency, connectivity, etc. In this case, if we just use the most basic data structures, it will make the operation extremely inefficient. The concept of Indexed Mesh Storage is interesting to me, it takes advantage of the shared nature of vertices, and I think it can be interpreted as a graph or a complex chain table.</p><h2 id="10-x2F-01-x2F-2022-Transformation"><a href="#10-x2F-01-x2F-2022-Transformation" class="headerlink" title="10&#x2F;01&#x2F;2022 - Transformation"></a>10&#x2F;01&#x2F;2022 - Transformation</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 6.1-6.3 Transformation Matrices</strong></em><br>I read Chapter 6.1-6.3, which deepened my understanding of the transformation nature of linear algebra in Computer Graphics, and also let me understand the practicability of linear algebra in complex transformations. The Chapter 6.1 2D Linear Transformations remind me of one of the CSS function I used before — matrix() which can be used with CSS transforms to style elements in a 2D space, and the principle behind it is matrix multiplication. One of the more difficult to understand for me is the content in the Decomposition of Transformations, so it led me to an extensive search to further understand.</p><h2 id="10-x2F-07-x2F-2022-Projection"><a href="#10-x2F-07-x2F-2022-Projection" class="headerlink" title="10&#x2F;07&#x2F;2022 - Projection"></a>10&#x2F;07&#x2F;2022 - Projection</h2><p><em><strong>Allegory, Realism, and Vermeer’s Use of the Camera Obscuras</strong></em><br>The author reconstructed Vermeer’s studio using the camera obscura, proving that the camera obscura was used to project accurate images for painters to outline. In addition, I also learned a little bit about the book Vermeer’s Camera: Uncovering the Truth behind the Masterpieces written by the same author. It reminds me of the pinhole camera exercise I did in the first week, but I didn’t connect it with painting because the imaging results I saw at that time were not particularly clear, and the colors were not particularly restored. I was shocked that Vermeer invented this kind of “pinhole imaging” method that works on the same principle as camera imaging, and I just feel like I was an “artist” myself when programming 3D scenes.</p><h2 id="10-x2F-13-x2F-2022-Rasterization"><a href="#10-x2F-13-x2F-2022-Rasterization" class="headerlink" title="10&#x2F;13&#x2F;2022 - Rasterization"></a>10&#x2F;13&#x2F;2022 - Rasterization</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 8.1 The graphics pipeline</strong></em><br>I learned the Chapter 8.1 which introduces rasterization and two functions of clipping, pseudocodes in the chapter are really helpful for me. In chapter 4 I learned that ray tracing is a kind of image-order rendering and rasterization in this chapter is a kind of object-order rendering. What I found interesting was that I did have some questions that came up during the reading 8.1.2 Triangle Rasterization, and these questions in detail happened to be memtioned one by one in this chapter, such as the problem when the center of gravity of a pixel falls exactly on the common side of two triangles.</p><h2 id="10-x2F-13-x2F-2022-Pipeline"><a href="#10-x2F-13-x2F-2022-Pipeline" class="headerlink" title="10&#x2F;13&#x2F;2022 - Pipeline"></a>10&#x2F;13&#x2F;2022 - Pipeline</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 8.2-8.3 The graphics pipeline</strong></em><br>In Chapter 8.2-8.3, I learned about geometry operations before rasterization and pixel operations after rasterization and their purpose based on examples. Personal understanding， briefly, what the vertex processing stage does is to add necessary information to the view based on the conversion, and finally the fragment blending stage combines all the geometric primitive to calculate the final color. Rasterization produces jagged lines and triangular edges as we all know, so the method of antialiasing also deserves attention, SSAA is the simplest antialiasing algorithm, but the performance overhead is also huge, I would like to know which methods are currently the most widely used.</p><h2 id="10-x2F-18-x2F-2022-Shading"><a href="#10-x2F-18-x2F-2022-Shading" class="headerlink" title="10&#x2F;18&#x2F;2022 - Shading"></a>10&#x2F;18&#x2F;2022 - Shading</h2><p><em><strong>Illumination for computer generated pictures - Bui Tuong Phong 1975</strong></em><br>I read this paper where the author effectively simulated diffuse reflections and highlights by a purely geometric approach and proposed Phong reflection model for computing highlights which is still active in the field of real-time rendering nowadays. This model divides the lighting into 3 parts, ambient, diffuse, and specular reflections, however, it required some overhead involved in calculating the light reflection vector, leading to the development of the Blinn-Phong model that commonly we used today.</p><h2 id="10-x2F-18-x2F-2022-Texture"><a href="#10-x2F-18-x2F-2022-Texture" class="headerlink" title="10&#x2F;18&#x2F;2022 - Texture"></a>10&#x2F;18&#x2F;2022 - Texture</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 11.1-11.4 Texture mapping</strong></em><br>In this Chapter, I read about the traditional texture mapping in graphics. I have to say that the examples given in the text are very vivid and helpful for my understanding. Contrary to what I thought before reading, texture mapping doesn’t change the shape of the surface, it doesn’t add or subtract polygons actually. I learned that the basic idea to make the surface textured in this chapter is to make the texture into a texture map&#x2F;image, then find the corresponding color from the image and apply it to the vertices of the surface when shading.</p><h2 id="10-x2F-28-x2F-2022-Hidden-Surfaces"><a href="#10-x2F-28-x2F-2022-Hidden-Surfaces" class="headerlink" title="10&#x2F;28&#x2F;2022 - Hidden Surfaces"></a>10&#x2F;28&#x2F;2022 - Hidden Surfaces</h2><p><em><strong>Haines, E. Videos 38-44 and 109-110 of Udacity’s Interactive 3D Graphics course</strong></em><br>I learned abut z-buffer and z-fighting in this week’s readings. We can know that when the objects are occluded from each other in depth, they cannot be sorted in advance using the painter’s algorithm. Unlike the painter’s algorithm, the z-buffer does not need to sort the objects from far to near, but for each pixel, so only linear complexity is required. And z-fighting is also interesting and easy to understand because of the accuracy error in the computation.</p><h2 id="11-x2F-04-x2F-2022-Images-amp-displays"><a href="#11-x2F-04-x2F-2022-Images-amp-displays" class="headerlink" title="11&#x2F;04&#x2F;2022 - Images &amp; displays"></a>11&#x2F;04&#x2F;2022 - Images &amp; displays</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 3.1-3.2 Raster images &amp; Chapter 17.4 Graphics hardware buffers</strong></em><br>After reading Chapter 3.1-3.2, I gained a lot of new insights especially nonlinearities of standard display, such as the fact that monitors display the input pixel values non-linearly, and I learned that human perception of color is also non-linear. As a result, the meaning of Gamma is the efficient use of color storage to achieve the effect that the input equals the output. In Chapter 17.4 I learned some basic concepts of Graphics Hardware Programming.</p><h2 id="11-x2F-10-x2F-2022-Aliasing"><a href="#11-x2F-10-x2F-2022-Aliasing" class="headerlink" title="11&#x2F;10&#x2F;2022 - Aliasing"></a>11&#x2F;10&#x2F;2022 - Aliasing</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 9 Signal processing</strong></em><br>I read Chapter 9 this week, which introduces the principles behind the algorithm that improves image quality, and personally I think this chapter is not easy to understand. I learned that in simple terms, aliasing occurs because it is considered as a low frequency signal due to undersampling, jaggies and moire pattern are two common artifacts in images. This chapter also introduces some important applications of convolution in image processing, and I think is the most difficult part, which led me to an extensive search to further understand.</p><h2 id="11-x2F-19-x2F-2022-Structures"><a href="#11-x2F-19-x2F-2022-Structures" class="headerlink" title="11&#x2F;19&#x2F;2022 - Structures"></a>11&#x2F;19&#x2F;2022 - Structures</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 12.1.3-12.2 Data Structures for Graphics</strong></em><br>I found that Scene Graphs are an interesting data structure and is not difficult to understand for me. Store by tree structure, use the root node of the scene as the root of the tree, and then continuously expand to the deeper layers of the tree, where each node keeps the information of attributes and its transformation matrix. When render the scene, use the composite matrix in the stack to draw the objects by DFS. In summary, its essence is the use of multiway tree and stack.</p><h2 id="11-x2F-26-x2F-2022-Curves"><a href="#11-x2F-26-x2F-2022-Curves" class="headerlink" title="11&#x2F;26&#x2F;2022 - Curves"></a>11&#x2F;26&#x2F;2022 - Curves</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 15 Curves</strong></em><br>I read the Chapter 15 this week which discusses three representations of curves. I’m really interested in the Bézier Curves part because it reminds me of the vector editor I wrote before which allows designers to create and modify vector curves, at that time I encountered some interesting questions while programming, such as how the adjacent curve points change when dragging edge, how to compute the nearest point on the curve when mouse hover. And I think that Figma’s Vector Networks that implemented the Bézier Curves are super cool. Anyway, here is a primer on Bézier Curves I would recommend: <a href="https://pomax.github.io/bezierinfo/index.html">https://pomax.github.io/bezierinfo/index.html</a>.</p><h2 id="11-x2F-26-x2F-2022-Color"><a href="#11-x2F-26-x2F-2022-Color" class="headerlink" title="11&#x2F;26&#x2F;2022 - Color"></a>11&#x2F;26&#x2F;2022 - Color</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 19 Color</strong></em><br>The color format I use most often is RGB, the chapter 19 refreshed my perception of color that the RGB color space can only represent a small part of the XYZ color space. Storing linear RGB color values in an 8-bit per image format results in visually low accuracy due to the non-linearity of human color perception, and to improve the visual quality, sRGB is defined with a gamma correction that gives a non-linear distribution of values.</p><img src="https://blush.design/api/download?shareUri=HmfkaZ7RkuyKIxtR&c=Clothing_0%7Eff4b33&w=800&h=800&fm=png" width="50%" height="50%">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This document is to record my reading reactions after reading the book Fundamentals of Computer Graphics on the course &lt;em&gt;&lt;strong&gt;CSC 57</summary>
      
    
    
    
    <category term="Reading" scheme="http://example.com/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/10/14/hello-world/"/>
    <id>http://example.com/2022/10/14/hello-world/</id>
    <published>2022-10-14T05:09:50.814Z</published>
    <updated>2022-10-14T21:46:39.055Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
