<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gloria&#39;s Notebook</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-18T03:38:20.959Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Gloria Su</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reading Reactions - Principles of Computer Graphics</title>
    <link href="http://example.com/2022/10/17/Reading-Reactions-Principles-of-Computer-Graphics/"/>
    <id>http://example.com/2022/10/17/Reading-Reactions-Principles-of-Computer-Graphics/</id>
    <published>2022-10-18T01:07:38.000Z</published>
    <updated>2022-10-18T03:38:20.959Z</updated>
    
    <content type="html"><![CDATA[<p>This document is to record my reading reactions after reading the book <em><strong>Fundamentals of Computer Graphics</strong></em> on the course <em><strong>CSC 570: Principles of Computer Graphics</strong></em> I took in my first semester. I benefited a lot from this course and also programmed some interesting projects. If you find any errors, please feel free to discuss and correct them: <a href="mailto:&#98;&#x73;&#117;&#x35;&#64;&#x6e;&#99;&#115;&#x75;&#x2e;&#x65;&#100;&#x75;">&#98;&#x73;&#117;&#x35;&#64;&#x6e;&#99;&#115;&#x75;&#x2e;&#x65;&#100;&#x75;</a>. üòä</p><h2 id="09-x2F-01-x2F-2022-History"><a href="#09-x2F-01-x2F-2022-History" class="headerlink" title="09&#x2F;01&#x2F;2022 - History"></a>09&#x2F;01&#x2F;2022 - History</h2><p><em><strong>Four decades of computer graphics</strong></em><br>As a beginner in this discipline, reading this paper presented me with the challenge of understanding the terminology, so I also spent some extra time searching for it to find a better understanding. Prior to reading it, I simply assumed that computer graphics is primarily driven by the development of rendering techniques and mathematical algorithms. After reading it, I realized that computing power is also an important factor in the widespread and gradual application of computer graphics in many fields. What impresses me most is that computer graphics is still going strong after 40 years of development and various obstacles like cost and memory, and I wonder what the future focus of computer graphics practitioners would be.</p><h2 id="09-x2F-01-x2F-2022-Ray-Casting"><a href="#09-x2F-01-x2F-2022-Ray-Casting" class="headerlink" title="09&#x2F;01&#x2F;2022 - Ray Casting"></a>09&#x2F;01&#x2F;2022 - Ray Casting</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 4 Ray tracing</strong></em><br>Chapter 4 introduces the geometric method to calculate ray intersection with sth, it reminds me of a scene when playing a game: the screen shows a 3D cube, when I click on the screen with the mouse, how does the computer determine which side of the cube I am clicking on? I try to substitute the method in the Chapter 4, maybe we can convert the mouse to a ray and then convert the cube to the same spatial coordinate system with it and do the intersection detection. However, the projection on the screen is a 2D coordinate system, how to convert mouse clicked point back to 3D space? Ray tracing seems to be an ideal way to determine it.</p><h2 id="09-x2F-01-x2F-2022-Viewing"><a href="#09-x2F-01-x2F-2022-Viewing" class="headerlink" title="09&#x2F;01&#x2F;2022 - Viewing"></a>09&#x2F;01&#x2F;2022 - Viewing</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 7 Viewing</strong></em><br>In Chapter 7, I learned how to use matrix transformations to represent the positions of points in different coordinate systems during the rasterization process to complete the 3D to 2D conversion. This process gives me a more concrete understanding of the imaging principles of pinhole cameras, and I also have my own understanding, 1. modeling transformations : I interpret this step as adjusting the objects in the game scene to where they should be. 2. camera transformations: determine the position of objects relative to game perspective. 3. projection transformations: project objects from 3D to 2D according to whether it is a parallel or perspective projection. 4. viewport transformations: Map the 2D plane within screen resolution range.</p><h2 id="09-x2F-10-x2F-2022-Local-Illumination"><a href="#09-x2F-10-x2F-2022-Local-Illumination" class="headerlink" title="09&#x2F;10&#x2F;2022 - Local Illumination"></a>09&#x2F;10&#x2F;2022 - Local Illumination</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 10 Surface shading</strong></em><br>In this chapter, I learned about the application of three shading methods. After reading I think the essential difference between these three shading methods is the frequency of sampling, the higher the frequency the more it can reflect the real situation. Theoretically, the frequency of Flat Shading can be higher than Phong Shading as long as the sampled surface is smaller than the pixel.</p><h2 id="09-x2F-17-x2F-2022-Ray-Tracing"><a href="#09-x2F-17-x2F-2022-Ray-Tracing" class="headerlink" title="09&#x2F;17&#x2F;2022 - Ray Tracing"></a>09&#x2F;17&#x2F;2022 - Ray Tracing</h2><p><em><strong>An improved illumination model for shaded display</strong></em><br>I read this paper in which Turner Whitted proposes a recursive ray-tracing algorithm, and I think the most important change that makes Ray Casting better in this algorithm is to draw and analyze more rays. Unlike rasterization I learned before, this algorithm simulates the real behavior of real rays as it bounces around objects, but as we know, in the real world rays come not only from light sources, but also indirect lighting in most cases. In addition, when I saw that the generation times for drawing the scenes in the paper are so long, it made me very curious about what improvements or optimizations were made to achieve the current rendering speed.</p><h2 id="09-x2F-20-x2F-2022-WebGL"><a href="#09-x2F-20-x2F-2022-WebGL" class="headerlink" title="09&#x2F;20&#x2F;2022 - WebGL"></a>09&#x2F;20&#x2F;2022 - WebGL</h2><p><em><strong>An introduction to WebGL - Chapter 1 in WebGL: up and running</strong></em><br>I read the Chapter 1 this week. In addition to the explanation of some basic concepts, it also introduces the 8 steps of rendering WebGL into a page. For me, there are two points that are not very easy to understand, one is the use of ArrayBuffer, and the other is Shader written in advanced C-like language, but I found that if I use Three.js‚Äô Shader API, I can write it as JS instead. WebGL is an implementation subset of OpenGL. I believe that when using WebGL to render 3D graphics, the overall code size should be much less, and the semantics will be clearer.</p><h2 id="09-x2F-20-x2F-2022-Modeling"><a href="#09-x2F-20-x2F-2022-Modeling" class="headerlink" title="09&#x2F;20&#x2F;2022 - Modeling"></a>09&#x2F;20&#x2F;2022 - Modeling</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 12.1 Data Structures for Graphics</strong></em><br>I read Chapter 12.1-12.1.2, which is about the underlying part when implementing the graphics code. As we all know, the geometric transformation, detection, animation and rendering shading of 3D Graphics are all based on triangle meshes, so the basic principles and optimization strategies of triangle meshes are very important. The reason for having various data structures for triangle meshes is that we need more than just the basics of vertex position and point-face relationship when dealing with triangle meshes, we also need to obtain properties such as point-edge adjacency, connectivity, etc. In this case, if we just use the most basic data structures, it will make the operation extremely inefficient. The concept of Indexed Mesh Storage is interesting to me, it takes advantage of the shared nature of vertices, and I think it can be interpreted as a graph or a complex chain table.</p><h2 id="10-x2F-01-x2F-2022-Transformation"><a href="#10-x2F-01-x2F-2022-Transformation" class="headerlink" title="10&#x2F;01&#x2F;2022 - Transformation"></a>10&#x2F;01&#x2F;2022 - Transformation</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 6.1-6.3 Transformation Matrices</strong></em><br>I read Chapter 6.1-6.3, which deepened my understanding of the transformation nature of linear algebra in Computer Graphics, and also let me understand the practicability of linear algebra in complex transformations. The Chapter 6.1 2D Linear Transformations remind me of one of the CSS function I used before ‚Äî matrix() which can be used with CSS transforms to style elements in a 2D space, and the principle behind it is matrix multiplication. One of the more difficult to understand for me is the content in the Decomposition of Transformations, so it led me to an extensive search to further understand.</p><h2 id="10-x2F-07-x2F-2022-Projection"><a href="#10-x2F-07-x2F-2022-Projection" class="headerlink" title="10&#x2F;07&#x2F;2022 - Projection"></a>10&#x2F;07&#x2F;2022 - Projection</h2><p><em><strong>Allegory, Realism, and Vermeer‚Äôs Use of the Camera Obscuras</strong></em><br>The author reconstructed Vermeer‚Äôs studio using the camera obscura, proving that the camera obscura was used to project accurate images for painters to outline. In addition, I also learned a little bit about the book Vermeer‚Äôs Camera: Uncovering the Truth behind the Masterpieces written by the same author. It reminds me of the pinhole camera exercise I did in the first week, but I didn‚Äôt connect it with painting because the imaging results I saw at that time were not particularly clear, and the colors were not particularly restored. I was shocked that Vermeer invented this kind of ‚Äúpinhole imaging‚Äù method that works on the same principle as camera imaging, and I just feel like I was an ‚Äúartist‚Äù myself when programming 3D scenes.</p><h2 id="10-x2F-13-x2F-2022-Rasterization"><a href="#10-x2F-13-x2F-2022-Rasterization" class="headerlink" title="10&#x2F;13&#x2F;2022 - Rasterization"></a>10&#x2F;13&#x2F;2022 - Rasterization</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 8.1 The graphics pipeline</strong></em><br>I learned the Chapter 8.1 which introduces rasterization and two functions of clipping, pseudocodes in the chapter are really helpful for me. In chapter 4 I learned that ray tracing is a kind of image-order rendering and rasterization in this chapter is a kind of object-order rendering. What I found interesting was that I did have some questions that came up during the reading 8.1.2 Triangle Rasterization, and these questions in detail happened to be memtioned one by one in this chapter, such as the problem when the center of gravity of a pixel falls exactly on the common side of two triangles.</p><h2 id="10-x2F-13-x2F-2022-Pipeline"><a href="#10-x2F-13-x2F-2022-Pipeline" class="headerlink" title="10&#x2F;13&#x2F;2022 - Pipeline"></a>10&#x2F;13&#x2F;2022 - Pipeline</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 8.2-8.3 The graphics pipeline</strong></em><br>In Chapter 8.2-8.3, I learned about geometry operations before rasterization and pixel operations after rasterization and their purpose based on examples. Personal understandingÔºå briefly, what the vertex processing stage does is to add necessary information to the view based on the conversion, and finally the fragment blending stage combines all the geometric primitive to calculate the final color. Rasterization produces jagged lines and triangular edges as we all know, so the method of antialiasing also deserves attention, SSAA is the simplest antialiasing algorithm, but the performance overhead is also huge, I would like to know which methods are currently the most widely used.</p><img src="https://blush.design/api/download?shareUri=HmfkaZ7RkuyKIxtR&c=Clothing_0%7Eff4b33&w=800&h=800&fm=png" width="50%" height="50%">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This document is to record my reading reactions after reading the book &lt;em&gt;&lt;strong&gt;Fundamentals of Computer Graphics&lt;/strong&gt;&lt;/em&gt; on the</summary>
      
    
    
    
    <category term="Reading" scheme="http://example.com/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/10/14/hello-world/"/>
    <id>http://example.com/2022/10/14/hello-world/</id>
    <published>2022-10-14T05:09:50.814Z</published>
    <updated>2022-10-14T21:46:39.055Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
